Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 10687170 in 18448ms cpu (79312ms real) (579313 rewrites/second)
result GrammarList: (
grl #0:Msg inL => pk(#0:Msg, #1:Name) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq pk(#1:Name, #2:Name)),
   (#0:Msg notLeq pk(#3:Nonce, #4:Name)),
   (#0:Msg notLeq n(#5:Name, #6:Fresh)),
   (#0:Msg notLeq #7:Name ; n(#7:Name, #8:Fresh)),
   #0:Msg notLeq #9:Nonce ; n(#10:Name, #11:Fresh) ; #10:Name => pk(#0:Msg,
    #12:Name) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq pk(#1:Name, #2:Name)),
   (#0:Msg notLeq pk(#3:Nonce, #4:Name)),
   (#0:Msg notLeq n(#5:Name, #6:Fresh)),
   (#0:Msg notLeq #7:Name ; n(#7:Name, #8:Fresh)),
   #0:Msg notLeq #9:Nonce ; n(#10:Name, #11:Fresh) ; #10:Name => (#0:Msg ;
    #12:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq pk(#1:Name, #2:Name)),
   (#0:Msg notLeq pk(#3:Nonce, #4:Name)),
   (#0:Msg notLeq n(#5:Name, #6:Fresh)),
   (#0:Msg notLeq #7:Name ; n(#7:Name, #8:Fresh)),
   #0:Msg notLeq #9:Nonce ; n(#10:Name, #11:Fresh) ; #10:Name => (#12:Name ;
    #0:Msg) inL . )
| (
grl #0:Msg inL => pk(#0:Msg, #1:Name) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq pk(#1:Name, #2:Name)),
   (#0:Msg notLeq pk(n(#3:Name, #4:Fresh), #5:Name)),
   (#0:Msg notLeq n(#6:Name, #7:Fresh)),
   (#0:Msg notLeq pk(n(#8:Name, #9:Fresh), #10:Name) ; pk(#8:Name, #10:Name)),
   #0:Msg notLeq n(#11:Name, #12:Fresh) ; #11:Name => (#13:Msg ; #0:Msg) inL .
    )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #1:Nonce => n(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #5:Msg inL => pk(#5:Msg, #3:Name) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq #1:Nonce => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:Msg inL => pk(#0:Msg, #1:Name) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:Name, #2:Fresh)),
   (#0:Msg notLeq #3:Name ; n(#3:Name, #4:Fresh)),
   #0:Msg notLeq #5:Nonce ; n(#6:Name, #7:Fresh) ; #6:Name => pk(#0:Msg,
    #8:Key) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:Name, #2:Fresh)),
   (#0:Msg notLeq #3:Name ; n(#3:Name, #4:Fresh)),
   #0:Msg notLeq #5:Nonce ; n(#6:Name, #7:Fresh) ; #6:Name => (#8:Name ;
    #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl #50:Key notInI => pk(#1:Msg, #50:Key) inL . ,none,
grl #50:Key notInI => #1:Msg inL . ,none,
grl #50:Key notInI => #1:Msg inL . } usingGrammar 
grl #50:Key notInI => pk(#1:Msg, #50:Key) inL . )
| errorNoHeuristicApplied {
grl empty => pk(#1:Msg, #2:Key) inL . ,none,
grl empty => #1:Msg inL . ,none,
grl empty => #1:Msg inL . } usingGrammar 
grl empty => pk(#1:Msg, #2:Key) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3817 in 124ms cpu (496ms real) (30782 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   -(pk(a ; NA:Nonce, b)), 
   +(pk(NA:Nonce ; n(b, r:Fresh) ; b, a)) | 
   -(pk(n(b, r:Fresh), b)), nil] 
| 
pk(n(b, r:Fresh), b) inI,
n(b, r:Fresh) inI
| 
-(pk(n(b, r:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 957109 in 1632ms cpu (6528ms real) (586463 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 2879096 in 6572ms cpu (23239ms real) (438085 rewrites/second)
result Summary: States>> 9 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 8087278 in 16044ms cpu (55273ms real) (504068 rewrites/second)
result Summary: States>> 10 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 8669296 in 17612ms cpu (54756ms real) (492238 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 4561335 in 7452ms cpu (18526ms real) (612095 rewrites/second)
result Summary: States>> 8 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 17529786 in 25604ms cpu (62428ms real) (684650 rewrites/second)
result Summary: States>> 14 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 38147780 in 53176ms cpu (134995ms real) (717387 rewrites/second)
result Summary: States>> 11 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(8) .
rewrites: 41072150 in 54924ms cpu (133145ms real) (747799 rewrites/second)
result Summary: States>> 23 Solutions>> 2
==========================================
reduce in MAUDE-NPA : summary(9) .
rewrites: 88745235 in 158556ms cpu (287365ms real) (559709 rewrites/second)
result Summary: States>> 23 Solutions>> 3
==========================================
reduce in MAUDE-NPA : summary(10) .
rewrites: 60659379 in 84540ms cpu (118020ms real) (717522 rewrites/second)
result Summary: States>> 19 Solutions>> 4
==========================================
reduce in MAUDE-NPA : summary(11) .
rewrites: 66308960 in 81220ms cpu (121413ms real) (816411 rewrites/second)
result Summary: States>> 25 Solutions>> 5
==========================================
reduce in MAUDE-NPA : summary(12) .
rewrites: 132184011 in 155936ms cpu (186483ms real) (847681 rewrites/second)
result Summary: States>> 26 Solutions>> 5
==========================================
reduce in MAUDE-NPA : summary(13) .
rewrites: 185346518 in 241196ms cpu (266988ms real) (768447 rewrites/second)
result Summary: States>> 26 Solutions>> 6
==========================================
reduce in MAUDE-NPA : summary(14) .
rewrites: 95481893 in 119888ms cpu (119901ms real) (796425 rewrites/second)
result Summary: States>> 9 Solutions>> 6
==========================================
reduce in MAUDE-NPA : summary(15) .
rewrites: 5361828 in 6460ms cpu (6460ms real) (830004 rewrites/second)
result Summary: States>> 6 Solutions>> 6
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 132 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
pk(n(b, #0:Fresh), i) inI
| 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) inI
| 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 5 > (
:: nil ::
[ nil | 
   -(#0:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil] )
| 
n(b, #1:Fresh) !inI,
pk(n(b, #1:Fresh), b) inI,
(#0:Msg ; n(b, #1:Fresh)) inI
| 
-(#0:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
< 1 . 7 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
(n(b, #0:Fresh) ; #1:Msg) inI
| 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 217 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 7 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; pk(n(b, #0:Fresh), i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
(#1:Msg ; pk(n(b, #0:Fresh), i)) inI
| 
-(#1:Msg ; pk(n(b, #0:Fresh), i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
(pk(n(b, #0:Fresh), i) ; #1:Msg) inI
| 
-(pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 11 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #2:Fresh), i)) | 
   -(pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name) inI
| 
-(pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), i) inI
| 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(#1:Msg ; n(b, #0:Fresh)) inI
| 
-(#1:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) inI
| 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 5 . 8 > (
:: nil ::
[ nil | 
   -(#0:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#0:Msg ; n(b, #1:Fresh)) ; #2:Msg), 
   +(#0:Msg ; n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil] )
| 
n(b, #1:Fresh) !inI,
(#0:Msg ; n(b, #1:Fresh)) !inI,
pk(n(b, #1:Fresh), b) inI,
((#0:Msg ; n(b, #1:Fresh)) ; #2:Msg) inI
| 
-((#0:Msg ; n(b, #1:Fresh)) ; #2:Msg), 
+(#0:Msg ; n(b, #1:Fresh)), 
-(#0:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 7 . 6 > (
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
pk(n(b, #0:Fresh), b) inI,
(#2:Msg ; n(b, #0:Fresh) ; #1:Msg) inI
| 
-(#2:Msg ; n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 7 . 8 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
pk(n(b, #0:Fresh), b) inI,
((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg) inI
| 
-((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 369 in 4ms cpu (0ms real) (92250 rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 6 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(pk(n(b, #0:Fresh), i) ; #1:Msg) !inI,
pk(n(b, #0:Fresh), b) inI,
(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg) inI
| 
-(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i) ; #1:Msg), 
-(pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), #1:Name)), 
   +(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i) !inI,
n(b, #0:Fresh) !inI,
pk(n(b, #0:Fresh), b) inI,
pk(i ; n(b, #0:Fresh), #1:Name) inI
| 
-(pk(i ; n(b, #0:Fresh), #1:Name)), 
+(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 11 . 11 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
pk(n(b, #0:Fresh), b) inI,
pk(n(#1:Name, #2:Fresh), #1:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 4 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; pk(n(b, #0:Fresh), i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(#1:Msg ; pk(n(b, #0:Fresh), i)) inI
| 
-(#1:Msg ; pk(n(b, #0:Fresh), i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(pk(n(b, #0:Fresh), i) ; #1:Msg) inI
| 
-(pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #2:Fresh), i)) | 
   -(pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name) inI
| 
-(pk(n(#3:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #3:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 3 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#1:Msg ; n(b, #0:Fresh)) ; #2:Msg), 
   +(#1:Msg ; n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(#1:Msg ; n(b, #0:Fresh)) !inI,
((#1:Msg ; n(b, #0:Fresh)) ; #2:Msg) inI
| 
-((#1:Msg ; n(b, #0:Fresh)) ; #2:Msg), 
+(#1:Msg ; n(b, #0:Fresh)), 
-(#1:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 4 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
(#2:Msg ; n(b, #0:Fresh) ; #1:Msg) inI
| 
-(#2:Msg ; n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 4 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #1:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
   +(n(b, #0:Fresh) ; #1:Msg), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(n(b, #0:Fresh) ; #1:Msg) !inI,
((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg) inI
| 
-((n(b, #0:Fresh) ; #1:Msg) ; #2:Msg), 
+(n(b, #0:Fresh) ; #1:Msg), 
-(n(b, #0:Fresh) ; #1:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 7 . 6 . 8 > (
:: nil ::
[ nil | 
   -(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#0:Msg ; n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
   +(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil] )
| 
n(b, #1:Fresh) !inI,
(#0:Msg ; n(b, #1:Fresh) ; #2:Msg) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
pk(n(b, #1:Fresh), b) inI,
((#0:Msg ; n(b, #1:Fresh) ; #2:Msg) ; #3:Msg) inI
| 
-((#0:Msg ; n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
+(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), 
-(#0:Msg ; n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 526 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(n(b, #0:Fresh), b) inI
| 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(pk(n(b, #0:Fresh), i) ; #1:Msg) !inI,
(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg) inI
| 
-(#2:Msg ; pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i) ; #1:Msg), 
-(pk(n(b, #0:Fresh), i) ; #1:Msg), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), #1:Name)), 
   +(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i) !inI,
n(b, #0:Fresh) !inI,
pk(i ; n(b, #0:Fresh), #1:Name) inI
| 
-(pk(i ; n(b, #0:Fresh), #1:Name)), 
+(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 3 . 4 . 3 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #0:Fresh) ; #2:Msg), 
   +(n(b, #0:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #2:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#1:Msg ; n(b, #0:Fresh) ; #2:Msg) ; #3:Msg), 
   +(#1:Msg ; n(b, #0:Fresh) ; #2:Msg), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
n(b, #0:Fresh) !inI,
(#1:Msg ; n(b, #0:Fresh) ; #2:Msg) !inI,
(n(b, #0:Fresh) ; #2:Msg) !inI,
((#1:Msg ; n(b, #0:Fresh) ; #2:Msg) ; #3:Msg) inI
| 
-((#1:Msg ; n(b, #0:Fresh) ; #2:Msg) ; #3:Msg), 
+(#1:Msg ; n(b, #0:Fresh) ; #2:Msg), 
-(#1:Msg ; n(b, #0:Fresh) ; #2:Msg), 
+(n(b, #0:Fresh) ; #2:Msg), 
-(n(b, #0:Fresh) ; #2:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 634 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 4 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; pk(n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(#2:Msg ; pk(n(b, #0:Fresh), b)) inI
| 
-(#2:Msg ; pk(n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; #2:Msg), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), b) ; #2:Msg) inI
| 
-(pk(n(b, #0:Fresh), b) ; #2:Msg), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #3:Fresh), b)) | 
   -(pk(n(#4:Name, #3:Fresh) ; n(b, #0:Fresh) ; b, #4:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(n(#4:Name, #3:Fresh) ; n(b, #0:Fresh) ; b, #4:Name) inI
| 
-(pk(n(#4:Name, #3:Fresh) ; n(b, #0:Fresh) ; b, #4:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name)), 
   +(pk(i, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), #1:Name)), 
   +(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)) !inI,
pk(n(b, #0:Fresh), #1:Name) inI
| 
-(pk(i, #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name)), 
+(pk(i, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)), 
-(pk(i ; n(b, #0:Fresh), #1:Name)), 
+(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(#1:Name, #2:Fresh), i) ; pk(#1:Name, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| ghost(pk(i, #1:Name)))
(< 1 . 3 . 2 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
n(#1:Name, #2:Fresh) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 8 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg) inI
| 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 3 . 2 . 6 . 7 . 12 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #4:Fresh), #1:Name)) | 
   -(pk(n(#5:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
pk(n(#5:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(pk(n(#5:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 811 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), b) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), b) ; #1:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; #1:Msg), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), b) ; #1:Msg) !inI,
(#3:Msg ; pk(n(b, #0:Fresh), b) ; #1:Msg) inI
| 
-(#3:Msg ; pk(n(b, #0:Fresh), b) ; #1:Msg), 
+(pk(n(b, #0:Fresh), b) ; #1:Msg), 
-(pk(n(b, #0:Fresh), b) ; #1:Msg), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(#1:Name, #2:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), #1:Name)), 
   +(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(b ; n(b, #0:Fresh), #1:Name) inI
| 
-(pk(b ; n(b, #0:Fresh), #1:Name)), 
+(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(#1:Name, #2:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(a ; n(a, #2:Fresh), b)) | 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(a ; n(a, #2:Fresh), b) inI
| 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(b, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(b, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(b, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(b, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) inI,
(pk(n(b, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(b, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(b, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(b, #0:Fresh) ; b, #2:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), nil] )
| 
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i) !inI,
n(b, #1:Fresh) !inI,
(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(#3:Msg ; pk(n(b, #1:Fresh), #0:Name)) inI
| 
-(#3:Msg ; pk(n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(n(b, #1:Fresh), b)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #0:Name)))
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), nil] )
| 
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i) !inI,
n(b, #1:Fresh) !inI,
(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg) inI
| 
-(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(n(b, #1:Fresh), b)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #0:Name)))
(< 1 . 3 . 2 . 5 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #4:Fresh), #0:Name)) | 
   -(pk(n(#5:Name, #4:Fresh) ; n(b, #1:Fresh) ; #0:Name, #5:Name)), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil] )
| 
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i) !inI,
n(b, #1:Fresh) !inI,
(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
pk(n(#5:Name, #4:Fresh) ; n(b, #1:Fresh) ; #0:Name, #5:Name) inI
| 
-(pk(n(#5:Name, #4:Fresh) ; n(b, #1:Fresh) ; #0:Name, #5:Name)), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(n(b, #1:Fresh), b)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #0:Name)))
(< 1 . 3 . 2 . 6 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), i)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
pk(n(#1:Name, #2:Fresh), i) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(pk(n(#1:Name, #2:Fresh), i)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 5 . 5 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; n(#1:Name, #2:Fresh)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(#3:Msg ; n(#1:Name, #2:Fresh)) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(#3:Msg ; n(#1:Name, #2:Fresh)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 5 . 8 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh) ; #3:Msg), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI,
(n(#1:Name, #2:Fresh) ; #3:Msg) inI
| 
-(n(#1:Name, #2:Fresh) ; #3:Msg), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 8 . 7 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #3:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 8 . 14 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#3:Name, #4:Fresh), #1:Name) ;
    pk(#3:Name, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), #3:Name)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, #1:Name)), nil]
    )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(#1:Name, #2:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), #3:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), #3:Name)), 
+(pk(n(#1:Name, #2:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#3:Name, #4:Fresh), #1:Name) ; pk(
    #3:Name, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 6 . 7 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
   +(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), nil] 
    & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #4:Fresh), #1:Name)) | 
   -(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI,
(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name) inI
| 
-(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
+(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), 
-(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 3 . 2 . 6 . 7 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#3:Name, #4:Fresh), #3:Name)), 
   -(pk(n(#1:Name, #2:Fresh), #3:Name) ; pk(#1:Name, #3:Name)), 
   +(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(#1:Name, #2:Fresh), #3:Name) ;
    pk(#1:Name, #3:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #4:Fresh), #1:Name)) | 
   -(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(#1:Name, #2:Fresh), #3:Name) ; pk(
    #1:Name, #3:Name)) !inI,
pk(n(#3:Name, #4:Fresh), #3:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #3:Name) ; pk(#1:Name, #3:Name)) inI
| 
-(pk(n(#3:Name, #4:Fresh), #3:Name)), 
-(pk(n(#1:Name, #2:Fresh), #3:Name) ; pk(#1:Name, #3:Name)), 
+(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(#1:Name, #2:Fresh), #3:Name) ; pk(
    #1:Name, #3:Name)), 
-(pk(n(#3:Name, #4:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #3:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 1066 in 4ms cpu (0ms real) (266500 rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(b, #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name)), 
   +(pk(b, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(#1:Name, #2:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), #1:Name)), 
   +(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b) !inI,
n(b, #0:Fresh) !inI,
(pk(b, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(n(b, #0:Fresh), #1:Name) inI
| 
-(pk(b, #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name)), 
+(pk(b, #1:Name) ; pk(n(b, #0:Fresh), #1:Name)), 
-(pk(b ; n(b, #0:Fresh), #1:Name)), 
+(pk(n(b, #0:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(#1:Name, #2:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| ghost(pk(b, #1:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #2:Fresh)), 
   +(pk(a ; n(a, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(a ; n(a, #2:Fresh), b)) | 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(a ; n(a, #2:Fresh)) inI
| 
-(a ; n(a, #2:Fresh)), 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #2:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(a ; n(a, #2:Fresh), b)) | 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(a, b) ; pk(n(a, #2:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(n(a, #2:Fresh), b) inI
| 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #2:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
n(#1:Name, #2:Fresh) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#4:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) inI,
(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg) inI
| 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 12 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #1:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #6:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #6:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #6:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), nil] )
| 
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i) !inI,
n(b, #1:Fresh) !inI,
(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg) !inI,
(#4:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #3:Msg) inI
| 
-(#4:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
+(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
-(pk(n(b, #1:Fresh), #0:Name) ; #3:Msg), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(i, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(i ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(#0:Name, #2:Fresh), i) ; pk(#0:Name, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(n(b, #1:Fresh)), 
+(pk(n(b, #1:Fresh), b)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #0:Name)))
< 1 . 3 . 2 . 6 . 7 . 8 . 14 . 1 > (
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(i, #3:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), i)), 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), i)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(i, #3:Fresh) ; i, #1:Name)), nil] )
| 
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh) ; n(i, #3:Fresh) ; i, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)) inI
| 
+(pk(#1:Name ; n(#1:Name, #2:Fresh), i)), 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), i)), 
+(pk(n(#1:Name, #2:Fresh) ; n(i, #3:Fresh) ; i, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(i, #3:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(i, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(i,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; i, #1:Name)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(8) .
rewrites: 1330 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 4 > (
:: nil ::
[ nil | 
   -(pk(b, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b) !inI,
n(b, #1:Fresh) !inI,
(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(#4:Msg ; pk(n(b, #1:Fresh), #0:Name)) inI
| 
-(#4:Msg ; pk(n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), 
-(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(b, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 > (
:: nil ::
[ nil | 
   -(pk(b, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b) !inI,
n(b, #1:Fresh) !inI,
(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg) inI
| 
-(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), 
-(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(b, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(b, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #0:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(b, #1:Fresh) ; #0:Name, #6:Name)), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b) !inI,
n(b, #1:Fresh) !inI,
(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(b, #1:Fresh) ; #0:Name, #6:Name) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(b, #1:Fresh) ; #0:Name, #6:Name)), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), 
-(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(b, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), i)), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(pk(a ; n(a, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(a ; n(a, #1:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(a ; n(a, #1:Fresh), i) inI
| 
-(pk(a ; n(a, #1:Fresh), i)), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 4 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(pk(a ; n(a, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -((a ; n(a, #1:Fresh)) ; #3:Msg), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(a ; n(a, #1:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
((a ; n(a, #1:Fresh)) ; #3:Msg) inI
| 
-((a ; n(a, #1:Fresh)) ; #3:Msg), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(pk(a ; n(a, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(a ; n(a, #1:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
n(a, #1:Fresh) inI
| 
-(a), 
-(n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(#3:Msg ; pk(n(a, #0:Fresh), b)) inI
| 
-(#3:Msg ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; #3:Msg), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), b) ; #3:Msg) inI
| 
-(pk(n(a, #0:Fresh), b) ; #3:Msg), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #3:Fresh), b)) | 
   -(pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #4:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #4:Name) inI
| 
-(pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #4:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), i)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(n(#1:Name, #2:Fresh), i) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(pk(n(#1:Name, #2:Fresh), i)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; n(#1:Name, #2:Fresh)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#4:Msg ; n(#1:Name, #2:Fresh)) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#4:Msg ; n(#1:Name, #2:Fresh)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
n(#1:Name, #2:Fresh) inI,
(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh) ; #4:Msg), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(n(#1:Name, #2:Fresh) ; #4:Msg) inI
| 
-(n(#1:Name, #2:Fresh) ; #4:Msg), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)) inI,
(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
pk(n(a, #1:Fresh), a) inI
| 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 12 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#7:Name ; n(#7:Name, #6:Fresh), #1:Name)) | 
   -(pk(n(#7:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #7:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(n(#7:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #7:Name) inI,
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(pk(n(#7:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #7:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 9{1} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #5:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #5:Msg) inI,(
#3:Msg != pk(n(#1:Name, #2:Fresh), #1:Name)),(
#5:Msg != pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)),
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) != pk(n(#1:Name,
    #2:Fresh), #1:Name) ; #5:Msg
| 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #5:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#5:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#5:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 14 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#4:Name, #5:Fresh), #1:Name) ;
    pk(#4:Name, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name)), nil]
    )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name)), 
+(pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#4:Name, #5:Fresh), #1:Name) ; pk(
    #4:Name, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
   +(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), nil] 
    & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #5:Fresh), #1:Name)) | 
   -(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name) inI
| 
-(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
+(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), 
-(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#4:Name, #5:Fresh), #4:Name)), 
   -(pk(n(#1:Name, #2:Fresh), #4:Name) ; pk(#1:Name, #4:Name)), 
   +(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(#1:Name, #2:Fresh), #4:Name) ;
    pk(#1:Name, #4:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #5:Fresh), #1:Name)) | 
   -(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(#1:Name, #2:Fresh), #4:Name) ; pk(
    #1:Name, #4:Name)) !inI,
pk(n(#4:Name, #5:Fresh), #4:Name) inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #4:Name) ; pk(#1:Name, #4:Name)) inI
| 
-(pk(n(#4:Name, #5:Fresh), #4:Name)), 
-(pk(n(#1:Name, #2:Fresh), #4:Name) ; pk(#1:Name, #4:Name)), 
+(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(#1:Name, #2:Fresh), #4:Name) ; pk(
    #1:Name, #4:Name)), 
-(pk(n(#4:Name, #5:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #4:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(9) .
rewrites: 1784 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 > (
:: nil ::
[ nil | 
   -(pk(b, #0:Name)), 
   -(pk(n(b, #1:Fresh), #0:Name)), 
   +(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
   +(pk(n(b, #1:Fresh), #0:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #1:Fresh) ; b, a)) | 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #1:Fresh), #0:Name)), 
   +(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(b, #1:Fresh), #0:Name) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b) !inI,
n(b, #1:Fresh) !inI,
(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg) !inI,
(#5:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #4:Msg) inI
| 
-(#5:Msg ; pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
+(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
-(pk(n(b, #1:Fresh), #0:Name) ; #4:Msg), 
+(pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b, #0:Name)), 
-(pk(n(b, #1:Fresh), #0:Name)), 
+(pk(b, #0:Name) ; pk(n(b, #1:Fresh), #0:Name)), 
-(pk(b ; n(b, #1:Fresh), #0:Name)), 
+(pk(n(b, #1:Fresh) ; n(#0:Name, #2:Fresh) ; #0:Name, b)), 
-(pk(n(b, #1:Fresh), b) ; pk(n(#0:Name, #2:Fresh), b) ; pk(#0:Name, b)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(b, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #1:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), i)), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(pk(a ; n(a, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(a ; n(a, #1:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #1:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
pk(n(a, #1:Fresh), i) inI
| 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #1:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #1:Fresh), i)), 
-(pk(a ; n(a, #1:Fresh), i)), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; n(a, #0:Fresh)), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(#3:Msg ; n(a, #0:Fresh)) inI
| 
-(#3:Msg ; n(a, #0:Fresh)), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(n(a, #0:Fresh) ; #3:Msg) inI
| 
-(n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #0:Fresh), b) ; #2:Msg), 
   +(pk(n(a, #0:Fresh), b) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; #2:Msg), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), b) ; #2:Msg) !inI,
(#4:Msg ; pk(n(a, #0:Fresh), b) ; #2:Msg) inI
| 
-(#4:Msg ; pk(n(a, #0:Fresh), b) ; #2:Msg), 
+(pk(n(a, #0:Fresh), b) ; #2:Msg), 
-(pk(n(a, #0:Fresh), b) ; #2:Msg), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#2:Name, #3:Fresh), b) ; pk(#2:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(b ; n(a, #0:Fresh), #2:Name) inI
| 
-(pk(b ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#2:Name, #3:Fresh), b) ; pk(#2:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b), 
   +(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #4:Fresh), b)) | 
   -(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b) inI
| 
-(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b), 
+(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), 
-(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#3:Name, #4:Fresh), #3:Name)), 
   -(pk(n(a, #0:Fresh), #3:Name) ; pk(b, #3:Name)), 
   +(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(b,
    #3:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #4:Fresh), b)) | 
   -(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(b,
    #3:Name)) !inI,
pk(n(#3:Name, #4:Fresh), #3:Name) inI,
(pk(n(a, #0:Fresh), #3:Name) ; pk(b, #3:Name)) inI
| 
-(pk(n(#3:Name, #4:Fresh), #3:Name)), 
-(pk(n(a, #0:Fresh), #3:Name) ; pk(b, #3:Name)), 
+(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(b,
    #3:Name)), 
-(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; b, #3:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 3 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), i)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(n(#1:Name, #2:Fresh), i) inI,
(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#4:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), i)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 5 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; n(#1:Name, #2:Fresh)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; n(#1:Name, #2:Fresh)) inI,
(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(#3:Msg ; n(#1:Name, #2:Fresh)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 5 . 6 . 8{2} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(n(#1:Name, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#1:Name, #2:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(n(#1:Name, #2:Fresh) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(n(#1:Name, #2:Fresh) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(n(#1:Name, #2:Fresh)), 
-(n(#1:Name, #2:Fresh) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(n(#1:Name, #2:Fresh)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 6 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; pk(n(a, #1:Fresh), a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#3:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #3:Nonce, b) !inI,
pk(#3:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(#2:Msg ; pk(n(a, #1:Fresh), a)) inI
| 
generatedByIntruder(pk(a ; #3:Nonce, b)), 
-(pk(a ; #3:Nonce, b)), 
+(pk(#3:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#3:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(#2:Msg ; pk(n(a, #1:Fresh), a)), 
+(pk(n(a, #1:Fresh), a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; #4:Msg), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), a) ; #4:Msg) inI
| 
-(pk(n(a, #1:Fresh), a) ; #4:Msg), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #4:Fresh), a)) | 
   -(pk(n(#5:Name, #4:Fresh) ; n(a, #1:Fresh) ; a, #5:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
pk(n(#5:Name, #4:Fresh) ; n(a, #1:Fresh) ; a, #5:Name) inI
| 
-(pk(n(#5:Name, #4:Fresh) ; n(a, #1:Fresh) ; a, #5:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
   +(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), nil] 
    & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #7:Nonce, b)), 
   +(pk(#7:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #1:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name) inI
| 
-(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name), 
+(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#5:Name, #6:Fresh), #5:Name)), 
   -(pk(n(#1:Name, #2:Fresh), #5:Name) ; pk(#1:Name, #5:Name)), 
   +(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#1:Name, #2:Fresh), #5:Name) ;
    pk(#1:Name, #5:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #7:Nonce, b)), 
   +(pk(#7:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #1:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#1:Name, #2:Fresh), #5:Name) ; pk(
    #1:Name, #5:Name)) !inI,
pk(n(#5:Name, #6:Fresh), #5:Name) inI,
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(pk(n(#1:Name, #2:Fresh), #5:Name) ; pk(#1:Name, #5:Name)) inI
| 
-(pk(n(#5:Name, #6:Fresh), #5:Name)), 
-(pk(n(#1:Name, #2:Fresh), #5:Name) ; pk(#1:Name, #5:Name)), 
+(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#1:Name, #2:Fresh), #5:Name) ; pk(
    #1:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#1:Name, #2:Fresh) ; #1:Name, #5:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 9{1} . 13{1} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(#5:Msg, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:Name, #2:Fresh) ; #5:Msg), 
   +(pk(n(#1:Name, #2:Fresh) ; #5:Msg, #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#1:Name, #2:Fresh) ; #5:Msg, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI,
(n(#1:Name, #2:Fresh) ; #5:Msg) inI
| 
-(n(#1:Name, #2:Fresh) ; #5:Msg), 
+(pk(n(#1:Name, #2:Fresh) ; #5:Msg, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(#5:Msg, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(#3:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #7:Nonce, b)), 
   +(pk(#7:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg) inI,
(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(#3:Msg ; pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 14 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #4:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
+(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
+(pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #4:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 14 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#4:Name, #5:Fresh), #1:Name) ;
    pk(#4:Name, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)) | 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #7:Nonce, b)), 
   +(pk(#7:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name)), nil]
    )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name) inI,
(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#6:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), #4:Name)), 
+(pk(n(#1:Name, #2:Fresh) ; n(#4:Name, #5:Fresh) ; #4:Name, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(#4:Name, #5:Fresh), #1:Name) ; pk(
    #4:Name, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(10) .
rewrites: 2219 in 4ms cpu (1ms real) (554750 rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 4 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; pk(n(a, #0:Fresh), i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(#3:Msg ; pk(n(a, #0:Fresh), i)) inI
| 
-(#3:Msg ; pk(n(a, #0:Fresh), i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; #3:Msg), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), i) ; #3:Msg) inI
| 
-(pk(n(a, #0:Fresh), i) ; #3:Msg), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #3:Fresh), i)) | 
   -(pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #4:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #4:Name) inI
| 
-(pk(n(#4:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #4:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 3 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(a, #0:Fresh)), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -((#2:Msg ; n(a, #0:Fresh)) ; #4:Msg), 
   +(#2:Msg ; n(a, #0:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(#2:Msg ; n(a, #0:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
((#2:Msg ; n(a, #0:Fresh)) ; #4:Msg) inI
| 
-((#2:Msg ; n(a, #0:Fresh)) ; #4:Msg), 
+(#2:Msg ; n(a, #0:Fresh)), 
-(#2:Msg ; n(a, #0:Fresh)), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 4 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(n(a, #0:Fresh) ; #3:Msg) !inI,
(#4:Msg ; n(a, #0:Fresh) ; #3:Msg) inI
| 
-(#4:Msg ; n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh) ; #3:Msg), 
-(n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 4 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(a, #0:Fresh) ; #3:Msg) ; #4:Msg), 
   +(n(a, #0:Fresh) ; #3:Msg), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(n(a, #0:Fresh) ; #3:Msg) !inI,
((n(a, #0:Fresh) ; #3:Msg) ; #4:Msg) inI
| 
-((n(a, #0:Fresh) ; #3:Msg) ; #4:Msg), 
+(n(a, #0:Fresh) ; #3:Msg), 
-(n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(b, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(b, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#2:Name, #3:Fresh), b) ; pk(#2:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(b, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(n(a, #0:Fresh), #2:Name) inI
| 
-(pk(b, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(b, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(b ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#2:Name, #3:Fresh), b) ; pk(#2:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(b, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
n(#2:Name, #3:Fresh) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 8 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) inI
| 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 12 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #2:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(a, #1:Fresh), a) ; #3:Msg), 
   +(pk(n(a, #1:Fresh), a) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; #3:Msg), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; #3:Msg) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(#5:Msg ; pk(n(a, #1:Fresh), a) ; #3:Msg) inI
| 
-(#5:Msg ; pk(n(a, #1:Fresh), a) ; #3:Msg), 
+(pk(n(a, #1:Fresh), a) ; #3:Msg), 
-(pk(n(a, #1:Fresh), a) ; #3:Msg), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#3:Name, #4:Fresh), a) ; pk(#3:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #3:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
pk(a ; n(a, #1:Fresh), #3:Name) inI
| 
-(pk(a ; n(a, #1:Fresh), #3:Name)), 
+(pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#3:Name, #4:Fresh), a) ; pk(#3:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#4:Name, #5:Fresh), #4:Name)), 
   -(pk(n(a, #1:Fresh), #4:Name) ; pk(a, #4:Name)), 
   +(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(a, #1:Fresh), #4:Name) ; pk(a,
    #4:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#4:Name ; n(#4:Name, #5:Fresh), a)) | 
   -(pk(n(#4:Name, #5:Fresh) ; n(a, #1:Fresh) ; a, #4:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(a, #1:Fresh), #4:Name) ; pk(a,
    #4:Name)) !inI,
pk(n(#4:Name, #5:Fresh), #4:Name) inI,
(pk(n(a, #1:Fresh), #4:Name) ; pk(a, #4:Name)) inI
| 
-(pk(n(#4:Name, #5:Fresh), #4:Name)), 
-(pk(n(a, #1:Fresh), #4:Name) ; pk(a, #4:Name)), 
+(pk(n(#4:Name, #5:Fresh), #4:Name) ; pk(n(a, #1:Fresh), #4:Name) ; pk(a,
    #4:Name)), 
-(pk(n(#4:Name, #5:Fresh) ; n(a, #1:Fresh) ; a, #4:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 8 . 14 . 1 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name)), 
   -(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
   +(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #4:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
   +(pk(n(#1:Name, #2:Fresh), #1:Name)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
   -(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)) | 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
   +(pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#1:Name, #2:Fresh), #1:Name) !inI,
pk(#1:Name ; n(#1:Name, #2:Fresh), b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) !inI,
(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)) !inI,
(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)) inI
| 
-(#5:Msg ; pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
-(pk(#1:Name ; n(#1:Name, #2:Fresh), b)), 
+(pk(n(#1:Name, #2:Fresh) ; n(b, #4:Fresh) ; b, #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #4:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(#1:Name, #2:Fresh), #1:Name)), 
-(pk(n(b, #0:Fresh), #1:Name) ; pk(b, #1:Name)), 
+(pk(n(#1:Name, #2:Fresh), #1:Name) ; pk(n(b, #0:Fresh), #1:Name) ; pk(b,
    #1:Name)), 
-(pk(n(#1:Name, #2:Fresh) ; n(b, #0:Fresh) ; b, #1:Name)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(11) .
rewrites: 2607 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #0:Fresh), i) ; #2:Msg), 
   +(pk(n(a, #0:Fresh), i) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; #2:Msg), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), i) ; #2:Msg) !inI,
(#4:Msg ; pk(n(a, #0:Fresh), i) ; #2:Msg) inI
| 
-(#4:Msg ; pk(n(a, #0:Fresh), i) ; #2:Msg), 
+(pk(n(a, #0:Fresh), i) ; #2:Msg), 
-(pk(n(a, #0:Fresh), i) ; #2:Msg), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
pk(i ; n(a, #0:Fresh), #2:Name) inI
| 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#3:Name, #4:Fresh), #3:Name)), 
   -(pk(n(a, #0:Fresh), #3:Name) ; pk(i, #3:Name)), 
   +(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(i,
    #3:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil, 
   +(pk(#3:Name ; n(#3:Name, #4:Fresh), i)) | 
   -(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; i, #3:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(i,
    #3:Name)) !inI,
pk(n(#3:Name, #4:Fresh), #3:Name) inI,
(pk(n(a, #0:Fresh), #3:Name) ; pk(i, #3:Name)) inI
| 
-(pk(n(#3:Name, #4:Fresh), #3:Name)), 
-(pk(n(a, #0:Fresh), #3:Name) ; pk(i, #3:Name)), 
+(pk(n(#3:Name, #4:Fresh), #3:Name) ; pk(n(a, #0:Fresh), #3:Name) ; pk(i,
    #3:Name)), 
-(pk(n(#3:Name, #4:Fresh) ; n(a, #0:Fresh) ; i, #3:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 5 . 4 . 3 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; #3:Msg), 
   +(n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#2:Msg ; n(a, #0:Fresh) ; #3:Msg) ; #5:Msg), 
   +(#2:Msg ; n(a, #0:Fresh) ; #3:Msg), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(a, #0:Fresh) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(#2:Msg ; n(a, #0:Fresh) ; #3:Msg) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(n(a, #0:Fresh) ; #3:Msg) !inI,
((#2:Msg ; n(a, #0:Fresh) ; #3:Msg) ; #5:Msg) inI
| 
-((#2:Msg ; n(a, #0:Fresh) ; #3:Msg) ; #5:Msg), 
+(#2:Msg ; n(a, #0:Fresh) ; #3:Msg), 
-(#2:Msg ; n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh) ; #3:Msg), 
-(n(a, #0:Fresh) ; #3:Msg), 
+(n(a, #0:Fresh)), 
-(a), 
-(n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 . 6 . 4 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(b, #1:Name)), 
   -(pk(n(a, #0:Fresh), #1:Name)), 
   +(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(a, #0:Fresh), #1:Name)), 
   +(pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #1:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh), #1:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b) !inI,
pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(#5:Msg ; pk(n(a, #0:Fresh), #1:Name)) inI
| 
-(#5:Msg ; pk(n(a, #0:Fresh), #1:Name)), 
+(pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b, #1:Name)), 
-(pk(n(a, #0:Fresh), #1:Name)), 
+(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b ; n(a, #0:Fresh), #1:Name)), 
+(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(b, #1:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 . 6 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(b, #1:Name)), 
   -(pk(n(a, #0:Fresh), #1:Name)), 
   +(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), #1:Name) ; #5:Msg), 
   +(pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #1:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh), #1:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b) !inI,
pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), #1:Name) ; #5:Msg) inI
| 
-(pk(n(a, #0:Fresh), #1:Name) ; #5:Msg), 
+(pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b, #1:Name)), 
-(pk(n(a, #0:Fresh), #1:Name)), 
+(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b ; n(a, #0:Fresh), #1:Name)), 
+(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(b, #1:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(b, #1:Name)), 
   -(pk(n(a, #0:Fresh), #1:Name)), 
   +(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #1:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #1:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #1:Name, #6:Name)), 
   +(pk(n(a, #0:Fresh), #1:Name)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh), #1:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b) !inI,
pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #1:Name, #6:Name) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #1:Name, #6:Name)), 
+(pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b, #1:Name)), 
-(pk(n(a, #0:Fresh), #1:Name)), 
+(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b ; n(a, #0:Fresh), #1:Name)), 
+(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(b, #1:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), i)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), i) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(pk(n(#2:Name, #3:Fresh), i)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 5 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; n(#2:Name, #3:Fresh)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(#5:Msg ; n(#2:Name, #3:Fresh)) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(#5:Msg ; n(#2:Name, #3:Fresh)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 5 . 8 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; #5:Msg), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI,
(n(#2:Name, #3:Fresh) ; #5:Msg) inI
| 
-(n(#2:Name, #3:Fresh) ; #5:Msg), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 8 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 8 . 13 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#5:Name, #6:Fresh), #2:Name) ;
    pk(#5:Name, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name)), nil]
    )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name)), 
+(pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#5:Name, #6:Fresh), #2:Name) ; pk(
    #5:Name, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
   +(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), nil] 
    & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #2:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI,
(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name) inI
| 
-(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
+(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#5:Name, #6:Fresh), #5:Name)), 
   -(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)), 
   +(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ;
    pk(#2:Name, #5:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #2:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(
    #2:Name, #5:Name)) !inI,
pk(n(#5:Name, #6:Fresh), #5:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)) inI
| 
-(pk(n(#5:Name, #6:Fresh), #5:Name)), 
-(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)), 
+(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(
    #2:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pk(a ; n(a, #1:Fresh), b)), 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 > (
:: nil ::
[ nil | 
   -(pk(a, #3:Name)), 
   -(pk(n(a, #1:Fresh), #3:Name)), 
   +(pk(a, #3:Name) ; pk(n(a, #1:Fresh), #3:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#3:Name, #4:Fresh), a) ; pk(#3:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #3:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(a, #3:Name) ; pk(n(a, #1:Fresh), #3:Name)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
pk(n(a, #1:Fresh), #3:Name) inI
| 
-(pk(a, #3:Name)), 
-(pk(n(a, #1:Fresh), #3:Name)), 
+(pk(a, #3:Name) ; pk(n(a, #1:Fresh), #3:Name)), 
-(pk(a ; n(a, #1:Fresh), #3:Name)), 
+(pk(n(a, #1:Fresh) ; n(#3:Name, #4:Fresh) ; #3:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#3:Name, #4:Fresh), a) ; pk(#3:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| ghost(pk(a, #3:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
n(#2:Name, #3:Fresh) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) inI,
(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg) inI
| 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 12 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#7:Name ; n(#7:Name, #6:Fresh), #2:Name)) | 
   -(pk(n(#7:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(n(#7:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(pk(n(#7:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(12) .
rewrites: 3099 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pk(a ; n(a, #1:Fresh), b)), 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
pk(n(a, #0:Fresh), #2:Name) inI
| 
-(pk(i, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
n(#2:Name, #3:Fresh) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(#5:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 8 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) inI
| 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 12 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #2:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 5 . 7 . 6 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(b, #1:Name)), 
   -(pk(n(a, #0:Fresh), #1:Name)), 
   +(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), 
   +(pk(n(a, #0:Fresh), #1:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(b ; n(a, #0:Fresh), #1:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh), #1:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b) !inI,
pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), #1:Name) ; #4:Msg) !inI,
(#6:Msg ; pk(n(a, #0:Fresh), #1:Name) ; #4:Msg) inI
| 
-(#6:Msg ; pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), 
-(pk(n(a, #0:Fresh), #1:Name) ; #4:Msg), 
+(pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b, #1:Name)), 
-(pk(n(a, #0:Fresh), #1:Name)), 
+(pk(b, #1:Name) ; pk(n(a, #0:Fresh), #1:Name)), 
-(pk(b ; n(a, #0:Fresh), #1:Name)), 
+(pk(n(a, #0:Fresh) ; n(#1:Name, #3:Fresh) ; #1:Name, b)), 
-(pk(n(a, #0:Fresh), b) ; pk(n(#1:Name, #3:Fresh), b) ; pk(#1:Name, b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(b, #1:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 6 . 7 . 8 . 13 . 1 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(b, #5:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), b)), 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), b)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(b, #5:Fresh) ; b, #2:Name)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(b, #5:Fresh) ; b, #2:Name) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)) inI
| 
+(pk(#2:Name ; n(#2:Name, #3:Fresh), b)), 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), b)), 
+(pk(n(#2:Name, #3:Fresh) ; n(b, #5:Fresh) ; b, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(b, #5:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(b, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(b,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; b, #2:Name)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 4 > (
:: nil ::
[ nil | 
   -(pk(a, #0:Name)), 
   -(pk(n(a, #1:Fresh), #0:Name)), 
   +(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #1:Fresh), #0:Name)), 
   +(pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #0:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(a, #1:Fresh), #0:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(a ; #3:Nonce, b) !inI,
pk(#3:Nonce ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a) !inI,
pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(#6:Msg ; pk(n(a, #1:Fresh), #0:Name)) inI
| 
-(#6:Msg ; pk(n(a, #1:Fresh), #0:Name)), 
+(pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a, #0:Name)), 
-(pk(n(a, #1:Fresh), #0:Name)), 
+(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a ; n(a, #1:Fresh), #0:Name)), 
+(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #3:Nonce, b)), 
-(pk(a ; #3:Nonce, b)), 
+(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
-(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(a, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, #0:Name)), 
   -(pk(n(a, #1:Fresh), #0:Name)), 
   +(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), #0:Name) ; #6:Msg), 
   +(pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #0:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(a, #1:Fresh), #0:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(a ; #3:Nonce, b) !inI,
pk(#3:Nonce ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a) !inI,
pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #0:Name) ; #6:Msg) inI
| 
-(pk(n(a, #1:Fresh), #0:Name) ; #6:Msg), 
+(pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a, #0:Name)), 
-(pk(n(a, #1:Fresh), #0:Name)), 
+(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a ; n(a, #1:Fresh), #0:Name)), 
+(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #3:Nonce, b)), 
-(pk(a ; #3:Nonce, b)), 
+(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
-(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(a, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, #0:Name)), 
   -(pk(n(a, #1:Fresh), #0:Name)), 
   +(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #0:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#7:Name ; n(#7:Name, #6:Fresh), #0:Name)) | 
   -(pk(n(#7:Name, #6:Fresh) ; n(a, #1:Fresh) ; #0:Name, #7:Name)), 
   +(pk(n(a, #1:Fresh), #0:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(a, #1:Fresh), #0:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(a ; #3:Nonce, b) !inI,
pk(#3:Nonce ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a) !inI,
pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
pk(n(#7:Name, #6:Fresh) ; n(a, #1:Fresh) ; #0:Name, #7:Name) inI
| 
-(pk(n(#7:Name, #6:Fresh) ; n(a, #1:Fresh) ; #0:Name, #7:Name)), 
+(pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a, #0:Name)), 
-(pk(n(a, #1:Fresh), #0:Name)), 
+(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a ; n(a, #1:Fresh), #0:Name)), 
+(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #3:Nonce, b)), 
-(pk(a ; #3:Nonce, b)), 
+(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
-(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(a, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), i)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), i) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(pk(n(#2:Name, #3:Fresh), i)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 5 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; n(#2:Name, #3:Fresh)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#6:Msg ; n(#2:Name, #3:Fresh)) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#6:Msg ; n(#2:Name, #3:Fresh)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
n(#2:Name, #3:Fresh) inI,
(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 8 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; #6:Msg), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(n(#2:Name, #3:Fresh) ; #6:Msg) inI
| 
-(n(#2:Name, #3:Fresh) ; #6:Msg), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 6 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)) inI,
(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 . 11 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil]  & 
:: #7:Fresh ::
[ nil, 
   +(pk(#8:Name ; n(#8:Name, #7:Fresh), #2:Name)) | 
   -(pk(n(#8:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #8:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(n(#8:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #8:Name) inI,
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(pk(n(#8:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #8:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 . 8{1} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #7:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #7:Msg) inI,(
#4:Msg != pk(n(#2:Name, #3:Fresh), #2:Name)),(
#7:Msg != pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)),
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) != pk(n(#2:Name,
    #3:Fresh), #2:Name) ; #7:Msg
| 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #7:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#7:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#7:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #6:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 13 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#6:Name, #7:Fresh), #2:Name) ;
    pk(#6:Name, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #7:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name)), nil]
    )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name)), 
+(pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#6:Name, #7:Fresh), #2:Name) ; pk(
    #6:Name, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
   +(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), nil] 
    & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #7:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #7:Fresh), #2:Name)) | 
   -(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name) inI
| 
-(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
+(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
-(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#6:Name, #7:Fresh), #6:Name)), 
   -(pk(n(#2:Name, #3:Fresh), #6:Name) ; pk(#2:Name, #6:Name)), 
   +(pk(n(#6:Name, #7:Fresh), #6:Name) ; pk(n(#2:Name, #3:Fresh), #6:Name) ;
    pk(#2:Name, #6:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #7:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #7:Fresh), #2:Name)) | 
   -(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(#6:Name, #7:Fresh), #6:Name) ; pk(n(#2:Name, #3:Fresh), #6:Name) ; pk(
    #2:Name, #6:Name)) !inI,
pk(n(#6:Name, #7:Fresh), #6:Name) inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #6:Name) ; pk(#2:Name, #6:Name)) inI
| 
-(pk(n(#6:Name, #7:Fresh), #6:Name)), 
-(pk(n(#2:Name, #3:Fresh), #6:Name) ; pk(#2:Name, #6:Name)), 
+(pk(n(#6:Name, #7:Fresh), #6:Name) ; pk(n(#2:Name, #3:Fresh), #6:Name) ; pk(
    #2:Name, #6:Name)), 
-(pk(n(#6:Name, #7:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #6:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(13) .
rewrites: 3595 in 4ms cpu (2ms real) (898750 rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pk(a ; n(a, #1:Fresh), b)), 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 . 6 . 4 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(a, #0:Fresh), #2:Name) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
(#5:Msg ; pk(n(a, #0:Fresh), #2:Name)) inI
| 
-(#5:Msg ; pk(n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 . 6 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(a, #0:Fresh), #2:Name) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; #5:Msg) inI
| 
-(pk(n(a, #0:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(pk(#6:Name ; n(#6:Name, #5:Fresh), #2:Name)) | 
   -(pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #2:Name, #6:Name)), 
   +(pk(n(a, #0:Fresh), #2:Name)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(a, #0:Fresh), #2:Name) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #2:Name, #6:Name) inI
| 
-(pk(n(#6:Name, #5:Fresh) ; n(a, #0:Fresh) ; #2:Name, #6:Name)), 
+(pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), i)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), i) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(pk(n(#2:Name, #3:Fresh), i)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 5 . 5 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; n(#2:Name, #3:Fresh)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(#5:Msg ; n(#2:Name, #3:Fresh)) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(#5:Msg ; n(#2:Name, #3:Fresh)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 5 . 8 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; #5:Msg), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI,
(n(#2:Name, #3:Fresh) ; #5:Msg) inI
| 
-(n(#2:Name, #3:Fresh) ; #5:Msg), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 8 . 6 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(#6:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 8 . 13 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#5:Name, #6:Fresh), #2:Name) ;
    pk(#5:Name, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name)), nil]
    )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), #5:Name)), 
+(pk(n(#2:Name, #3:Fresh) ; n(#5:Name, #6:Fresh) ; #5:Name, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#5:Name, #6:Fresh), #2:Name) ; pk(
    #5:Name, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 12 . 10 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
   +(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), nil] 
    & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #2:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI,
(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name) inI
| 
-(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
+(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 12 . 13 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#5:Name, #6:Fresh), #5:Name)), 
   -(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)), 
   +(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ;
    pk(#2:Name, #5:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil, 
   +(pk(#5:Name ; n(#5:Name, #6:Fresh), #2:Name)) | 
   -(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(
    #2:Name, #5:Name)) !inI,
pk(n(#5:Name, #6:Fresh), #5:Name) inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)) inI
| 
-(pk(n(#5:Name, #6:Fresh), #5:Name)), 
-(pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(#2:Name, #5:Name)), 
+(pk(n(#5:Name, #6:Fresh), #5:Name) ; pk(n(#2:Name, #3:Fresh), #5:Name) ; pk(
    #2:Name, #5:Name)), 
-(pk(n(#5:Name, #6:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #5:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a)), 
   -(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), a) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(a, b)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh), a)), 
-(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, #0:Name)), 
   -(pk(n(a, #1:Fresh), #0:Name)), 
   +(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #2:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #2:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), 
   +(pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #2:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), 
   +(pk(n(a, #1:Fresh), #0:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #2:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #2:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
   +(pk(n(b, #2:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(a ; #3:Nonce, b)), 
   +(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
   -(pk(n(b, #2:Fresh), b)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), #0:Name)), 
   +(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #2:Fresh), b)), 
   +(pk(n(b, #2:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(a, #1:Fresh), #0:Name) !inI,
pk(n(b, #2:Fresh), b) !inI,
pk(n(b, #2:Fresh), i) !inI,
pk(a ; #3:Nonce, b) !inI,
pk(#3:Nonce ; n(b, #2:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a) !inI,
pk(n(b, #2:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #2:Fresh) !inI,
(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)) !inI,
(pk(i, b) ; pk(n(b, #2:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #0:Name) ; #5:Msg) !inI,
(pk(n(b, #2:Fresh), a) ; pk(b, a)) !inI,
(#7:Msg ; pk(n(a, #1:Fresh), #0:Name) ; #5:Msg) inI
| 
-(#7:Msg ; pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), 
+(pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), 
-(pk(n(a, #1:Fresh), #0:Name) ; #5:Msg), 
+(pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a, #0:Name)), 
-(pk(n(a, #1:Fresh), #0:Name)), 
+(pk(a, #0:Name) ; pk(n(a, #1:Fresh), #0:Name)), 
-(pk(a ; n(a, #1:Fresh), #0:Name)), 
+(pk(n(a, #1:Fresh) ; n(#0:Name, #4:Fresh) ; #0:Name, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(#0:Name, #4:Fresh), a) ; pk(#0:Name, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #3:Nonce, b)), 
-(pk(a ; #3:Nonce, b)), 
+(pk(#3:Nonce ; n(b, #2:Fresh) ; b, a)), 
-(pk(#3:Nonce, a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #2:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #2:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #2:Fresh) ; b, a)), 
+(pk(n(b, #2:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #2:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #2:Fresh), b)), 
-(pk(i ; n(b, #2:Fresh), b)), 
+(pk(n(b, #2:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #2:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #2:Fresh), i)), 
-(pk(n(b, #2:Fresh), i)), 
+(n(b, #2:Fresh)), 
-(pk(n(b, #2:Fresh), b))
| ghost(pk(a, #0:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 3 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), i)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(n(#2:Name, #3:Fresh), i) inI,
(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#6:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), i)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 5 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; n(#2:Name, #3:Fresh)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; n(#2:Name, #3:Fresh)) inI,
(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(#4:Msg ; n(#2:Name, #3:Fresh)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 5 . 6 . 7{2} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(n(#2:Name, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
n(#2:Name, #3:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(n(#2:Name, #3:Fresh) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(n(#2:Name, #3:Fresh) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(n(#2:Name, #3:Fresh)), 
-(n(#2:Name, #3:Fresh) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(n(#2:Name, #3:Fresh)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 . 11 . 9 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
   +(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), nil] 
    & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil]  & 
:: #8:Fresh ::
[ nil, 
   +(pk(#7:Name ; n(#7:Name, #8:Fresh), #2:Name)) | 
   -(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name) inI
| 
-(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name), 
+(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
-(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 . 11 . 12 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#7:Name, #8:Fresh), #7:Name)), 
   -(pk(n(#2:Name, #3:Fresh), #7:Name) ; pk(#2:Name, #7:Name)), 
   +(pk(n(#7:Name, #8:Fresh), #7:Name) ; pk(n(#2:Name, #3:Fresh), #7:Name) ;
    pk(#2:Name, #7:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil]  & 
:: #8:Fresh ::
[ nil, 
   +(pk(#7:Name ; n(#7:Name, #8:Fresh), #2:Name)) | 
   -(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(#7:Name, #8:Fresh), #7:Name) ; pk(n(#2:Name, #3:Fresh), #7:Name) ; pk(
    #2:Name, #7:Name)) !inI,
pk(n(#7:Name, #8:Fresh), #7:Name) inI,
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(pk(n(#2:Name, #3:Fresh), #7:Name) ; pk(#2:Name, #7:Name)) inI
| 
-(pk(n(#7:Name, #8:Fresh), #7:Name)), 
-(pk(n(#2:Name, #3:Fresh), #7:Name) ; pk(#2:Name, #7:Name)), 
+(pk(n(#7:Name, #8:Fresh), #7:Name) ; pk(n(#2:Name, #3:Fresh), #7:Name) ; pk(
    #2:Name, #7:Name)), 
-(pk(n(#7:Name, #8:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, #7:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 7 . 8{1} . 11{1} > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(#7:Msg, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:Name, #3:Fresh) ; #7:Msg), 
   +(pk(n(#2:Name, #3:Fresh) ; #7:Msg, #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #5:Nonce, b)), 
   +(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #5:Nonce, b) !inI,
pk(#5:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; #7:Msg, #2:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI,
(n(#2:Name, #3:Fresh) ; #7:Msg) inI
| 
-(n(#2:Name, #3:Fresh) ; #7:Msg), 
+(pk(n(#2:Name, #3:Fresh) ; #7:Msg, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(#7:Msg, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(#4:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #5:Nonce, b)), 
-(pk(a ; #5:Nonce, b)), 
+(pk(#5:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#5:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #6:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #6:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 6 . 6 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#6:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #7:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #6:Nonce, b)), 
   +(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #7:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #7:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #6:Nonce, b) !inI,
pk(#6:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #7:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg) inI,
(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(#4:Msg ; pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; #5:Msg), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #6:Nonce, b)), 
-(pk(a ; #6:Nonce, b)), 
+(pk(#6:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#6:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #7:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #7:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 13 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #6:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), a) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
+(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
+(pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #6:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 13 . 7 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#6:Name, #7:Fresh), #2:Name) ;
    pk(#6:Name, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)) | 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #7:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name)), nil]
    )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name) inI,
(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#8:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), #6:Name)), 
+(pk(n(#2:Name, #3:Fresh) ; n(#6:Name, #7:Fresh) ; #6:Name, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(#6:Name, #7:Fresh), #2:Name) ; pk(
    #6:Name, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(14) .
rewrites: 4041 in 4ms cpu (3ms real) (1010250 rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pk(a ; n(a, #1:Fresh), b)), 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a)), 
   -(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), a) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(a, b)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh), a)), 
-(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 5 . 7 . 6 . 5 . 3 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name)), 
   +(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), 
   +(pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), 
   +(pk(n(a, #0:Fresh), #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(a, #0:Fresh), #2:Name)), 
   +(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #5:Fresh) ; b, i)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(a, #0:Fresh), #2:Name) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i) !inI,
pk(n(b, #1:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; #4:Msg) !inI,
(#6:Msg ; pk(n(a, #0:Fresh), #2:Name) ; #4:Msg) inI
| 
-(#6:Msg ; pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), 
+(pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), 
-(pk(n(a, #0:Fresh), #2:Name) ; #4:Msg), 
+(pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i, #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name)), 
+(pk(i, #2:Name) ; pk(n(a, #0:Fresh), #2:Name)), 
-(pk(i ; n(a, #0:Fresh), #2:Name)), 
+(pk(n(a, #0:Fresh) ; n(#2:Name, #3:Fresh) ; #2:Name, i)), 
-(pk(n(a, #0:Fresh), i) ; pk(n(#2:Name, #3:Fresh), i) ; pk(#2:Name, i)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| ghost(pk(i, #2:Name)))
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 4 . 2 . 6 . 6 . 7 . 8 . 13 . 1 > (
:: nil ::
[ nil | 
   -(pk(a, i)), 
   -(pk(n(a, #0:Fresh), i)), 
   +(pk(a, i) ; pk(n(a, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), i)), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(pk(a ; n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(i, #5:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(pk(a ; n(a, #0:Fresh), b)) | 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), i)), 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
   +(pk(n(a, #0:Fresh), i)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), i)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(i, #5:Fresh) ; i, #2:Name)), nil] )
| 
pk(a, i) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), i) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), i) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(i, #5:Fresh) ; i, #2:Name) !inI,
n(b, #1:Fresh) !inI,
(a ; n(a, #0:Fresh)) !inI,
(pk(a, i) ; pk(n(a, #0:Fresh), i)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)) !inI,
(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)) inI
| 
+(pk(#2:Name ; n(#2:Name, #3:Fresh), i)), 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), i)), 
+(pk(n(#2:Name, #3:Fresh) ; n(i, #5:Fresh) ; i, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(i, #5:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #0:Fresh), #2:Name) ; pk(i, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #0:Fresh), #2:Name) ; pk(i,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #0:Fresh) ; i, #2:Name)), 
+(pk(n(a, #0:Fresh), i)), 
generatedByIntruder(pk(a, i)), 
-(pk(a, i)), 
-(pk(n(a, #0:Fresh), i)), 
+(pk(a, i) ; pk(n(a, #0:Fresh), i)), 
-(pk(a ; n(a, #0:Fresh), i)), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 6 . 7 . 8 . 13 . 1 . 3 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name)), 
   -(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
   +(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #6:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
   +(pk(n(#2:Name, #3:Fresh), #2:Name)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(pk(a ; n(a, #1:Fresh), b)) | 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #4:Nonce, b)), 
   +(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   +(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
   -(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), nil]  & 
:: #6:Fresh ::
[ nil | 
   -(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
   +(pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(n(#2:Name, #3:Fresh), #2:Name) !inI,
pk(a ; #4:Nonce, b) !inI,
pk(#2:Name ; n(#2:Name, #3:Fresh), a) !inI,
pk(#4:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i) !inI,
pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)) !inI,
(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)) inI
| 
-(#7:Msg ; pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
-(pk(#2:Name ; n(#2:Name, #3:Fresh), a)), 
+(pk(n(#2:Name, #3:Fresh) ; n(a, #6:Fresh) ; a, #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #6:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(#2:Name, #3:Fresh), #2:Name)), 
-(pk(n(a, #1:Fresh), #2:Name) ; pk(a, #2:Name)), 
+(pk(n(#2:Name, #3:Fresh), #2:Name) ; pk(n(a, #1:Fresh), #2:Name) ; pk(a,
    #2:Name)), 
-(pk(n(#2:Name, #3:Fresh) ; n(a, #1:Fresh) ; a, #2:Name)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #4:Nonce, b)), 
-(pk(a ; #4:Nonce, b)), 
+(pk(#4:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#4:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #5:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #5:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil
==========================================
reduce in MAUDE-NPA : run(15) .
rewrites: 4117 in 0ms cpu (3ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   +(pk(a ; n(a, #2:Fresh), b)), 
   -(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; n(a, #2:Fresh), b)), 
   +(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, b) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; n(a, #2:Fresh), b) !inI,
pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI
| 
+(pk(a ; n(a, #2:Fresh), b)), 
-(pk(a ; n(a, #2:Fresh), b)), 
+(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
-(pk(n(a, #2:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #1:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #1:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 3 . 2 . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(i, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil] )
| 
pk(i, a) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(i, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(i, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(i, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(i ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(a, #2:Fresh), i) ; pk(a, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
+(pk(n(b, #0:Fresh), b)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 1 . 7 . 4 . 2 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI
| 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
generatedByIntruder(pk(a, b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #2:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #2:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 5 . 7 . 6 . 5 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(b, a)), 
   -(pk(n(b, #0:Fresh), a)), 
   +(pk(b, a) ; pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(pk(b ; n(b, #0:Fresh), a)), 
   +(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #1:Nonce, b)), 
   +(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), nil] )
| 
pk(b, a) !inI,
pk(i, b) !inI,
pk(n(b, #0:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #1:Nonce, b) !inI,
pk(#1:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b) !inI,
pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(b, a) ; pk(n(b, #0:Fresh), a)) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(b, a)), 
generatedByIntruder(pk(a ; #1:Nonce, b)), 
-(pk(a ; #1:Nonce, b)), 
+(pk(#1:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#1:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a)), 
-(pk(b, a)), 
-(pk(n(b, #0:Fresh), a)), 
+(pk(b, a) ; pk(n(b, #0:Fresh), a)), 
-(pk(b ; n(b, #0:Fresh), a)), 
+(pk(n(b, #0:Fresh) ; n(a, #2:Fresh) ; a, b)), 
-(pk(n(b, #0:Fresh), b) ; pk(n(a, #2:Fresh), b) ; pk(a, b)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #3:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #3:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
(< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 1 > (
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #0:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a)), 
   -(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #0:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #1:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #0:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   +(pk(a ; n(a, #1:Fresh), b)), 
   -(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
   +(pk(n(b, #0:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
   -(pk(n(b, #0:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #1:Fresh), b)), 
   +(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #0:Fresh), b)), 
   +(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(i, b) !inI,
pk(n(a, #1:Fresh), a) !inI,
pk(n(b, #0:Fresh), b) !inI,
pk(n(b, #0:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #1:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #0:Fresh) ; b, a) !inI,
pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #0:Fresh) !inI,
(pk(i, b) ; pk(n(b, #0:Fresh), b)) !inI,
(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #0:Fresh), a) ; pk(b, a)) !inI
| 
+(pk(a ; n(a, #1:Fresh), b)), 
-(pk(a ; n(a, #1:Fresh), b)), 
+(pk(n(a, #1:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #1:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #0:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh), a)), 
-(pk(n(b, #0:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #1:Fresh), a) ; pk(n(b, #0:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #1:Fresh) ; n(b, #0:Fresh) ; b, a)), 
+(pk(n(b, #0:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #0:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #0:Fresh), b)), 
-(pk(i ; n(b, #0:Fresh), b)), 
+(pk(n(b, #0:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #0:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #0:Fresh), i)), 
-(pk(n(b, #0:Fresh), i)), 
+(n(b, #0:Fresh)), 
-(pk(n(b, #0:Fresh), b))
| 
nil)
< 1 . 2 . 9 . 12 . 10{1} . 6 . 8 . 7 . 1 . 5 . 7 . 7 . 4 . 1 > (
:: nil ::
[ nil | 
   -(pk(a, b)), 
   -(pk(n(a, #0:Fresh), b)), 
   +(pk(a, b) ; pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(i, b)), 
   -(pk(n(b, #1:Fresh), b)), 
   +(pk(i, b) ; pk(n(b, #1:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a)), 
   -(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh), b)), nil]  & 
:: nil ::
[ nil | 
   -(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
   +(pk(n(b, #1:Fresh), a) ; pk(b, a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
   +(pk(n(a, #0:Fresh), a)), nil]  & 
:: nil ::
[ nil | 
   -(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
   +(pk(n(b, #1:Fresh), i)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(pk(a ; #2:Nonce, b)), 
   +(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
   -(pk(n(b, #1:Fresh), b)), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(pk(a ; n(a, #0:Fresh), b)), 
   -(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
   +(pk(n(b, #1:Fresh), b)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(pk(a ; n(a, #0:Fresh), b)), 
   +(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(pk(i ; n(b, #1:Fresh), b)), 
   +(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), nil] )
| 
pk(a, b) !inI,
pk(i, b) !inI,
pk(n(a, #0:Fresh), a) !inI,
pk(n(a, #0:Fresh), b) !inI,
pk(n(b, #1:Fresh), b) !inI,
pk(n(b, #1:Fresh), i) !inI,
pk(a ; #2:Nonce, b) !inI,
pk(a ; n(a, #0:Fresh), b) !inI,
pk(#2:Nonce ; n(b, #1:Fresh) ; b, a) !inI,
pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a) !inI,
pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i) !inI,
n(b, #1:Fresh) !inI,
(pk(a, b) ; pk(n(a, #0:Fresh), b)) !inI,
(pk(i, b) ; pk(n(b, #1:Fresh), b)) !inI,
(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI,
(pk(n(b, #1:Fresh), a) ; pk(b, a)) !inI
| 
generatedByIntruder(pk(a, b)), 
+(pk(a ; n(a, #0:Fresh), b)), 
-(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh), b)), 
-(pk(a, b)), 
-(pk(n(a, #0:Fresh), b)), 
+(pk(a, b) ; pk(n(a, #0:Fresh), b)), 
-(pk(a ; n(a, #0:Fresh), b)), 
+(pk(n(a, #0:Fresh) ; n(b, #3:Fresh) ; b, a)), 
-(pk(n(a, #0:Fresh), a) ; pk(n(b, #3:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a)), 
generatedByIntruder(pk(a ; #2:Nonce, b)), 
-(pk(a ; #2:Nonce, b)), 
+(pk(#2:Nonce ; n(b, #1:Fresh) ; b, a)), 
-(pk(#2:Nonce, a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh), a)), 
-(pk(n(b, #1:Fresh), a) ; pk(b, a)), 
+(pk(n(a, #0:Fresh), a) ; pk(n(b, #1:Fresh), a) ; pk(b, a)), 
-(pk(n(a, #0:Fresh) ; n(b, #1:Fresh) ; b, a)), 
+(pk(n(b, #1:Fresh), b)), 
generatedByIntruder(pk(i, b)), 
-(pk(i, b)), 
-(pk(n(b, #1:Fresh), b)), 
+(pk(i, b) ; pk(n(b, #1:Fresh), b)), 
-(pk(i ; n(b, #1:Fresh), b)), 
+(pk(n(b, #1:Fresh) ; n(b, #4:Fresh) ; b, i)), 
-(pk(n(b, #1:Fresh), i) ; pk(n(b, #4:Fresh), i) ; pk(b, i)), 
+(pk(n(b, #1:Fresh), i)), 
-(pk(n(b, #1:Fresh), i)), 
+(n(b, #1:Fresh)), 
-(pk(n(b, #1:Fresh), b))
| 
nil
Bye.
Tue Jun  2 19:49:59 CEST 2020
