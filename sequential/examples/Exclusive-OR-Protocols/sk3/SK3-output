Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 42474267 in 85716ms cpu (302882ms real) (495523 rewrites/second)
result GrammarList: (errorInconsistentExceptionsInGrammarRule 
grl (#1:NSymEnc * #0:NSymEnc) notInI,
   (#0:NSymEnc notLeq nse(#2:Symkey, i)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 0)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 1)),
   (#1:NSymEnc * #0:NSymEnc) notLeq #1:NSymEnc * #2:NSymEnc => #0:NSymEnc inL .
     inGrammar 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #5:NSymEnc inL => (#4:NSymEnc * #5:NSymEnc) inL .  ; 
grl #0:NSymEnc notInI,
   (#0:NSymEnc notLeq nse(#1:Symkey, i)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 0)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 1)),
   #0:NSymEnc notLeq #1:NSymEnc * #2:NSymEnc => (#2:NSymEnc * #0:NSymEnc) inL .
     ; 
grl (#1:NSymEnc * #0:NSymEnc) notInI,
   (#0:NSymEnc notLeq nse(#2:Symkey, i)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 0)),
   (#0:NSymEnc notLeq nse(symKey(#4:Name), #5:Name ; 1)),
   (#1:NSymEnc * #0:NSymEnc) notLeq #1:NSymEnc * #2:NSymEnc => #0:NSymEnc inL .
    )
| (errorNoHeuristicApplied {
grl empty => (#1:NSymEnc * #2:NSymEnc) inL . ,none,
grl empty => (#1:NSymEnc,#2:NSymEnc) inL . ,none,
grl empty => (#1:NSymEnc,#2:NSymEnc) inL . } usingGrammar 
grl empty => (#1:NSymEnc * #2:NSymEnc) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:Name, #2:Fresh)),
   #0:Msg notLeq nse(symKey(#3:Name), #4:Name ; 1) * nse(symKey(#4:Name),
    #3:Name ; 0) => (#0:Msg ; #5:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:Name, #2:Fresh)),
   #0:Msg notLeq nse(symKey(#3:Name), #4:Name ; 1) * nse(symKey(#4:Name),
    #3:Name ; 0) => (#5:Name ; #0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq 0 ; 1),
   (#0:Msg notLeq #1:Name ; 2),
   (#0:Msg notLeq n(#2:Name, #3:Fresh) ; 1),
   (#0:Msg notLeq n(#4:Name, #5:Fresh)),
   (#0:Msg notLeq e(nse(symKey(#6:Name), #7:Name), #8:Nonce ; n(#6:Name,
    #9:Fresh) ; 1)),
   #0:Msg notLeq se(symKey(#10:Name), (nse(symKey(#10:Name), #11:Name ; 1) *
    nse(symKey(#11:Name), #10:Name ; 0)) ; #11:Name ; 2) => (#12:Msg ; #0:Msg)
    inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:NSymEnc notInI => d(#0:NSymEnc, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI => d(#1:NSymEnc, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => d(#1:NSymEnc, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:NSymEnc) inL . ,none,
grl empty => (#2:Msg,#1:NSymEnc) inL . } usingGrammar 
grl empty => d(#1:NSymEnc, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:NSymEnc notInI,
   #0:NSymEnc notLeq nse(symKey(#1:Name), #2:Name) => e(#0:NSymEnc, #3:Msg) inL
    . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq #1:Nonce ; 0 ; 1),
   (#0:Msg notLeq #2:Nonce ; n(#3:Name, #4:Fresh) ; 1),
   #0:Msg notLeq sesK(n(#5:Name, #6:Fresh), #7:Name, #5:Name, 1) => e(
    #8:NSymEnc, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => e(#1:NSymEnc, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:NSymEnc) inL . ,none,
grl empty => (#2:Msg,#1:NSymEnc) inL . } usingGrammar 
grl empty => e(#1:NSymEnc, #2:Msg) inL . )
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #5:Nonce => n(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq #5:Nonce => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:NSymEnc inL => (#1:NSymEnc * #0:NSymEnc) inL .  ; 
grl #0:Symkey notInI,
   #0:Symkey notLeq symKey(#1:Name) => nse(#0:Symkey, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:NSymEnc inL => (#1:NSymEnc * #0:NSymEnc) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq #1:Name ; 0),
   #0:Msg notLeq #2:Name ; 1 => nse(#3:Symkey, #0:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:NSymEnc inL => (#1:NSymEnc * #0:NSymEnc) inL .  ; 
grl (nse(#0:Symkey, #1:Msg) notLeq nse(#2:Symkey, i)),
   (nse(#0:Symkey, #1:Msg) notLeq nse(symKey(#3:Name), #4:Name ; 1)),
   nse(#0:Symkey, #1:Msg) notLeq nse(symKey(#5:Name), #6:Name ; 0) => nse(
    #0:Symkey, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Symkey notInI => sd(#0:Symkey, #1:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI => sd(#1:Symkey, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => sd(#1:Symkey, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Symkey) inL . ,none,
grl empty => (#2:Msg,#1:Symkey) inL . } usingGrammar 
grl empty => sd(#1:Symkey, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Symkey notInI,
   #0:Symkey notLeq symKey(#1:Name) => se(#0:Symkey, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg notInI,
   #0:Msg notLeq (nse(symKey(#1:Name), #2:Name ; 1) * nse(symKey(#2:Name),
    #1:Name ; 0)) ; #2:Name ; 2 => se(#3:Symkey, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => se(#1:Symkey, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Symkey) inL . ,none,
grl empty => (#2:Msg,#1:Symkey) inL . } usingGrammar 
grl empty => se(#1:Symkey, #2:Msg) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:Name, #2:Fresh) => sesK(#0:Nonce, #3:Name, #4:Name,
    #5:Number) inL . )
| (
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl (sesK(#0:Nonce, #1:Name, #2:Name, #3:Number) notLeq sesK(#4:Nonce, i,
    #5:Name, #6:Number)),
   (sesK(#0:Nonce, #1:Name, #2:Name, #3:Number) notLeq sesK(#7:Nonce, #8:Name,
    i, #9:Number)),
   sesK(#0:Nonce, #1:Name, #2:Name, #3:Number) notLeq sesK(n(#10:Name,
    #11:Fresh), #12:Name, #10:Name, 1) => sesK(#0:Nonce, #1:Name, #2:Name,
    #3:Number) inL . )
| 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg inL => e(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:NSymEnc, #0:Msg) inL .  ; 
grl #0:Msg inL => se(#1:Symkey, #0:Msg) inL .  ; 
grl #0:Msg inL => sd(#1:Symkey, #0:Msg) inL .  ; 
grl symKey(#0:Name) notLeq symKey(i) => symKey(#0:Name) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 5781 in 144ms cpu (430ms real) (40145 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   -(a ; NCA:Nonce), 
   +(n(b, r:Fresh) ; e(nse(symKey(b), a), NCA:Nonce ; n(b, r:Fresh) ; 1)), 
   +(e(nse(symKey(b), a), sesK(n(b, r:Fresh), a, b, 1))) | 
   -(e(nse(symKey(b), a), n(b, r:Fresh) ; 0 ; 1)), nil] 
| 
e(nse(symKey(b), a), n(b, r:Fresh) ; 0 ; 1) inI,
sesK(n(b, r:Fresh), a, b, 1) inI
| 
-(e(nse(symKey(b), a), n(b, r:Fresh) ; 0 ; 1))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 1734121 in 3056ms cpu (9577ms real) (567447 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 1043036 in 2312ms cpu (7370ms real) (451140 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 200439 in 316ms cpu (1050ms real) (634300 rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 181 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 181 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 181 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 181 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 0 Solutions>> 0
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 117 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 7 > (
:: nil ::
[ nil | 
   -(e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1))), 
   -(#0:NSymEnc), 
   +(sesK(n(b, #1:Fresh), a, b, 1)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; #2:Nonce), 
   +(n(b, #1:Fresh) ; e(nse(symKey(b), a), #2:Nonce ; n(b, #1:Fresh) ; 1)), 
   +(e(nse(symKey(b), a), sesK(n(b, #1:Fresh), a, b, 1))) | 
   -(e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1)), nil] )
| 
sesK(n(b, #1:Fresh), a, b, 1) !inI,
e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1)) inI,
e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1) inI
| 
-(e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1))), 
-(#0:NSymEnc), 
+(sesK(n(b, #1:Fresh), a, b, 1)), 
-(e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1))
| ghost(#0:NSymEnc))
< 1 . 15 > 
:: #0:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(n(b, #0:Fresh) ; e(nse(symKey(b), a), #1:Nonce ; n(b, #0:Fresh) ; 1)) | 
   +(e(nse(symKey(b), a), sesK(n(b, #0:Fresh), a, b, 1))), 
   -(e(nse(symKey(b), a), n(b, #0:Fresh) ; 0 ; 1)), nil] 
| 
e(nse(symKey(b), a), n(b, #0:Fresh) ; 0 ; 1) inI,
sesK(n(b, #0:Fresh), a, b, 1) inI
| 
+(e(nse(symKey(b), a), sesK(n(b, #0:Fresh), a, b, 1))), 
-(e(nse(symKey(b), a), n(b, #0:Fresh) ; 0 ; 1))
| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 155 in 0ms cpu (0ms real) (~ rewrites/second)
result ShortIdSystem: < 1 . 7 . 1 > (
:: nil ::
[ nil | 
   -(e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1))), 
   -(#0:NSymEnc), 
   +(sesK(n(b, #1:Fresh), a, b, 1)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; #2:Nonce), 
   +(n(b, #1:Fresh) ; e(nse(symKey(b), a), #2:Nonce ; n(b, #1:Fresh) ; 1)) | 
   +(e(nse(symKey(b), a), sesK(n(b, #1:Fresh), a, b, 1))), 
   -(e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1)), nil] )
| 
sesK(n(b, #1:Fresh), a, b, 1) !inI,
e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1)) inI,
e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1) inI
| 
+(e(nse(symKey(b), a), sesK(n(b, #1:Fresh), a, b, 1))), 
-(e(#0:NSymEnc, sesK(n(b, #1:Fresh), a, b, 1))), 
-(#0:NSymEnc), 
+(sesK(n(b, #1:Fresh), a, b, 1)), 
-(e(nse(symKey(b), a), n(b, #1:Fresh) ; 0 ; 1))
| ghost(#0:NSymEnc)
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 175 in 4ms cpu (8ms real) (43750 rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 176 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 176 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 176 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 176 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (empty).IdSystemSet
Bye.
Tue Jun  2 19:27:26 CEST 2020
