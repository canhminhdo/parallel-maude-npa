Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 3812449 in 8768ms cpu (38228ms real) (434813 rewrites/second)
result GrammarList: (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq #1:Elm),
   #0:Msg notLeq (#2:Elm ; #3:Elm) => (#0:Msg ; #4:Msg) inL . )
| (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(a, #1:Fresh)),
   #0:Msg notLeq (#2:Elm ; #3:Elm) => (#0:Msg ; #4:Elm) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(a, #1:Fresh)),
   #0:Msg notLeq (#2:Elm ; #3:Elm) => (#4:Msg ; #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl (n(#0:Name, #1:Fresh) notLeq n(s, #2:Fresh)),
   n(#0:Name, #1:Fresh) notLeq n(a, #3:Fresh) => n(#0:Name, #1:Fresh) inL . )
| (errorNoHeuristicApplied {
grl #50:Key notInI => pk(#50:Key, #60:Msg) inL . ,none,
grl #50:Key notInI => #60:Msg inL . ,none,
grl #50:Key notInI => #60:Msg inL . } usingGrammar 
grl #50:Key notInI => pk(#50:Key, #60:Msg) inL . )
| (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => pk(#1:Key, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => pk(#1:Key, #2:Msg) inL . ,none,
grl empty => #2:Msg inL . ,none,
grl empty => #2:Msg inL . } usingGrammar 
grl empty => pk(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI => sk(#0:Key, #1:Msg) inL . )
| (
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq (#1:Nonce ; s)),
   #0:Msg notLeq ((b ; n(a, #2:Fresh)) ; s) => sk(#3:Key, #0:Msg) inL . )
| 
grl #0:Msg inL => pk(i, #0:Msg) inL .  ; 
grl #0:Msg inL => sk(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl (sk(#0:Key, #1:Msg) notLeq sk(a, #2:Nonce ; s)),
   (sk(#0:Key, #1:Msg) notLeq sk(a, (b ; n(a, #3:Fresh)) ; s)),
   sk(#0:Key, #1:Msg) notLeq sk(i, #4:Msg) => sk(#0:Key, #1:Msg) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3387 in 144ms cpu (683ms real) (23520 rewrites/second)
result ShortIdSystem: < 1 > 
:: nil ::
[ nil | 
   -(sk(a, X:Msg ; s)), 
   -(sk(a, (b ; N:Nonce) ; s)), nil] 
| 
sk(a, X:Msg ; s) inI,
sk(a, (b ; N:Nonce) ; s) inI
| 
-(sk(a, X:Msg ; s)), 
-(sk(a, (b ; N:Nonce) ; s))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 547998 in 1284ms cpu (5788ms real) (426789 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 312237 in 1052ms cpu (4746ms real) (296803 rewrites/second)
result Summary: States>> 3 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 154961 in 568ms cpu (2619ms real) (272818 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 119 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 9 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Msg ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#2:Nonce), 
   +(sk(a, #2:Nonce ; s)) | 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil] )
| 
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI,
sk(a, #0:Msg ; s) inI
| 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Msg ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil)
< 1 . 10 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Nonce ; s)), 
   -(sk(a, (b ; #1:Nonce) ; s)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(#0:Nonce), 
   +(sk(a, #0:Nonce ; s)), nil] )
| 
#0:Nonce !inI,
sk(a, #0:Nonce ; s) !inI,
sk(a, (b ; #1:Nonce) ; s) inI
| 
generatedByIntruder(#0:Nonce), 
-(#0:Nonce), 
+(sk(a, #0:Nonce ; s)), 
-(sk(a, #0:Nonce ; s)), 
-(sk(a, (b ; #1:Nonce) ; s))
| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 170 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 9 . 1 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Msg ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(#2:Nonce), 
   +(sk(a, #2:Nonce ; s)), 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil] )
| 
#2:Nonce !inI,
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI,
sk(a, #0:Msg ; s) inI
| 
generatedByIntruder(#2:Nonce), 
-(#2:Nonce), 
+(sk(a, #2:Nonce ; s)), 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Msg ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil)
(< 1 . 9 . 2 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Nonce ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(#0:Nonce), 
   +(sk(a, #0:Nonce ; s)), 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil] )
| 
#0:Nonce !inI,
sk(a, #0:Nonce ; s) !inI,
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI
| 
generatedByIntruder(#0:Nonce), 
-(#0:Nonce), 
+(sk(a, #0:Nonce ; s)), 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Nonce ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil)
< 1 . 9 . 7 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Nonce ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#3:Nonce), 
   +(sk(a, #3:Nonce ; s)) | 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(#0:Nonce), 
   +(sk(a, #0:Nonce ; s)), nil] )
| 
#0:Nonce !inI,
sk(a, #0:Nonce ; s) !inI,
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI
| 
generatedByIntruder(#0:Nonce), 
-(#0:Nonce), 
+(sk(a, #0:Nonce ; s)), 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Nonce ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 224 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 9 . 2 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Nonce ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(#0:Nonce), 
   +(sk(a, #0:Nonce ; s)), 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil] )
| 
#0:Nonce !inI,
sk(a, #0:Nonce ; s) !inI,
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI
| 
generatedByIntruder(#0:Nonce), 
-(#0:Nonce), 
+(sk(a, #0:Nonce ; s)), 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Nonce ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil)
< 1 . 9 . 1 . 5 > (
:: nil ::
[ nil | 
   -(sk(a, #0:Nonce ; s)), 
   -(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(#2:Nonce), 
   +(sk(a, #2:Nonce ; s)), 
   +(sk(a, (b ; n(a, #1:Fresh)) ; s)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(#0:Nonce), 
   +(sk(a, #0:Nonce ; s)), nil] )
| 
#2:Nonce !inI,
#0:Nonce !inI,
sk(a, #0:Nonce ; s) !inI,
sk(a, (b ; n(a, #1:Fresh)) ; s) !inI
| 
generatedByIntruder(#0:Nonce), 
-(#0:Nonce), 
+(sk(a, #0:Nonce ; s)), 
generatedByIntruder(#2:Nonce), 
-(#2:Nonce), 
+(sk(a, #2:Nonce ; s)), 
+(sk(a, (b ; n(a, #1:Fresh)) ; s)), 
-(sk(a, #0:Nonce ; s)), 
-(sk(a, (b ; n(a, #1:Fresh)) ; s))
| 
nil
Bye.
Tue Jun  2 19:22:56 CEST 2020
