***(
The informal journal-level description of this protocol is as follows,
where S is the server:

S --> A: N_S
A --> B: sk(A,N_S ; S)
A --> B: sk(A,B ; N_A ; S)

where N_A, N_S, and N_B are nonces, and sk(x,y) means message y encripted 
using private key x. Moreover, concatenation and encription/decription
have the following property:

  X ; (Y ; Z) = (X ; Y) ; Z
  pk(K,sk(K,M)) = M
  sk(K,pk(K,M)) = M

However, note that the associativity property is bounded to depth 3 below by
using appopriate sorts.
)***

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  protecting DEFINITION-PROTOCOL-RULES . --- Importing sort Msg, Fresh, Public
  
  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort Msg and Fresh are special and imported
  --- * Every sort must be a subsort of Msg
  --- * No sort can be a supersort of Msg
  ----------------------------------------------------------

  --- Sort Information 
  sorts Name Nonce Key .
  sorts List Elm .
  subsort Name < Key .
  subsort Name Nonce Key < Elm .
  subsort Elm < Msg .
  subsort List < Msg .
  subsort Name < Public .

  --- Encoding operators for public/private encryption
  op pk : Key Msg -> Msg [frozen] .
  op sk : Key Msg -> Msg [frozen] .

  --- Keys known by intruder
  op s : -> Name . --- Name for the Server
  op a : -> Name . --- Name for the Initiator
  op b : -> Name . --- Name for the Responder
  op i : -> Name . --- Name for the Intruder

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .
  
  --- Associativity operator
  op _;_ : Msg  Msg  -> List [frozen] .
  
endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  
  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties 
  --- of your protocol
  ----------------------------------------------------------

  var Z : Msg .
  var Ke : Key .
  vars Xe Ye Ze : Elm .
  
  *** Encryption/Decryption Cancellation
  eq pk(Ke,sk(Ke,Z)) = Z [variant] .
  eq sk(Ke,pk(Ke,Z)) = Z [variant] .
  
  *** Bounded Associativity (for 3-depth)
  eq Xe ; (Ye ; Ze) = (Xe ; Ye) ; Ze [variant] .

endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands 
  --- of your protocol
  ----------------------------------------------------------
  
  var Ke : Key .
  vars X Y Z : Msg .
  var r : Fresh .
  var N : Nonce .

  eq STRANDS-DOLEVYAO
   = :: nil :: [ nil | -(X), -(Y), +(X ; Y), nil ]
     &
     :: nil :: [ nil | -(X ; Y), +(X), nil ]
     &
     :: nil :: [ nil | -(X ; Y), +(Y), nil ]
     &
     --- Private encryption only his key
     :: nil :: [ nil | -(X), +(sk(i,X)), nil ] 
     &
      --- Public encryption any key
     :: nil :: [ nil | -(X), +(pk(Ke,X)), nil ]
  [nonexec] .

  eq STRANDS-PROTOCOL
   = --- server 
     :: r :: [nil | +(n(s,r)), nil ] &
     --- initiator
     :: r :: [nil | -(N), +(sk(a,N ; s)), +(sk(a,b ; (n(a,r) ; s))), nil] &
     --- responder
     :: nil :: [nil | -(sk(a,X ; s)), -(sk(a,(b ; Z) ; s)), nil]
  [nonexec] .

  eq ATTACK-STATE(0)
   = :: nil :: [nil, -(sk(a,X ; s)), -(sk(a,(b ; N) ; s)) | nil]
     || empty
     || nil
     || nil
     || nil
  [nonexec] .

endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .

