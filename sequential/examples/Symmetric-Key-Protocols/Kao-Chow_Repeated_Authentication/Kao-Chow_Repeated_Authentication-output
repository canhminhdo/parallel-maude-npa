Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 34905058 in 60604ms cpu (224940ms real) (575953 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, #4:Nonce)),
   (#0:Msg notLeq e(mkey(#5:UName, s), #5:UName ; #6:UName ; #7:Nonce ; seskey(
    #5:UName, #6:UName, n(s, #8:Fresh)))),
   (#0:Msg notLeq #9:Nonce ; seskey(#10:UName, #11:UName, n(s, #12:Fresh))),
   (#0:Msg notLeq #13:UName ; #14:Nonce ; seskey(#15:UName, #13:UName, n(s,
    #16:Fresh))),
   (#0:Msg notLeq #17:UName ; n(#18:UName, #19:Fresh)),
   #0:Msg notLeq e(#20:Sessionkey, #21:Nonce) ; n(#22:UName, #23:Fresh) => (
    #0:Msg ; #24:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, #4:Nonce)),
   (#0:Msg notLeq e(mkey(#5:UName, s), #5:UName ; #6:UName ; #7:Nonce ; seskey(
    #5:UName, #6:UName, n(s, #8:Fresh)))),
   (#0:Msg notLeq #9:Nonce ; seskey(#10:UName, #11:UName, n(s, #12:Fresh))),
   (#0:Msg notLeq #13:UName ; #14:Nonce ; seskey(#15:UName, #13:UName, n(s,
    #16:Fresh))),
   (#0:Msg notLeq #17:UName ; n(#18:UName, #19:Fresh)),
   #0:Msg notLeq e(#20:Sessionkey, #21:Nonce) ; n(#22:UName, #23:Fresh) => (
    #24:UName ; #0:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(mkey(#3:UName, s), #4:UName ; #3:UName ; #5:Nonce ; seskey(
    #4:UName, #3:UName, n(s, #6:Fresh)))),
   (#0:Msg notLeq #7:Nonce ; seskey(#8:UName, #9:UName, n(s, #10:Fresh))),
   (#0:Msg notLeq #11:UName ; #12:Nonce ; seskey(#13:UName, #11:UName, n(s,
    #14:Fresh))),
   (#0:Msg notLeq #15:UName ; n(#16:UName, #17:Fresh)),
   (#0:Msg notLeq e(#18:Sessionkey, #19:Nonce) ; n(#20:UName, #21:Fresh)),
   #0:Msg notLeq seskey(#22:UName, #23:UName, n(s, #24:Fresh)) => (#25:Msg ;
    #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI,
   (#0:Key notLeq mkey(#1:UName, s)),
   #0:Key notLeq seskey(#2:UName, #3:UName, n(s, #4:Fresh)) => e(#0:Key,
    #5:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq mkey(#1:UName, s)),
   (#0:Msg notLeq e(#2:Sessionkey, #3:Nonce) ; n(#4:UName, #5:Fresh)),
   #0:Msg notLeq seskey(#6:UName, #7:UName, n(s, #8:Fresh)) => (#9:Nonce ;
    #0:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq #3:Nonce ; seskey(#4:UName, #5:UName, n(s, #6:Fresh))),
   (#0:Msg notLeq #7:UName ; #8:Nonce ; seskey(#9:UName, #7:UName, n(s,
    #10:Fresh))),
   (#0:Msg notLeq #11:UName ; #12:UName ; #13:Nonce ; seskey(#11:UName,
    #12:UName, n(s, #14:Fresh))),
   (#0:Msg notLeq #15:UName ; n(#16:UName, #17:Fresh)),
   #0:Msg notLeq e(#18:Sessionkey, #19:Nonce) ; n(#20:UName, #21:Fresh) => e(
    #22:Key, #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq #3:Nonce ; seskey(#4:UName, #5:UName, n(s, #6:Fresh))),
   (#0:Msg notLeq #7:UName ; #8:Nonce ; seskey(#9:UName, #7:UName, n(s,
    #10:Fresh))),
   (#0:Msg notLeq #11:UName ; #12:UName ; #13:Nonce ; seskey(#11:UName,
    #12:UName, n(s, #14:Fresh))),
   (#0:Msg notLeq #15:UName ; n(#16:UName, #17:Fresh)),
   #0:Msg notLeq e(#18:Sessionkey, #19:Nonce) ; n(#20:UName, #21:Fresh) => (
    #0:Msg ; #22:Sessionkey) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq #3:Nonce ; seskey(#4:UName, #5:UName, n(s, #6:Fresh))),
   (#0:Msg notLeq #7:UName ; #8:Nonce ; seskey(#9:UName, #7:UName, n(s,
    #10:Fresh))),
   (#0:Msg notLeq #11:UName ; #12:UName ; #13:Nonce ; seskey(#11:UName,
    #12:UName, n(s, #14:Fresh))),
   (#0:Msg notLeq #15:UName ; n(#16:UName, #17:Fresh)),
   #0:Msg notLeq e(#18:Sessionkey, #19:Nonce) ; n(#20:UName, #21:Fresh) => (
    #22:UName ; #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl (mkey(#0:Name, #1:Name) notLeq mkey(i, #2:Name)),
   mkey(#0:Name, #1:Name) notLeq mkey(#3:Name, i) => mkey(#0:Name, #1:Name) inL
    . )
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #4:Nonce => n(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq #4:Nonce => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => p(#0:Msg) inL . )
| (
grl empty => p(#0:Msg) inL .  ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Nonce notInI,
   #0:Nonce notLeq n(s, #1:Fresh) => seskey(#2:Name, #3:Name, #0:Nonce) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq seskey(#3:UName, #4:UName, n(s,
    #5:Fresh)) => seskey(#0:Name, #1:Name, #2:Nonce) inL . )
| errorInconsistentExceptionsInGrammarRule 
grl t(#0:Name, #1:Fresh) notLeq #4:Nonce => t(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl t(#0:Name, #1:Fresh) notLeq #4:Nonce => t(#0:Name, #1:Fresh) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 4069 in 132ms cpu (451ms real) (30825 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   -(MA:Msg ; e(mkey(b, s), a ; b ; NA:Nonce ; SK:Sessionkey)), 
   +(MA:Msg ; e(SK:Sessionkey, NA:Nonce) ; n(b, r:Fresh)) | 
   -(e(SK:Sessionkey, n(b, r:Fresh))), nil] 
| 
e(SK:Sessionkey, n(b, r:Fresh)) inI
| 
-(e(SK:Sessionkey, n(b, r:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 1252984 in 1948ms cpu (6460ms real) (643215 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 4027678 in 7104ms cpu (23541ms real) (566959 rewrites/second)
result Summary: States>> 8 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 11722286 in 18592ms cpu (58525ms real) (630501 rewrites/second)
result Summary: States>> 17 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 49943150 in 62460ms cpu (168087ms real) (799602 rewrites/second)
result Summary: States>> 35 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 119 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#3:Msg ; e(mkey(b, s), a ; b ; #4:Nonce ; #0:Sessionkey)), 
   +(#3:Msg ; e(#0:Sessionkey, #4:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) inI
| 
-(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| 
nil)
(< 1 . 5 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#2:Msg ; e(mkey(b, s), a ; b ; #3:Nonce ; #0:Sessionkey)), 
   +(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) inI
| 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
< 1 . 6 > (
:: #4:Fresh ::
[ nil, 
   +(#5:UName ; #6:UName ; n(#5:UName, #4:Fresh)) | 
   -(e(mkey(#5:UName, s), #5:UName ; #6:UName ; n(#5:UName, #4:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#5:UName, #4:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#3:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#1:Msg ; e(mkey(b, s), a ; b ; #2:Nonce ; #3:Sessionkey)), 
   +(#1:Msg ; e(#3:Sessionkey, #2:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#3:Sessionkey, n(b, #0:Fresh))), nil] )
| 
e(#3:Sessionkey, n(b, #0:Fresh)) !inI,
(e(mkey(#5:UName, s), #5:UName ; #6:UName ; n(#5:UName, #4:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#5:UName, #4:Fresh)) ; n(b, #0:Fresh))
    inI
| 
-(e(mkey(#5:UName, s), #5:UName ; #6:UName ; n(#5:UName, #4:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#5:UName, #4:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#3:Sessionkey, n(b, #0:Fresh))), 
-(e(#3:Sessionkey, n(b, #0:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 209 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 3 > (
:: nil ::
[ nil | 
   -(#3:Msg ; e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) !inI,
(#3:Msg ; e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) inI
| 
-(#3:Msg ; e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
-(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| 
nil)
(< 1 . 2 . 4 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) ; #3:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) !inI,
((e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) ; #3:Msg) inI
| 
-((e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) ; #3:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
-(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| 
nil)
(< 1 . 2 . 6 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) !inI,
e(#3:Key, e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg) inI
| 
-(#3:Key), 
-(e(#3:Key, e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg)), 
+(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
-(e(#0:Sessionkey, n(b, #1:Fresh)) ; #2:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#3:Key))
(< 1 . 5 . 2 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#3:Msg ; e(mkey(b, s), a ; b ; #4:Nonce ; #0:Sessionkey)), 
   +(#3:Msg ; e(#0:Sessionkey, #4:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh)) inI
| 
-(#2:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#3:Msg ; e(mkey(b, s), a ; b ; #4:Nonce ; #0:Sessionkey)), 
   +(#3:Msg ; e(#0:Sessionkey, #4:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) inI
| 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 4 > (
:: nil ::
[ nil | 
   -(#2:Key), 
   -(e(#2:Key, n(b, #1:Fresh))), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#3:Msg ; e(mkey(b, s), a ; b ; #4:Nonce ; #0:Sessionkey)), 
   +(#3:Msg ; e(#0:Sessionkey, #4:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(#2:Key, n(b, #1:Fresh)) inI
| 
-(#2:Key), 
-(e(#2:Key, n(b, #1:Fresh))), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#2:Key),
ghost(#0:Sessionkey))
(< 1 . 6 . 2 > (
:: #4:Fresh ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(mkey(b, s), a ; b ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#1:UName, #0:Fresh)) ; n(b, #4:Fresh)),
    
   -(e(#3:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#1:UName, #0:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#3:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#3:Sessionkey, n(b, #4:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#1:UName, #0:Fresh)) ; n(b, #4:Fresh))
    !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(mkey(b, s), a ; b ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey)) inI
| 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(mkey(b, s), a ; b ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#1:UName, #0:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #0:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#1:UName, #0:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#3:Sessionkey, n(b, #4:Fresh))), 
-(e(#3:Sessionkey, n(b, #4:Fresh)))
| 
nil)
< 1 . 6 . 8 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI
| 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 417 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 2 . 3 . 8 > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
   +(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
   +(e(#1:Sessionkey, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #1:Sessionkey)), 
   +(#5:Msg ; e(#1:Sessionkey, #6:Nonce) ; n(b, #2:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #2:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(#0:Msg ; e(mkey(#3:UName, s), #7:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
   +(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), nil] )
| 
e(#1:Sessionkey, n(b, #2:Fresh)) !inI,
(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)) !inI,
(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)) !inI,
(#0:Msg ; e(mkey(#3:UName, s), #7:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)) inI
| 
-(#0:Msg ; e(mkey(#3:UName, s), #7:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
+(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
-(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
+(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
-(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
+(e(#1:Sessionkey, n(b, #2:Fresh))), 
-(e(#1:Sessionkey, n(b, #2:Fresh)))
| 
nil)
(< 1 . 5 . 2 . 2 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; #2:Msg ; n(b, #1:Fresh)), 
   +(#2:Msg ; n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh)) !inI,
(#3:Msg ; #2:Msg ; n(b, #1:Fresh)) inI
| 
-(#3:Msg ; #2:Msg ; n(b, #1:Fresh)), 
+(#2:Msg ; n(b, #1:Fresh)), 
-(#2:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 2 . 3 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#2:Msg ; n(b, #1:Fresh)) ; #3:Msg), 
   +(#2:Msg ; n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh)) !inI,
((#2:Msg ; n(b, #1:Fresh)) ; #3:Msg) inI
| 
-((#2:Msg ; n(b, #1:Fresh)) ; #3:Msg), 
+(#2:Msg ; n(b, #1:Fresh)), 
-(#2:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 2 . 4 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, #2:Msg ; n(b, #1:Fresh))), 
   +(#2:Msg ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh)) !inI,
e(#3:Key, #2:Msg ; n(b, #1:Fresh)) inI
| 
-(#3:Key), 
-(e(#3:Key, #2:Msg ; n(b, #1:Fresh))), 
+(#2:Msg ; n(b, #1:Fresh)), 
-(#2:Msg ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#3:Key),
ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 3 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
(#3:Msg ; n(b, #1:Fresh) ; #2:Msg) inI
| 
-(#3:Msg ; n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 4 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
((n(b, #1:Fresh) ; #2:Msg) ; #3:Msg) inI
| 
-((n(b, #1:Fresh) ; #2:Msg) ; #3:Msg), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 6 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #0:Sessionkey)), 
   +(#4:Msg ; e(#0:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
e(#3:Key, n(b, #1:Fresh) ; #2:Msg) inI
| 
-(#3:Key), 
-(e(#3:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#3:Key),
ghost(#0:Sessionkey))
(< 1 . 5 . 4 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh))), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#2:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #2:Sessionkey)), 
   +(#4:Msg ; e(#2:Sessionkey, #5:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#2:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh)) !inI,
e(#2:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) inI
| 
-(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh))), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh))), 
+(n(b, #1:Fresh)), 
-(#2:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#2:Sessionkey, n(b, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Key),
ghost(#2:Sessionkey))
(< 1 . 6 . 2 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#2:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
   -(e(#2:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#2:Sessionkey, n(b, #4:Fresh)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh))
    !inI,
e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,
e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) inI
| 
-(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#2:Sessionkey, n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 7 > (
:: #1:Fresh ::
[ nil, 
   +(a ; b ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    seskey(a, b, n(s, #2:Fresh)), n(a, #1:Fresh)) ; n(b, #0:Fresh)), 
   +(e(seskey(a, b, n(s, #2:Fresh)), n(b, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; b ; n(a, #1:Fresh)), 
   +(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh)))), nil] 
    & 
:: #0:Fresh ::
[ nil | 
   -(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh)))), 
   +(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    seskey(a, b, n(s, #2:Fresh)), n(a, #1:Fresh)) ; n(b, #0:Fresh)), 
   -(e(seskey(a, b, n(s, #2:Fresh)), n(b, #0:Fresh))), nil] )
| 
e(seskey(a, b, n(s, #2:Fresh)), n(b, #0:Fresh)) !inI,
(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(mkey(
    b, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh)))) !inI,
(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    seskey(a, b, n(s, #2:Fresh)), n(a, #1:Fresh)) ; n(b, #0:Fresh)) !inI,
(a ; b ; n(a, #1:Fresh)) inI
| 
-(a ; b ; n(a, #1:Fresh)), 
+(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh)))), 
-(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh)))), 
+(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    seskey(a, b, n(s, #2:Fresh)), n(a, #1:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(a, s), a ; b ; n(a, #1:Fresh) ; seskey(a, b, n(s, #2:Fresh))) ; e(
    seskey(a, b, n(s, #2:Fresh)), n(a, #1:Fresh)) ; n(b, #0:Fresh)), 
+(e(seskey(a, b, n(s, #2:Fresh)), n(b, #0:Fresh))), 
-(e(seskey(a, b, n(s, #2:Fresh)), n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 3 > (
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh)
    ; #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
(#5:Msg ; e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)) inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI
| 
-(#5:Msg ; e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 4 > (
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) inI,
(#5:Msg ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI
| 
-(#5:Msg ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg) inI
| 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 6 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) inI,
((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg) inI
| 
-((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 8 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
e(#5:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) inI
| 
-(#5:Key), 
-(e(#5:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| ghost(#5:Key))
(< 1 . 6 . 8 . 11 > (
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh))), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
n(b, #3:Fresh) inI,
e(#0:Sessionkey, n(#1:UName, #2:Fresh)) inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) inI
| 
-(n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh))), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
< 1 . 6 . 8 . 12 > (
:: nil ::
[ nil | 
   -(mkey(#1:UName, s)), 
   -(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
mkey(#1:UName, s) inI,
(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey) inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI
| 
-(mkey(#1:UName, s)), 
-(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 882 in 4ms cpu (0ms real) (220500 rewrites/second)
result IdSystemSet: (< 1 . 2 . 3 . 8 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
   -(#0:Msg), 
   +(#0:Msg ; e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
   +(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
   +(e(#1:Sessionkey, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #2:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #2:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(#0:Msg ; e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
   +(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), nil] )
| 
#0:Msg !inI,
e(#1:Sessionkey, n(b, #2:Fresh)) !inI,
(#0:Msg ; e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)) !inI,
(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)) !inI,
(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)) !inI,
e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ; #1:Sessionkey) inI
| 
generatedByIntruder(#0:Msg), 
-(e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ; #1:Sessionkey)), 
-(#0:Msg), 
+(#0:Msg ; e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
-(#0:Msg ; e(mkey(#3:UName, s), #5:UName ; #3:UName ; n(b, #2:Fresh) ;
    #1:Sessionkey)), 
+(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
-(#0:Msg ; e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
+(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
-(e(#1:Sessionkey, n(b, #2:Fresh)) ; n(#3:UName, #4:Fresh)), 
+(e(#1:Sessionkey, n(b, #2:Fresh))), 
-(e(#1:Sessionkey, n(b, #2:Fresh)))
| 
nil)
(< 1 . 5 . 2 . 2 . 2 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(#2:Msg ; e(mkey(b, s), a ; b ; #3:Nonce ; #0:Sessionkey)), 
   +(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)) !inI,
(e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)) !inI,
(#2:Msg ; e(mkey(b, s), a ; b ; #3:Nonce ; #0:Sessionkey)) inI
| 
-(#2:Msg ; e(mkey(b, s), a ; b ; #3:Nonce ; #0:Sessionkey)), 
+(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
-(#2:Msg ; e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
+(e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
-(e(#0:Sessionkey, #3:Nonce) ; n(b, #1:Fresh)), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 3 . 2 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
   +(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh) ; #3:Msg) !inI,
(n(b, #1:Fresh) ; #3:Msg) !inI,
(#4:Msg ; #2:Msg ; n(b, #1:Fresh) ; #3:Msg) inI
| 
-(#4:Msg ; #2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
+(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
-(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh) ; #3:Msg), 
-(n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 3 . 3 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((#2:Msg ; n(b, #1:Fresh) ; #3:Msg) ; #4:Msg), 
   +(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh) ; #3:Msg) !inI,
(n(b, #1:Fresh) ; #3:Msg) !inI,
((#2:Msg ; n(b, #1:Fresh) ; #3:Msg) ; #4:Msg) inI
| 
-((#2:Msg ; n(b, #1:Fresh) ; #3:Msg) ; #4:Msg), 
+(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
-(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh) ; #3:Msg), 
-(n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Sessionkey))
(< 1 . 5 . 3 . 3 . 4 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #2:Msg ; n(b, #1:Fresh) ; #3:Msg)), 
   +(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #3:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #0:Sessionkey)), 
   +(#5:Msg ; e(#0:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
(#2:Msg ; n(b, #1:Fresh) ; #3:Msg) !inI,
(n(b, #1:Fresh) ; #3:Msg) !inI,
e(#4:Key, #2:Msg ; n(b, #1:Fresh) ; #3:Msg) inI
| 
-(#4:Key), 
-(e(#4:Key, #2:Msg ; n(b, #1:Fresh) ; #3:Msg)), 
+(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
-(#2:Msg ; n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh) ; #3:Msg), 
-(n(b, #1:Fresh) ; #3:Msg), 
+(n(b, #1:Fresh)), 
-(#0:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#0:Sessionkey, n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh)))
| ghost(#4:Key),
ghost(#0:Sessionkey))
(< 1 . 5 . 4 . 3 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh))), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#2:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #2:Sessionkey)), 
   +(#5:Msg ; e(#2:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#2:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh)) !inI,
e(#2:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) !inI,
(#4:Msg ; e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) inI
| 
-(#4:Msg ; e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
-(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh))), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh))), 
+(n(b, #1:Fresh)), 
-(#2:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#2:Sessionkey, n(b, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Key),
ghost(#2:Sessionkey))
(< 1 . 5 . 4 . 3 . 4 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh))), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#2:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) ; #4:Msg), 
   +(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #2:Sessionkey)), 
   +(#5:Msg ; e(#2:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#2:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh)) !inI,
e(#2:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) !inI,
((e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) ; #4:Msg) inI
| 
-((e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) ; #4:Msg), 
+(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
-(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh))), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh))), 
+(n(b, #1:Fresh)), 
-(#2:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#2:Sessionkey, n(b, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #1:Fresh)))
| ghost(#0:Key),
ghost(#2:Sessionkey))
(< 1 . 5 . 4 . 3 . 6 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, e(#0:Key, n(b, #1:Fresh)) ; #3:Msg)), 
   +(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh))), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey), 
   -(n(b, #1:Fresh)), 
   +(e(#2:Sessionkey, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
   +(e(#0:Key, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #2:Sessionkey)), 
   +(#5:Msg ; e(#2:Sessionkey, #6:Nonce) ; n(b, #1:Fresh)) | 
   -(e(#2:Sessionkey, n(b, #1:Fresh))), nil] )
| 
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh)) !inI,
e(#2:Sessionkey, n(b, #1:Fresh)) !inI,
(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) !inI,
e(#4:Key, e(#0:Key, n(b, #1:Fresh)) ; #3:Msg) inI
| 
-(#4:Key), 
-(e(#4:Key, e(#0:Key, n(b, #1:Fresh)) ; #3:Msg)), 
+(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
-(e(#0:Key, n(b, #1:Fresh)) ; #3:Msg), 
+(e(#0:Key, n(b, #1:Fresh))), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh))), 
+(n(b, #1:Fresh)), 
-(#2:Sessionkey), 
-(n(b, #1:Fresh)), 
+(e(#2:Sessionkey, n(b, #1:Fresh))), 
-(e(#2:Sessionkey, n(b, #1:Fresh)))
| ghost(#4:Key),
ghost(#0:Key),
ghost(#2:Sessionkey))
(< 1 . 6 . 2 . 6 . 2 > (
:: nil ::
[ nil | 
   -(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   +(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#2:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   -(e(#2:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh))
    !inI,
e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) inI,
(#4:Msg ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)) inI
| 
-(#4:Msg ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
+(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#2:Sessionkey, n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 6 . 3 > (
:: nil ::
[ nil | 
   -(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh)
    ; #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#2:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   -(e(#2:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh))
    !inI,
e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,
(#4:Msg ; e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) inI
| 
-(#4:Msg ; e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#2:Sessionkey, n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 6 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; #4:Msg), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#2:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
   -(e(#2:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh))
    !inI,
e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; #4:Msg) inI
| 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; #4:Msg), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#2:Sessionkey, n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 6 . 11 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#2:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil | 
   -(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
   -(e(#2:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#2:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)) !inI,
(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh))
    !inI,
mkey(#0:UName, s) inI,
e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) inI,
(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey) inI
| 
-(mkey(#0:UName, s)), 
-(#0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ; #2:Sessionkey), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ; #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(mkey(b, s), a ; b ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #3:UName ; n(#0:UName, #1:Fresh) ;
    #2:Sessionkey) ; e(#2:Sessionkey, n(#0:UName, #1:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#2:Sessionkey, n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 7 . 1 > (
:: #1:Fresh ::
[ nil | 
   -(a ; b ; n(a, #0:Fresh)), 
   +(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), nil] 
    & 
:: #2:Fresh ::
[ nil | 
   -(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
   +(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
   -(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(a ; b ; n(a, #0:Fresh)), 
   -(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
   +(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), nil] )
| 
e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh)) !inI,
(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(mkey(
    b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))) !inI,
(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)) !inI
| 
+(a ; b ; n(a, #0:Fresh)), 
-(a ; b ; n(a, #0:Fresh)), 
+(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
-(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
+(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
-(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
+(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), 
-(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh)))
| 
nil)
(< 1 . 6 . 2 . 7 . 7 > (
:: nil ::
[ nil | 
   -(b ; n(a, #0:Fresh)), 
   -(a), 
   +(a ; b ; n(a, #0:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil | 
   -(a ; b ; n(a, #0:Fresh)), 
   +(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), nil] 
    & 
:: #2:Fresh ::
[ nil | 
   -(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
   +(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
   -(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; b ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
   +(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), nil] )
| 
e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh)) !inI,
(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(mkey(
    b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))) !inI,
(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)) !inI,
(b ; n(a, #0:Fresh)) inI
| 
-(b ; n(a, #0:Fresh)), 
-(a), 
+(a ; b ; n(a, #0:Fresh)), 
-(a ; b ; n(a, #0:Fresh)), 
+(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
-(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    mkey(b, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh)))), 
+(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
-(e(mkey(a, s), a ; b ; n(a, #0:Fresh) ; seskey(a, b, n(s, #1:Fresh))) ; e(
    seskey(a, b, n(s, #1:Fresh)), n(a, #0:Fresh)) ; n(b, #2:Fresh)), 
+(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh))), 
-(e(seskey(a, b, n(s, #1:Fresh)), n(b, #2:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 3 . 4 > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh)
    ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   +(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#4:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #4:Sessionkey)), 
   +(#7:Msg ; e(#4:Sessionkey, #8:Nonce) ; n(b, #5:Fresh)) | 
   -(e(#4:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#4:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))
    !inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)) inI,
(#6:Msg ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) inI
| 
-(#6:Msg ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
+(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#4:Sessionkey, n(b, #5:Fresh))), 
-(e(#4:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 3 . 8 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))), 
   +(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh)
    ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#4:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #4:Sessionkey)), 
   +(#7:Msg ; e(#4:Sessionkey, #8:Nonce) ; n(b, #5:Fresh)) | 
   -(e(#4:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#4:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))
    !inI,
e(#6:Key, e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)) inI
| 
-(#6:Key), 
-(e(#6:Key, e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))), 
+(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#4:Sessionkey, n(b, #5:Fresh))), 
-(e(#4:Sessionkey, n(b, #5:Fresh)))
| ghost(#6:Key))
(< 1 . 6 . 8 . 3 . 11 > (
:: nil ::
[ nil | 
   -(n(b, #5:Fresh)), 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh))), 
   +(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh)
    ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#4:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #4:Sessionkey)), 
   +(#6:Msg ; e(#4:Sessionkey, #7:Nonce) ; n(b, #5:Fresh)) | 
   -(e(#4:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#4:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))
    !inI,
n(b, #5:Fresh) inI,
e(#4:Sessionkey, n(#1:UName, #3:Fresh)) inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)) inI
| 
-(n(b, #5:Fresh)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh))), 
+(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#4:Sessionkey, n(b, #5:Fresh))), 
-(e(#4:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 3 . 6{1} > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh)
    ; #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; #6:Msg), 
   +(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#4:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #4:Sessionkey)), 
   +(#7:Msg ; e(#4:Sessionkey, #8:Nonce) ; n(b, #5:Fresh)) | 
   -(e(#4:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#4:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))
    !inI,
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)) inI,
((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; #6:Msg) inI,(
#0:Msg != e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),(
#6:Msg != e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)),
(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)) != (e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b,
    #5:Fresh)) ; #6:Msg
| 
-((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; #6:Msg), 
+(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(#0:Msg ; e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#4:Sessionkey, n(b, #5:Fresh))), 
-(e(#4:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 3 . 6{2} > (
:: nil ::
[ nil | 
   -(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; e(mkey(
    #1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; e(mkey(
    #1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
   +(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#1:UName ; #2:UName ; n(#1:UName, #3:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
   +(e(#4:Sessionkey, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #4:Sessionkey)), 
   +(#7:Msg ; e(#4:Sessionkey, #8:Nonce) ; n(b, #5:Fresh)) | 
   -(e(#4:Sessionkey, n(b, #5:Fresh))), nil] )
| 
e(#4:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) !inI,
(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh))
    !inI,
((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; e(mkey(#1:UName,
    s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey)) inI
| 
-((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; e(mkey(#1:UName,
    s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
+(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-((e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)) ; e(mkey(#1:UName,
    s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ; #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
-(e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #2:UName ; n(#1:UName, #3:Fresh) ;
    #4:Sessionkey) ; e(#4:Sessionkey, n(#1:UName, #3:Fresh)) ; n(b, #5:Fresh)),
    
+(e(#4:Sessionkey, n(b, #5:Fresh))), 
-(e(#4:Sessionkey, n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 4 . 12 > (
:: nil ::
[ nil | 
   -(mkey(#2:UName, s)), 
   -(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #4:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh))
    !inI,
mkey(#2:UName, s) inI,
(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) inI,
(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey) inI
| 
-(mkey(#2:UName, s)), 
-(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
-(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#1:Sessionkey, n(b, #4:Fresh))), 
-(e(#1:Sessionkey, n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 4 . 6{1} > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; #6:Msg), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #1:Sessionkey)), 
   +(#7:Msg ; e(#1:Sessionkey, #8:Nonce) ; n(b, #4:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh))
    !inI,
(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) inI,
(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; #6:Msg) inI,(
#0:Msg != e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)),(
#6:Msg != e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) != e(mkey(
    #2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey)
    ; #6:Msg
| 
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; #6:Msg), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
-(#0:Msg ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#1:Sessionkey, n(b, #4:Fresh))), 
-(e(#1:Sessionkey, n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 5 . 6 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #6:Msg), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #0:Sessionkey)), 
   +(#7:Msg ; e(#0:Sessionkey, #8:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg) inI,
((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #6:Msg) inI
| 
-((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #6:Msg), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 5 . 9 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#7:Msg ; e(mkey(b, s), a ; b ; #8:Nonce ; #0:Sessionkey)), 
   +(#7:Msg ; e(#0:Sessionkey, #8:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
e(#6:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg) inI
| 
-(#6:Key), 
-(e(#6:Key, e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| ghost(#6:Key))
(< 1 . 6 . 8 . 5 . 13 > (
:: nil ::
[ nil | 
   -(n(b, #3:Fresh)), 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh))), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
n(b, #3:Fresh) inI,
e(#0:Sessionkey, n(#1:UName, #2:Fresh)) inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg) inI
| 
-(n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh))), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; #5:Msg), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 6 . 13 > (
:: nil ::
[ nil | 
   -(mkey(#1:UName, s)), 
   -(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
   +(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    nil]  & 
:: nil ::
[ nil | 
   -((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
   +(e(#0:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #0:Sessionkey)), 
   +(#6:Msg ; e(#0:Sessionkey, #7:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#0:Sessionkey, n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) !inI,
(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) !inI,
(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh))
    !inI,
mkey(#1:UName, s) inI,
(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey) inI,
((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg) inI
| 
-(mkey(#1:UName, s)), 
-(#1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ; #0:Sessionkey), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
-((e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey)), 
+(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
-(e(mkey(#1:UName, s), #1:UName ; #4:UName ; n(#1:UName, #2:Fresh) ;
    #0:Sessionkey) ; e(#0:Sessionkey, n(#1:UName, #2:Fresh)) ; n(b, #3:Fresh)),
    
+(e(#0:Sessionkey, n(b, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 8 . 12 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#2:UName, s)), 
   -(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #4:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh))
    !inI,
mkey(#2:UName, s) inI,
e(#0:Key, e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)) inI,
(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey) inI
| 
-(mkey(#2:UName, s)), 
-(#2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
-(#0:Key), 
-(e(#0:Key, e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #5:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#1:Sessionkey, n(b, #4:Fresh))), 
-(e(#1:Sessionkey, n(b, #4:Fresh)))
| ghost(#0:Key))
(< 1 . 6 . 8 . 11 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil] )
| 
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) inI,
(#5:Msg ; n(b, #0:Fresh)) inI
| 
-(#5:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 11 . 6 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #5:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil] )
| 
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) inI,
(n(b, #0:Fresh) ; #5:Msg) inI
| 
-(n(b, #0:Fresh) ; #5:Msg), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 11 . 7 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
n(b, #0:Fresh) inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; #5:Msg) inI
| 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 11 . 9 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, n(b, #0:Fresh))), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #1:Sessionkey)), 
   +(#6:Msg ; e(#1:Sessionkey, #7:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil] )
| 
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
e(#5:Key, n(b, #0:Fresh)) inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) inI
| 
-(#5:Key), 
-(e(#5:Key, n(b, #0:Fresh))), 
+(n(b, #0:Fresh)), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| ghost(#5:Key))
(< 1 . 6 . 8 . 11 . 16 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#2:UName, s)), 
   -(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #1:Sessionkey)), 
   +(#5:Msg ; e(#1:Sessionkey, #6:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
n(b, #0:Fresh) inI,
mkey(#2:UName, s) inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) inI,
(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey) inI
| 
-(mkey(#2:UName, s)), 
-(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ; #1:Sessionkey), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 11 . 17 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
   +(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; #4:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
   +(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   -(#8:Msg ; e(mkey(b, s), a ; b ; #9:Nonce ; #1:Sessionkey)), 
   +(#8:Msg ; e(#1:Sessionkey, #9:Nonce) ; n(b, #0:Fresh)) | 
   -(e(#1:Sessionkey, n(b, #0:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   +(#6:UName ; #7:UName ; n(#6:UName, #5:Fresh)) | 
   -(e(mkey(#6:UName, s), #6:UName ; #7:UName ; n(#6:UName, #5:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#6:UName, #5:Fresh)) ; n(#2:UName,
    #3:Fresh)), 
   +(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), nil] )
| 
e(#1:Sessionkey, n(b, #0:Fresh)) !inI,
e(#1:Sessionkey, n(#2:UName, #3:Fresh)) !inI,
(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)) !inI,
(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh))
    !inI,
n(b, #0:Fresh) inI,
e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) inI,
(e(mkey(#6:UName, s), #6:UName ; #7:UName ; n(#6:UName, #5:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#6:UName, #5:Fresh)) ; n(#2:UName,
    #3:Fresh)) inI
| 
-(e(mkey(#6:UName, s), #6:UName ; #7:UName ; n(#6:UName, #5:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#6:UName, #5:Fresh)) ; n(#2:UName,
    #3:Fresh)), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
-(n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh))), 
+(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)), 
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey)), 
+(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
-(e(mkey(#2:UName, s), #2:UName ; #4:UName ; n(#2:UName, #3:Fresh) ;
    #1:Sessionkey) ; e(#1:Sessionkey, n(#2:UName, #3:Fresh)) ; n(b, #0:Fresh)),
    
+(e(#1:Sessionkey, n(b, #0:Fresh))), 
-(e(#1:Sessionkey, n(b, #0:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 12 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(mkey(i, s)), 
   -(i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey), 
   +(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), 
   -(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey)), 
   +(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) ; e(
    #2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(i ; #0:UName ; n(i, #1:Fresh)) | 
   -(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) ; e(
    #2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), 
   +(e(#2:Sessionkey, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(#4:Msg ; e(mkey(b, s), a ; b ; #5:Nonce ; #2:Sessionkey)), 
   +(#4:Msg ; e(#2:Sessionkey, #5:Nonce) ; n(b, #3:Fresh)) | 
   -(e(#2:Sessionkey, n(b, #3:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#2:Sessionkey, n(b, #3:Fresh)) !inI,
e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) !inI,
(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) ; e(
    #2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)) !inI,
(i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) inI,
(e(#2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)) inI
| 
+(mkey(i, s)), 
-(mkey(i, s)), 
-(i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey), 
+(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey)), 
-(e(#2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey)), 
+(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) ; e(
    #2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), 
-(e(mkey(i, s), i ; #0:UName ; n(i, #1:Fresh) ; #2:Sessionkey) ; e(
    #2:Sessionkey, n(i, #1:Fresh)) ; n(b, #3:Fresh)), 
+(e(#2:Sessionkey, n(b, #3:Fresh))), 
-(e(#2:Sessionkey, n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 8 . 12 . 11 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)), 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#3:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(#6:Msg ; e(mkey(b, s), a ; b ; #7:Nonce ; #3:Sessionkey)), 
   +(#6:Msg ; e(#3:Sessionkey, #7:Nonce) ; n(b, #4:Fresh)) | 
   -(e(#3:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#3:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) !inI,
(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh))
    !inI,
mkey(#0:UName, s) inI,
e(#5:Key, #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey) inI,
(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)) inI
| 
-(#5:Key), 
-(e(#5:Key, #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey)), 
+(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
-(mkey(#0:UName, s)), 
-(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
-(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#3:Sessionkey, n(b, #4:Fresh))), 
-(e(#3:Sessionkey, n(b, #4:Fresh)))
| ghost(#5:Key))
< 1 . 6 . 8 . 12 . 17 > (
:: nil ::
[ nil | 
   -(mkey(#0:UName, s)), 
   -(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), nil]  & 
:: nil ::
[ nil | 
   -(#1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
   -(#0:UName), 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), nil]  & 
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)), 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
   +(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh)) | 
   -(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
   +(e(#3:Sessionkey, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(#5:Msg ; e(mkey(b, s), a ; b ; #6:Nonce ; #3:Sessionkey)), 
   +(#5:Msg ; e(#3:Sessionkey, #6:Nonce) ; n(b, #4:Fresh)) | 
   -(e(#3:Sessionkey, n(b, #4:Fresh))), nil] )
| 
e(#3:Sessionkey, n(b, #4:Fresh)) !inI,
e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) !inI,
(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey) !inI,
(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh))
    !inI,
mkey(#0:UName, s) inI,
(#1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey) inI,
(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)) inI
| 
-(#1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
-(#0:UName), 
+(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
-(mkey(#0:UName, s)), 
-(#0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ; #3:Sessionkey), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
-(e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)), 
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey)), 
+(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
-(e(mkey(#0:UName, s), #0:UName ; #1:UName ; n(#0:UName, #2:Fresh) ;
    #3:Sessionkey) ; e(#3:Sessionkey, n(#0:UName, #2:Fresh)) ; n(b, #4:Fresh)),
    
+(e(#3:Sessionkey, n(b, #4:Fresh))), 
-(e(#3:Sessionkey, n(b, #4:Fresh)))
| 
nil
Bye.
Tue Jun  2 19:30:06 CEST 2020
