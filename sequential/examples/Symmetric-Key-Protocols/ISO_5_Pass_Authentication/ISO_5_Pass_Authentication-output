Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 39587885 in 67552ms cpu (231396ms real) (586035 rewrites/second)
result GrammarList: (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)),
   (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(
    #10:UName, #11:Fresh)) ; #9:UName)),
   (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName,
    #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)),
   (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)),
   #0:Msg notLeq seskey(#20:UName, #21:UName, n(#22:UName, #23:Fresh)) => (
    #0:Msg ; #24:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)),
   (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(
    #10:UName, #11:Fresh)) ; #9:UName)),
   (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName,
    #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)),
   (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)),
   #0:Msg notLeq seskey(#20:UName, #21:UName, n(#22:UName, #23:Fresh)) => (
    #24:UName ; #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)),
   (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#9:UName, #7:UName, n(
    #10:UName, #11:Fresh)) ; #9:UName)),
   (#0:Msg notLeq e(mkey(s, #12:UName), #13:Nonce ; seskey(#12:UName,
    #14:UName, n(#15:UName, #16:Fresh)) ; #14:UName)),
   (#0:Msg notLeq #17:Nonce ; #18:UName ; n(#18:UName, #19:Fresh)),
   #0:Msg notLeq seskey(#20:UName, #21:UName, n(#22:UName, #23:Fresh)) => (e(
    mkey(s, #24:UName), n(#24:UName, #25:Fresh) ; #26:Sessionkey ; #27:UName) ;
    #0:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)),
   (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#7:UName, #9:UName, n(
    #10:UName, #11:Fresh)) ; #9:UName)),
   (#0:Msg notLeq #12:Nonce ; #13:UName ; n(#13:UName, #14:Fresh)),
   (#0:Msg notLeq #15:UName ; n(#15:UName, #16:Fresh)),
   (#0:Msg notLeq seskey(#17:UName, #18:UName, n(#19:UName, #20:Fresh)) ;
    #17:UName),
   #0:Msg notLeq seskey(#21:UName, #22:UName, n(#23:UName, #24:Fresh)) ;
    #22:UName => (#25:Msg ; #0:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq n(#1:UName, #2:Fresh)),
   (#0:Msg notLeq e(#3:Sessionkey, n(#4:UName, #5:Fresh) ; #6:Nonce)),
   (#0:Msg notLeq e(mkey(s, #7:UName), #8:Nonce ; seskey(#7:UName, #9:UName, n(
    #10:UName, #11:Fresh)) ; #9:UName)),
   (#0:Msg notLeq #12:Nonce ; #13:UName ; n(#13:UName, #14:Fresh)),
   (#0:Msg notLeq #15:UName ; n(#15:UName, #16:Fresh)),
   (#0:Msg notLeq seskey(#17:UName, #18:UName, n(#19:UName, #20:Fresh)) ;
    #18:UName),
   #0:Msg notLeq seskey(#21:UName, #22:UName, n(#23:UName, #24:Fresh)) ;
    #21:UName => (#0:Msg ; n(#25:UName, #26:Fresh)) inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq mkey(s, #1:UName)),
   #0:Msg notLeq seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh)) => (#0:Msg ;
    #6:UName) inL .  ; 
grl #0:Key notInI,
   (#0:Key notLeq mkey(s, #1:UName)),
   #0:Key notLeq seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh)) => e(#0:Key,
    #6:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq #1:Nonce ; seskey(#2:UName, #3:UName, n(#4:UName, #5:Fresh))
    ; #2:UName),
   (#0:Msg notLeq #6:Nonce ; seskey(#7:UName, #8:UName, n(#9:UName, #10:Fresh))
    ; #8:UName),
   #0:Msg notLeq n(#11:UName, #12:Fresh) ; #13:Nonce => e(#14:Key, #0:Msg) inL
    . )
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl (mkey(#1:Name, #0:Name) notLeq mkey(i, s)),
   mkey(#1:Name, #0:Name) notLeq mkey(i, #2:UName) => mkey(#1:Name, #0:Name)
    inL . )
| (errorInconsistentExceptionsInGrammarRule 
grl mr(#0:Name, #1:Fresh) notLeq #7:Nonce => mr(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl mr(#0:Name, #1:Fresh) notLeq #7:Nonce => mr(#0:Name, #1:Fresh) inL . )
| (errorInconsistentExceptionsInGrammarRule 
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL . 
    inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => p(#0:Msg) inL . )
| (
grl empty => p(#0:Msg) inL .  ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:UName, #2:Fresh) => seskey(#3:Name, #4:Name, #0:Nonce)
    inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq seskey(#3:UName, #4:UName, n(
    #5:UName, #6:Fresh)) => seskey(#0:Name, #1:Name, #2:Nonce) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Nonce notInI => txt(#1:Name, #2:Name, #0:Nonce) inL . )
| 
grl empty => txt(#0:Name, #1:Name, #2:Nonce) inL .  ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 4435 in 144ms cpu (324ms real) (30798 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh,r':Fresh ::
[ nil, 
   -(a ; NA:Nonce), 
   +(a ; NA:Nonce ; b ; n(b, r':Fresh)), 
   -(e(mkey(b, s), n(b, r':Fresh) ; SK:Sessionkey ; a) ; MA:Msg), 
   +(MA:Msg ; e(SK:Sessionkey, n(b, r:Fresh) ; NA:Nonce)) | 
   -(e(SK:Sessionkey, NA:Nonce ; n(b, r:Fresh))), nil] 
| 
e(SK:Sessionkey, NA:Nonce ; n(b, r:Fresh)) inI
| 
-(e(SK:Sessionkey, NA:Nonce ; n(b, r:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 2302910 in 3472ms cpu (8719ms real) (663280 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 4023061 in 7280ms cpu (18431ms real) (552618 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 7108509 in 11212ms cpu (28423ms real) (634009 rewrites/second)
result Summary: States>> 12 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 31578953 in 43204ms cpu (108287ms real) (730926 rewrites/second)
result Summary: States>> 23 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 92032550 in 108768ms cpu (258278ms real) (846136 rewrites/second)
result Summary: States>> 40 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 124 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil | 
   -(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
   +(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #2:Nonce), 
   +(a ; #2:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #1:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#1:Sessionkey, n(b, #3:Fresh) ; #2:Nonce)) | 
   -(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), nil] )
| 
e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh)) !inI,
(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))) inI
| 
-(#0:Msg ; e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
+(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh))), 
-(e(#1:Sessionkey, #2:Nonce ; n(b, #3:Fresh)))
| 
nil)
(< 1 . 2 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
   +(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
| 
e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg) inI
| 
-(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) ; #3:Msg), 
+(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#0:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
| 
nil)
(< 1 . 5 > (
:: nil ::
[ nil | 
   -(#0:Nonce ; n(b, #1:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #0:Nonce), 
   +(a ; #0:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#2:Sessionkey, n(b, #1:Fresh) ; #0:Nonce)) | 
   -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil] )
| 
e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)) !inI,
(#0:Nonce ; n(b, #1:Fresh)) inI
| 
-(#0:Nonce ; n(b, #1:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), 
-(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)))
| ghost(#2:Sessionkey))
< 1 . 6 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) | 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) inI
| 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 202 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 5 . 4 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, #0:Nonce ; n(b, #1:Fresh))), 
   +(#0:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Nonce ; n(b, #1:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #0:Nonce), 
   +(a ; #0:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#2:Sessionkey, n(b, #1:Fresh) ; #0:Nonce)) | 
   -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil] )
| 
e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)) !inI,
(#0:Nonce ; n(b, #1:Fresh)) !inI,
e(#3:Key, #0:Nonce ; n(b, #1:Fresh)) inI
| 
-(#3:Key), 
-(e(#3:Key, #0:Nonce ; n(b, #1:Fresh))), 
+(#0:Nonce ; n(b, #1:Fresh)), 
-(#0:Nonce ; n(b, #1:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), 
-(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)))
| ghost(#3:Key),
ghost(#2:Sessionkey))
(< 1 . 5 . 5 > (
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#0:Nonce), 
   +(#0:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Nonce ; n(b, #1:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   -(a ; #0:Nonce), 
   +(a ; #0:Nonce ; b ; n(b, #3:Fresh)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #2:Sessionkey ; a) ; #4:Msg), 
   +(#4:Msg ; e(#2:Sessionkey, n(b, #1:Fresh) ; #0:Nonce)) | 
   -(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), nil] )
| 
#0:Nonce !inI,
e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)) !inI,
(#0:Nonce ; n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) inI
| 
generatedByIntruder(#0:Nonce), 
-(n(b, #1:Fresh)), 
-(#0:Nonce), 
+(#0:Nonce ; n(b, #1:Fresh)), 
-(#0:Nonce ; n(b, #1:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh))), 
-(e(#2:Sessionkey, #0:Nonce ; n(b, #1:Fresh)))
| ghost(#2:Sessionkey))
(< 1 . 6 . 3 > (
:: #0:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #0:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   +(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #0:Fresh)), 
   +(a ; n(#1:UName, #0:Fresh) ; b ; n(b, #5:Fresh)) | 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName),
    n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
   -(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))) !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName), n(
    #1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)) inI
| 
-(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #1:UName), n(
    #1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #0:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #4:Fresh) ; n(#1:UName, #0:Fresh))), 
+(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#2:Sessionkey, n(#1:UName, #0:Fresh) ; n(b, #4:Fresh)))
| 
nil)
< 1 . 6 . 7 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI
| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 342 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 5 . 4 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #3:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#3:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
| 
e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) !inI,
e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Nonce ; n(b, #2:Fresh)) !inI,
(#4:Msg ; e(#0:Key, #1:Nonce ; n(b, #2:Fresh))) inI
| 
-(#4:Msg ; e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
+(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
+(#1:Nonce ; n(b, #2:Fresh)), 
-(#1:Nonce ; n(b, #2:Fresh)), 
-(#3:Sessionkey), 
+(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
| ghost(#0:Key),
ghost(#3:Sessionkey))
(< 1 . 5 . 4 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
   +(#1:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #2:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #4:Msg), 
   +(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #3:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#3:Sessionkey, n(b, #2:Fresh) ; #1:Nonce)) | 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), nil] )
| 
e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) !inI,
e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #4:Msg) inI
| 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh)) ; #4:Msg), 
+(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Nonce ; n(b, #2:Fresh))), 
+(#1:Nonce ; n(b, #2:Fresh)), 
-(#1:Nonce ; n(b, #2:Fresh)), 
-(#3:Sessionkey), 
+(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh))), 
-(e(#3:Sessionkey, #1:Nonce ; n(b, #2:Fresh)))
| ghost(#0:Key),
ghost(#3:Sessionkey))
(< 1 . 5 . 4 . 7 > (
:: nil ::
[ nil | 
   -(#0:Sessionkey), 
   -(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), 
   +(n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #0:Sessionkey ; #5:UName) ;
    e(#0:Sessionkey, n(b, #3:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), nil]  & 
:: #3:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #3:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)) !inI,
e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)) !inI,
(n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #0:Sessionkey ; #5:UName) ; e(
    #0:Sessionkey, n(b, #3:Fresh) ; n(#1:UName, #2:Fresh))) inI
| 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #0:Sessionkey ; #5:UName) ; e(
    #0:Sessionkey, n(b, #3:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), 
-(#0:Sessionkey), 
-(e(#0:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), 
+(n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)), 
-(n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh))), 
-(e(#4:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #3:Fresh)))
| ghost(#0:Sessionkey),
ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 2 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(#3:Msg ; n(b, #0:Fresh)) inI
| 
-(#3:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#2:Sessionkey))
(< 1 . 5 . 5 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh,#4:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Msg) inI
| 
-(n(b, #0:Fresh) ; #3:Msg), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#2:Sessionkey))
(< 1 . 6 . 3 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI
| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 > (
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b))
    !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) inI
| 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI
| 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 4 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) inI
| 
-(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI
| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 6 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #5:Msg), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #5:Msg) inI
| 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #5:Msg), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
< 1 . 6 . 7 . 12 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI
| 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 659 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 5 . 5 . 2 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; #2:Msg ; n(b, #0:Fresh)), 
   +(#2:Msg ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #3:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#3:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#2:Msg ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(#4:Msg ; #2:Msg ; n(b, #0:Fresh)) inI
| 
-(#4:Msg ; #2:Msg ; n(b, #0:Fresh)), 
+(#2:Msg ; n(b, #0:Fresh)), 
-(#2:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#3:Sessionkey), 
+(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#3:Sessionkey))
(< 1 . 5 . 5 . 2 . 5 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, #2:Msg ; n(b, #0:Fresh))), 
   +(#2:Msg ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#3:Sessionkey), 
   +(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #3:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#3:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#2:Msg ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
e(#4:Key, #2:Msg ; n(b, #0:Fresh)) inI
| 
-(#4:Key), 
-(e(#4:Key, #2:Msg ; n(b, #0:Fresh))), 
+(#2:Msg ; n(b, #0:Fresh)), 
-(#2:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#3:Sessionkey), 
+(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#3:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#4:Key),
ghost(#3:Sessionkey))
(< 1 . 5 . 5 . 3 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; n(b, #0:Fresh) ; #3:Msg), 
   +(n(b, #0:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Msg) !inI,
(#4:Msg ; n(b, #0:Fresh) ; #3:Msg) inI
| 
-(#4:Msg ; n(b, #0:Fresh) ; #3:Msg), 
+(n(b, #0:Fresh) ; #3:Msg), 
-(n(b, #0:Fresh) ; #3:Msg), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#2:Sessionkey))
(< 1 . 5 . 5 . 3 . 4 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(b, #0:Fresh) ; #3:Msg) ; #4:Msg), 
   +(n(b, #0:Fresh) ; #3:Msg), nil]  & 
:: #0:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Msg) !inI,
((n(b, #0:Fresh) ; #3:Msg) ; #4:Msg) inI
| 
-((n(b, #0:Fresh) ; #3:Msg) ; #4:Msg), 
+(n(b, #0:Fresh) ; #3:Msg), 
-(n(b, #0:Fresh) ; #3:Msg), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#2:Sessionkey))
(< 1 . 5 . 5 . 3 . 6 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, n(b, #0:Fresh) ; #3:Msg)), 
   +(n(b, #0:Fresh) ; #3:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#2:Sessionkey), 
   +(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #0:Fresh) ; #3:Msg), 
   +(n(b, #0:Fresh)), nil]  & 
:: #0:Fresh,#5:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#2:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(n(b, #0:Fresh) ; #3:Msg) !inI,
e(#4:Key, n(b, #0:Fresh) ; #3:Msg) inI
| 
-(#4:Key), 
-(e(#4:Key, n(b, #0:Fresh) ; #3:Msg)), 
+(n(b, #0:Fresh) ; #3:Msg), 
-(n(b, #0:Fresh) ; #3:Msg), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#2:Sessionkey), 
+(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#2:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#4:Key),
ghost(#2:Sessionkey))
(< 1 . 6 . 3 . 6 . 3 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) inI
| 
-(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 4 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI,
(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)) inI
| 
-(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg) inI
| 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 6 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #5:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #5:Msg) inI
| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #5:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 12 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI
| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 2 > (
:: #1:Fresh ::
[ nil, 
   +(a ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ;
    e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))),
    nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
   +(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)),
    nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
   -(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ;
    e(seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#3:UName, #0:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)) !inI,
(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)) !inI,
(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b))
    !inI,
(a ; n(a, #1:Fresh)) inI
| 
-(a ; n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
-(a ; n(a, #1:Fresh) ; b ; n(b, #2:Fresh)), 
+(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #2:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
-(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#3:UName, #0:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #0:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #0:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 8 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#3:UName, #2:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#3:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))),
    nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#3:UName, #2:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#3:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#3:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #2:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b))
    !inI,
(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) inI
| 
-(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #2:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#3:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#3:UName, #2:Fresh)), n(b, #4:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#3:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#3:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg) inI
| 
-(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
+(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 4 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI,
(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) inI
| 
-(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 13 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI
| 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 6{1} > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg) inI,(
#5:Msg != e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)),(
#6:Msg != e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))),
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) != e(mkey(
    s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; #6:Msg
| 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 4 . 5{1} > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #6:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #6:Msg) inI,(
#5:Msg != e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))),(
#6:Msg != e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)),
(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) != e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ;
    #6:Msg
| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #6:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 4 . 5{2} > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(mkey(s,
    #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(mkey(s,
    #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(mkey(s,
    #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)) inI
| 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(mkey(s,
    #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(mkey(s,
    #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 . 6 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg) inI
| 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 . 13 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI
| 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 12 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(i ; n(i, #2:Fresh)) | 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(i, #2:Fresh)), 
   +(a ; n(i, #2:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) | 
   -(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey, n(
    b, #1:Fresh) ; n(i, #2:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) inI,
(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) inI
| 
+(mkey(i, s)), 
-(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 12 . 12 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#5:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI
| 
-(#5:Key), 
-(e(#5:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#5:Key))
< 1 . 6 . 7 . 12 . 16 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #4:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
n(#2:UName, #3:Fresh) inI,
mkey(s, #2:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI
| 
-(#0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #4:UName)
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 1269 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 5 . 5 . 2 . 3 . 2 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
   +(#2:Msg ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
   +(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#2:Msg ; n(b, #0:Fresh)) !inI,
(#3:Msg ; #2:Msg ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
(#5:Msg ; #3:Msg ; #2:Msg ; n(b, #0:Fresh)) inI
| 
-(#5:Msg ; #3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
+(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
-(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
+(#2:Msg ; n(b, #0:Fresh)), 
-(#2:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 2 . 3 . 3 > (
:: nil ::
[ nil | 
   -(n(b, #0:Fresh)), 
   -(#1:Nonce), 
   +(#1:Nonce ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Msg ; n(b, #0:Fresh)), 
   +(n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
   +(#2:Msg ; n(b, #0:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Nonce ; n(b, #0:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -((#3:Msg ; #2:Msg ; n(b, #0:Fresh)) ; #5:Msg), 
   +(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), nil]  & 
:: #0:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #1:Nonce), 
   +(a ; #1:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #0:Fresh) ; #1:Nonce)) | 
   -(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), nil] )
| 
#1:Nonce !inI,
n(b, #0:Fresh) !inI,
e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh)) !inI,
(#2:Msg ; n(b, #0:Fresh)) !inI,
(#3:Msg ; #2:Msg ; n(b, #0:Fresh)) !inI,
(#1:Nonce ; n(b, #0:Fresh)) !inI,
((#3:Msg ; #2:Msg ; n(b, #0:Fresh)) ; #5:Msg) inI
| 
-((#3:Msg ; #2:Msg ; n(b, #0:Fresh)) ; #5:Msg), 
+(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
-(#3:Msg ; #2:Msg ; n(b, #0:Fresh)), 
+(#2:Msg ; n(b, #0:Fresh)), 
-(#2:Msg ; n(b, #0:Fresh)), 
+(n(b, #0:Fresh)), 
generatedByIntruder(#1:Nonce), 
-(n(b, #0:Fresh)), 
-(#1:Nonce), 
+(#1:Nonce ; n(b, #0:Fresh)), 
-(#1:Nonce ; n(b, #0:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh))), 
-(e(#4:Sessionkey, #1:Nonce ; n(b, #0:Fresh)))
| ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 2 . 5 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #2:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #2:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), nil] )
| 
#3:Nonce !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:Msg ; n(b, #2:Fresh)) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#3:Nonce ; n(b, #2:Fresh)) !inI,
(#5:Msg ; e(#0:Key, #1:Msg ; n(b, #2:Fresh))) inI
| 
-(#5:Msg ; e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
+(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
generatedByIntruder(#3:Nonce), 
-(n(b, #2:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #2:Fresh)), 
-(#3:Nonce ; n(b, #2:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh)))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 2 . 5 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
   +(#1:Msg ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #2:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#1:Msg ; n(b, #2:Fresh)), 
   +(n(b, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #2:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #5:Msg), 
   +(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #2:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), nil] )
| 
#3:Nonce !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:Msg ; n(b, #2:Fresh)) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh)) !inI,
(#1:Msg ; n(b, #2:Fresh)) !inI,
(#3:Nonce ; n(b, #2:Fresh)) !inI,
(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #5:Msg) inI
| 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh)) ; #5:Msg), 
+(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, #1:Msg ; n(b, #2:Fresh))), 
+(#1:Msg ; n(b, #2:Fresh)), 
-(#1:Msg ; n(b, #2:Fresh)), 
+(n(b, #2:Fresh)), 
generatedByIntruder(#3:Nonce), 
-(n(b, #2:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #2:Fresh)), 
-(#3:Nonce ; n(b, #2:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #2:Fresh)))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 3 . 6 . 2 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #1:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #1:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil] )
| 
#3:Nonce !inI,
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh) ; #2:Msg) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)) !inI,
(#3:Nonce ; n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
(#5:Msg ; e(#0:Key, n(b, #1:Fresh) ; #2:Msg)) inI
| 
-(#5:Msg ; e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
generatedByIntruder(#3:Nonce), 
-(n(b, #1:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #1:Fresh)), 
-(#3:Nonce ; n(b, #1:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 5 . 5 . 3 . 6 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
   +(n(b, #1:Fresh) ; #2:Msg), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh)), 
   -(#3:Nonce), 
   +(#3:Nonce ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#3:Nonce ; n(b, #1:Fresh)), 
   -(#4:Sessionkey), 
   +(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(b, #1:Fresh) ; #2:Msg), 
   +(n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #5:Msg), 
   +(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; #3:Nonce), 
   +(a ; #3:Nonce ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #4:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#4:Sessionkey, n(b, #1:Fresh) ; #3:Nonce)) | 
   -(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), nil] )
| 
#3:Nonce !inI,
n(b, #1:Fresh) !inI,
e(#0:Key, n(b, #1:Fresh) ; #2:Msg) !inI,
e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)) !inI,
(#3:Nonce ; n(b, #1:Fresh)) !inI,
(n(b, #1:Fresh) ; #2:Msg) !inI,
(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #5:Msg) inI
| 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg) ; #5:Msg), 
+(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
-(#0:Key), 
-(e(#0:Key, n(b, #1:Fresh) ; #2:Msg)), 
+(n(b, #1:Fresh) ; #2:Msg), 
-(n(b, #1:Fresh) ; #2:Msg), 
+(n(b, #1:Fresh)), 
generatedByIntruder(#3:Nonce), 
-(n(b, #1:Fresh)), 
-(#3:Nonce), 
+(#3:Nonce ; n(b, #1:Fresh)), 
-(#3:Nonce ; n(b, #1:Fresh)), 
-(#4:Sessionkey), 
+(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh))), 
-(e(#4:Sessionkey, #3:Nonce ; n(b, #1:Fresh)))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 6 . 3 . 6 . 3 . 3 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) inI,
(#6:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)) inI
| 
-(#6:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 3 . 12 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI
| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 3 . 5{1} > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg) inI,(
#5:Msg != e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)),(
#6:Msg != e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)),
(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) != e(mkey(s,
    #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; #6:Msg
| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(#5:Msg ; e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 3 . 5{2} > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)) inI
| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 4 . 5{1} > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)) inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #6:Msg) inI,(
#5:Msg != e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)),(
#6:Msg != e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)),
(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)) != e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #6:Msg
| 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #6:Msg), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(#5:Msg ; e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ;
    #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 5 . 5 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil]  & 
:: #4:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg) inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg) inI
| 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    #6:Msg), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #7:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #7:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 5 . 12 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg) inI
| 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; #5:Msg), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 12 . 3 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i,
    #0:Fresh) ; #1:Sessionkey ; #2:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(i ; n(i, #0:Fresh)) | 
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(
    #1:Sessionkey, n(b, #4:Fresh) ; n(i, #0:Fresh))), 
   +(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #4:Fresh))), nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(i, #0:Fresh)), 
   +(a ; n(i, #0:Fresh) ; b ; n(b, #3:Fresh)) | 
   -(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i,
    #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(
    #1:Sessionkey, n(b, #4:Fresh) ; n(i, #0:Fresh))), 
   -(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #4:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #4:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) !inI,
(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i,
    #0:Fresh) ; #1:Sessionkey ; #2:UName)) !inI,
(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey, n(
    b, #4:Fresh) ; n(i, #0:Fresh))) !inI,
e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) inI,
(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) inI
| 
+(mkey(i, s)), 
-(n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i,
    #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
-(e(mkey(b, s), n(b, #3:Fresh) ; #1:Sessionkey ; a) ; e(mkey(i, s), n(i,
    #0:Fresh) ; #1:Sessionkey ; #2:UName)), 
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey,
    n(b, #4:Fresh) ; n(i, #0:Fresh))), 
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Sessionkey ; #2:UName) ; e(#1:Sessionkey,
    n(b, #4:Fresh) ; n(i, #0:Fresh))), 
+(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #4:Fresh))), 
-(e(#1:Sessionkey, n(i, #0:Fresh) ; n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 6 . 12 . 12 > (
:: nil ::
[ nil | 
   -(#5:Key), 
   -(e(#5:Key, n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil]  & 
:: #4:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
mkey(s, #0:UName) inI,
e(#5:Key, n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI
| 
-(#5:Key), 
-(e(#5:Key, n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #6:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #6:Fresh)))
| ghost(#5:Key))
(< 1 . 6 . 3 . 6 . 12 . 16 > (
:: nil ::
[ nil | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(#2:Sessionkey ; #3:UName), 
   -(n(#0:UName, #1:Fresh)), 
   +(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
   -(mkey(s, #0:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)),
    nil]  & 
:: #1:Fresh ::
[ nil, 
   +(#0:UName ; n(#0:UName, #1:Fresh)) | 
   -(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   +(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(#0:UName, #1:Fresh)), 
   +(a ; n(#0:UName, #1:Fresh) ; b ; n(b, #4:Fresh)) | 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName),
    n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
   +(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ;
    e(#2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
   -(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), nil] )
| 
e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)) !inI,
(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))) !inI,
n(#0:UName, #1:Fresh) inI,
mkey(s, #0:UName) inI,
e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) inI
| 
-(#2:Sessionkey ; #3:UName), 
-(n(#0:UName, #1:Fresh)), 
+(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName), 
-(mkey(s, #0:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; #2:Sessionkey ; a) ; e(mkey(s, #0:UName), n(
    #0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName)), 
+(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
-(e(mkey(s, #0:UName), n(#0:UName, #1:Fresh) ; #2:Sessionkey ; #3:UName) ; e(
    #2:Sessionkey, n(b, #5:Fresh) ; n(#0:UName, #1:Fresh))), 
+(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh))), 
-(e(#2:Sessionkey, n(#0:UName, #1:Fresh) ; n(b, #5:Fresh)))
| ghost(#2:Sessionkey ; #3:UName))
(< 1 . 6 . 3 . 8 . 2 . 1 > (
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil | 
   +(a ; n(a, #0:Fresh)), 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI
| 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 2 . 3 > (
:: nil ::
[ nil | 
   -(#0:Msg ; a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a ; n(a, #1:Fresh)) | 
   -(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   +(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))),
    nil]  & 
:: #3:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   +(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)),
    nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil | 
   -(a ; n(a, #1:Fresh)), 
   +(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
   -(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)) !inI,
(a ; n(a, #1:Fresh)) !inI,
(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)) !inI,
(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b))
    !inI,
(#0:Msg ; a ; n(a, #1:Fresh)) inI
| 
-(#0:Msg ; a ; n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh)), 
-(a ; n(a, #1:Fresh)), 
+(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
-(a ; n(a, #1:Fresh) ; b ; n(b, #5:Fresh)), 
+(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #5:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
-(e(mkey(a, s), n(a, #1:Fresh) ; seskey(a, b, n(#2:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#2:UName, #3:Fresh)), n(b, #4:Fresh) ; n(a, #1:Fresh))), 
+(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh))), 
-(e(seskey(a, b, n(#2:UName, #3:Fresh)), n(a, #1:Fresh) ; n(b, #4:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 2 . 6 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b))
    !inI,
n(a, #0:Fresh) inI
| 
-(n(a, #0:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 8 . 3 > (
:: nil ::
[ nil | 
   -(#2:Msg ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))),
    nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b))
    !inI,
(#2:Msg ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) inI
| 
-(#2:Msg ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))), 
-(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 3 . 8 . 8 . 4 > (
:: nil ::
[ nil | 
   -(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   -(a), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg), 
   +(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
   +(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a ; n(a, #0:Fresh)) | 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))),
    nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) | 
   -(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ;
    e(seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b))
    !inI,
((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg) inI
| 
-((n(a, #0:Fresh) ; b ; n(b, #1:Fresh)) ; #2:Msg), 
+(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #1:Fresh)), 
+(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #1:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#4:UName, #3:Fresh)) ; b) ; e(
    seskey(a, b, n(#4:UName, #3:Fresh)), n(b, #5:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh))), 
-(e(seskey(a, b, n(#4:UName, #3:Fresh)), n(a, #0:Fresh) ; n(b, #5:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 . 5 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)) | 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg) inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg) inI
| 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #6:Msg), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
+(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 . 7 > (
:: nil ::
[ nil | 
   -(#5:Msg), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
#5:Msg !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI
| 
generatedByIntruder(#5:Msg), 
-(#5:Msg), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
+(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 . 12 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)) | 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg) inI
| 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
+(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 . 13 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce) ; e(#0:Sessionkey, n(b,
    #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#11:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #11:Fresh)) | 
   -(e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)), 
   +(e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce) ; e(#0:Sessionkey, n(b,
    #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #7:Fresh,#9:Fresh ::
[ nil, 
   -(#10:UName ; #8:Nonce), 
   +(#10:UName ; #8:Nonce ; #6:UName ; n(#6:UName, #9:Fresh)) | 
   -(e(mkey(s, #6:UName), n(#6:UName, #9:Fresh) ; #5:Sessionkey ; #10:UName) ;
    e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a)), 
   +(e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
(e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce) ; e(#0:Sessionkey, n(b,
    #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(mkey(s, #6:UName), n(#6:UName, #9:Fresh) ; #5:Sessionkey ; #10:UName) ; e(
    mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a)) inI
| 
-(e(mkey(s, #6:UName), n(#6:UName, #9:Fresh) ; #5:Sessionkey ; #10:UName) ; e(
    mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a)), 
+(e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)), 
-(e(mkey(b, s), n(b, #11:Fresh) ; #0:Sessionkey ; a) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)), 
+(e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce) ; e(#0:Sessionkey, n(b,
    #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce) ; e(#0:Sessionkey, n(b,
    #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 2 . 3{1} > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)) | 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) inI,
(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg) inI,(
#5:Msg != e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)),(
#6:Msg != e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a)),
(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)) != e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg
| 
-(#6:Msg ; e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ;
    #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
+(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 13 . 4 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(i ; n(i, #2:Fresh)) | 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(i, #2:Fresh)), 
   +(a ; n(i, #2:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) | 
   -(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) !inI,
e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey, n(
    b, #1:Fresh) ; n(i, #2:Fresh))) !inI,
(#4:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) inI,
(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) inI
| 
+(mkey(i, s)), 
-(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
-(#4:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 3 . 13 . 13 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI
| 
-(#6:Key), 
-(e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#6:Key))
(< 1 . 6 . 7 . 3 . 13 . 18 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #4:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
n(#2:UName, #3:Fresh) inI,
mkey(s, #2:UName) inI,
(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI
| 
-(#0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #4:UName))
(< 1 . 6 . 7 . 5 . 6 . 15 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#12:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #12:Fresh)), 
   -(e(mkey(b, s), n(b, #12:Fresh) ; #0:Sessionkey ; a) ; #13:Msg), 
   +(#13:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #8:Fresh,#10:Fresh ::
[ nil, 
   -(#11:UName ; #9:Nonce), 
   +(#11:UName ; #9:Nonce ; #7:UName ; n(#7:UName, #10:Fresh)) | 
   -(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ;
    e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI,
(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ; e(
    mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)) inI
| 
-(e(mkey(s, #7:UName), n(#7:UName, #10:Fresh) ; #6:Sessionkey ; #11:UName) ; e(
    mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #6:Sessionkey, n(#7:UName, #8:Fresh) ; #9:Nonce)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 . 6 . 16 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(
    #5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce)), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #9:Msg), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#12:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #12:Fresh)), 
   -(e(mkey(b, s), n(b, #12:Fresh) ; #0:Sessionkey ; a) ; #13:Msg), 
   +(#13:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #7:Fresh,#10:Fresh ::
[ nil, 
   -(#11:UName ; #8:Nonce), 
   +(#11:UName ; #8:Nonce ; #6:UName ; n(#6:UName, #10:Fresh)) | 
   -(e(mkey(s, #6:UName), n(#6:UName, #10:Fresh) ; #5:Sessionkey ; #11:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(
    #5:Sessionkey, n(#6:UName, #7:Fresh) ; #8:Nonce)), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(#5:Sessionkey, n(
    #6:UName, #7:Fresh) ; #8:Nonce)) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #9:Msg) inI,
(e(mkey(s, #6:UName), n(#6:UName, #10:Fresh) ; #5:Sessionkey ; #11:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) inI
| 
-(e(mkey(s, #6:UName), n(#6:UName, #10:Fresh) ; #5:Sessionkey ; #11:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(#5:Sessionkey,
    n(#6:UName, #7:Fresh) ; #8:Nonce)), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    #9:Msg), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; e(#5:Sessionkey,
    n(#6:UName, #7:Fresh) ; #8:Nonce)), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 . 13 . 4 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) ; #4:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(i ; n(i, #2:Fresh)) | 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(i, #2:Fresh)), 
   +(a ; n(i, #2:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) | 
   -(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) !inI,
e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey, n(
    b, #1:Fresh) ; n(i, #2:Fresh))) !inI,
(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) ; #4:Msg) inI
| 
+(mkey(i, s)), 
-(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) ; #4:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)))
| 
nil)
(< 1 . 6 . 7 . 5 . 13 . 13 > (
:: nil ::
[ nil | 
   -(#6:Key), 
   -(e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #0:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI
| 
-(#6:Key), 
-(e(#6:Key, n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#6:Key))
(< 1 . 6 . 7 . 5 . 13 . 18 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #4:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
   +(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
n(#2:UName, #3:Fresh) inI,
mkey(s, #2:UName) inI,
(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg) inI
| 
-(#0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) ; #5:Msg), 
+(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #4:UName))
(< 1 . 6 . 7 . 12 . 3 . 8 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(i ; n(i, #2:Fresh)) | 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#5:Fresh ::
[ nil, 
   -(a ; n(i, #2:Fresh)), 
   +(a ; n(i, #2:Fresh) ; b ; n(b, #5:Fresh)), 
   -(e(mkey(b, s), n(b, #5:Fresh) ; #0:Sessionkey ; a) ; #6:Msg), 
   +(#6:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) | 
   -(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey, n(
    b, #1:Fresh) ; n(i, #2:Fresh))) !inI,
e(#4:Key, n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) inI
| 
-(#4:Key), 
-(e(#4:Key, n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
+(mkey(i, s)), 
-(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)))
| ghost(#4:Key))
(< 1 . 6 . 7 . 12 . 3 . 11 > (
:: nil ::
[ nil | 
   +(mkey(i, s)), nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #3:UName), 
   -(n(i, #2:Fresh)), 
   +(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
   -(mkey(i, s)), 
   +(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(i ; n(i, #2:Fresh)) | 
   -(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
   +(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#4:Fresh ::
[ nil, 
   -(a ; n(i, #2:Fresh)), 
   +(a ; n(i, #2:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; #0:Sessionkey ; a) ; #5:Msg), 
   +(#5:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))) | 
   -(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), nil] )
| 
mkey(i, s) !inI,
e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) !inI,
(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey, n(
    b, #1:Fresh) ; n(i, #2:Fresh))) !inI,
n(i, #2:Fresh) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh)) inI
| 
-(#0:Sessionkey ; #3:UName), 
-(n(i, #2:Fresh)), 
+(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
+(mkey(i, s)), 
-(n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName), 
-(mkey(i, s)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName)), 
+(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
-(e(mkey(i, s), n(i, #2:Fresh) ; #0:Sessionkey ; #3:UName) ; e(#0:Sessionkey,
    n(b, #1:Fresh) ; n(i, #2:Fresh))), 
+(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(i, #2:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #3:UName))
(< 1 . 6 . 7 . 12 . 12 . 5 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ;
    e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
   -(mkey(s, #1:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)),
    nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ;
    e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #3:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
| 
e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
mkey(s, #1:UName) inI,
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) inI,
(#6:Msg ; e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)) inI
| 
-(#6:Msg ; e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(#0:Key), 
-(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(mkey(s, #1:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
| ghost(#0:Key))
(< 1 . 6 . 7 . 12 . 12 . 8 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ;
    e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
   -(mkey(s, #1:UName)), 
   +(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)),
    nil]  & 
:: nil ::
[ nil | 
   -(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; #6:Msg), 
   +(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(#1:UName ; n(#1:UName, #2:Fresh)) | 
   -(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ;
    e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
   +(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil]  & 
:: #5:Fresh,#7:Fresh ::
[ nil, 
   -(a ; n(#1:UName, #2:Fresh)), 
   +(a ; n(#1:UName, #2:Fresh) ; b ; n(b, #7:Fresh)), 
   -(e(mkey(b, s), n(b, #7:Fresh) ; #3:Sessionkey ; a) ; #8:Msg), 
   +(#8:Msg ; e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) | 
   -(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), nil] )
| 
e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)) !inI,
e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))) !inI,
mkey(s, #1:UName) inI,
e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh)) inI,
(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; #6:Msg) inI
| 
-(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; #6:Msg), 
+(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(#0:Key), 
-(e(#0:Key, n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName), 
-(mkey(s, #1:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
-(e(#3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName)), 
+(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
-(e(mkey(s, #1:UName), n(#1:UName, #2:Fresh) ; #3:Sessionkey ; #4:UName) ; e(
    #3:Sessionkey, n(b, #5:Fresh) ; n(#1:UName, #2:Fresh))), 
+(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh))), 
-(e(#3:Sessionkey, n(#1:UName, #2:Fresh) ; n(b, #5:Fresh)))
| ghost(#0:Key))
(< 1 . 6 . 7 . 12 . 16 . 4 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #4:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
n(#2:UName, #3:Fresh) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
(#5:Msg ; n(#2:UName, #3:Fresh)) inI
| 
-(#5:Msg ; n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh)), 
-(#0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #4:UName))
< 1 . 6 . 7 . 12 . 16 . 7 > (
:: nil ::
[ nil | 
   -(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Sessionkey ; #4:UName), 
   -(n(#2:UName, #3:Fresh)), 
   +(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #5:Msg), 
   +(n(#2:UName, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
   -(mkey(s, #2:UName)), 
   +(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)),
    nil]  & 
:: #3:Fresh ::
[ nil, 
   +(#2:UName ; n(#2:UName, #3:Fresh)) | 
   -(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ;
    e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
   +(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil]  & 
:: #1:Fresh,#6:Fresh ::
[ nil, 
   -(a ; n(#2:UName, #3:Fresh)), 
   +(a ; n(#2:UName, #3:Fresh) ; b ; n(b, #6:Fresh)), 
   -(e(mkey(b, s), n(b, #6:Fresh) ; #0:Sessionkey ; a) ; #7:Msg), 
   +(#7:Msg ; e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) | 
   -(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), nil] )
| 
n(#2:UName, #3:Fresh) !inI,
e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)) !inI,
e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) !inI,
(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))) !inI,
mkey(s, #2:UName) inI,
e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh)) inI,
(n(#2:UName, #3:Fresh) ; #5:Msg) inI
| 
-(n(#2:UName, #3:Fresh) ; #5:Msg), 
+(n(#2:UName, #3:Fresh)), 
-(#0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh)), 
+(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName), 
-(mkey(s, #2:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
-(e(#0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName)), 
+(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
-(e(mkey(s, #2:UName), n(#2:UName, #3:Fresh) ; #0:Sessionkey ; #4:UName) ; e(
    #0:Sessionkey, n(b, #1:Fresh) ; n(#2:UName, #3:Fresh))), 
+(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh))), 
-(e(#0:Sessionkey, n(#2:UName, #3:Fresh) ; n(b, #1:Fresh)))
| ghost(#0:Sessionkey ; #4:UName)
==========================================
reduce in MAUDE-NPA : initials(5) .
rewrites: 1696 in 4ms cpu (9ms real) (424000 rewrites/second)
result ShortIdSystem: < 1 . 6 . 3 . 8 . 2 . 1 > (
:: #2:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   +(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)),
    nil]  & 
:: #0:Fresh ::
[ nil | 
   +(a ; n(a, #0:Fresh)), 
   -(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   +(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil]  & 
:: #3:Fresh,#4:Fresh ::
[ nil | 
   -(a ; n(a, #0:Fresh)), 
   +(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
   -(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ;
    e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
   +(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ;
    e(seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
   -(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))),
    nil] )
| 
e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)) !inI,
(a ; n(a, #0:Fresh)) !inI,
(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)) !inI,
(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh)))
    !inI,
(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)) !inI
| 
+(a ; n(a, #0:Fresh)), 
-(a ; n(a, #0:Fresh)), 
+(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
-(a ; n(a, #0:Fresh) ; b ; n(b, #4:Fresh)), 
+(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
-(e(mkey(b, s), n(b, #4:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; a) ; e(
    mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b)), 
+(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
-(e(mkey(a, s), n(a, #0:Fresh) ; seskey(a, b, n(#1:UName, #2:Fresh)) ; b) ; e(
    seskey(a, b, n(#1:UName, #2:Fresh)), n(b, #3:Fresh) ; n(a, #0:Fresh))), 
+(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh))), 
-(e(seskey(a, b, n(#1:UName, #2:Fresh)), n(a, #0:Fresh) ; n(b, #3:Fresh)))
| 
nil
Bye.
Tue Jun  2 19:32:54 CEST 2020
