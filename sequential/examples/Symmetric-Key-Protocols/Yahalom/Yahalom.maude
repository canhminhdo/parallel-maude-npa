---  Yahalom Protocol

---------------------------------------------------
--- We modify only the relevant MAUDE-NPA modules
---------------------------------------------------

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts Msg, Fresh, Public
  protecting DEFINITION-PROTOCOL-RULES .

  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort Msg and Fresh are special and imported
  --- * Every sort must be a subsort of Msg
  --- * No sort can be a supersort of Msg
  ----------------------------------------------------------

  --- Sort Information
  sorts  UName SName Name Key Nonce  Masterkey Sessionkey .
  subsort Name Nonce  Key < Msg .
  subsort Masterkey  Sessionkey < Key .
  subsort SName UName < Name .
  subsort Name < Public . --- This is quite relevant and necessary
  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .
  op mr : Name Fresh -> Nonce [frozen] . --- Nonce, run identifier

  --- User names
  ops a b i : -> UName .

  --- Server name
  op s : ->  SName .

  --- MKey
  op mkey : Name Name -> Masterkey [frozen] .

  --- Seskey
  op seskey : Name Name Nonce -> Sessionkey [frozen] .

 ---encrypt
  op e : Key Msg -> Msg [frozen] .
  op d : Key Msg -> Msg  [frozen] .

  --- successor
  op p : Msg -> Msg [frozen] .

  --- Concatenation
  op _;_ : Msg Msg -> Msg [frozen gather (e E)] .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties
  --- of your protocol
  ----------------------------------------------------------

 eq d(K:Key, e(K:Key, Z:Msg )) = Z:Msg [variant] .
 eq e(K:Key, d(K:Key, Z:Msg )) = Z:Msg [variant] .


endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands
  --- of your protocol
  ----------------------------------------------------------

  var A B  : UName .
  var r r' r'' r''' r# r## rM : Fresh .
  var SID : Id .
  vars NA NB  : Nonce .
  vars M1 M2 M N MA MB : Msg .
  var K : Key .
  var SK : Sessionkey .

  eq STRANDS-DOLEVYAO
  =  :: nil :: [ nil | +(A), nil ]  &
     :: nil :: [ nil | +(s), nil ] &
     :: nil :: [ nil | -(K), -(M), +(d(K,M)), nil ] &
     :: nil :: [ nil | -(K), -(M), +(e(K,M)), nil ] &
     :: nil :: [ nil | -(N), -(M), +(M ; N) , nil ] &
     :: nil :: [ nil | -(M ; N), +(M) , nil ] &
     :: nil :: [ nil | -(M ; N), +(N) , nil ] &
     :: nil :: [ nil | -(M), +(p(M)), nil ] &
     :: nil :: [ nil | -(p(M)), +(M), nil ] &
     :: nil :: [ nil | +(mkey(i,A)), nil ]  &
     :: nil :: [ nil | +(mkey(A,i)), nil ]  &
     :: nil :: [ nil | +(mkey(i,s)), nil ]
   [nonexec] .


  eq STRANDS-PROTOCOL
  ---A->B: A,Na
  ---B->S: B,E(Kbs:A,Na,Nb)
  ---S->A: E(Kas:B, Kab, Na, Nb), E(Kbs:A, Kab)
  ---A->B: E(Kbs:A, Kab) E(Kab:Nb)
   = :: r ::
 --- Alice's Strand
     [ nil | +(A ; n(A,r)),
             -(e(mkey(A,s) , B ; SK ; n(A,r) ; NB) ; MB),
             +(MB ; e(SK , NB)) , nil ]
   &
     :: r ::
 ---Bob's Strand
     [ nil | -(A ; NA),
             +(B ; e(mkey(B,s) , A ; NA ; n(B,r))),
             -(e(mkey(B,s) , A ; SK) ; e(SK , n(B,r))) , nil ]
   &
     :: r ::
---Server's Strand
    [ nil |  -(B ; e(mkey(B,s) , A ; NA ; NB)),
             +( e(mkey(A,s) , B ; seskey(A , B , n(s,r)) ; NA ; NB)
              ; e(mkey(B,s) , A ; seskey(A , B , n(s,r)))) , nil ]
  [nonexec] .

eq ATTACK-STATE(0) =
    :: r ::
--- A normal execution of the protocol
    [ nil ,  -(a ; NA),
          	 +(b ; e(mkey(b,s) , a ; NA ; n(b,r))),
          	 -(e(mkey(b,s) , a ; SK) ; e(SK , n(b,r))) | nil ]
     || empty
     || nil
     || nil
     || nil
[nonexec] .

endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
--- fmod MAUDE-NPA is
---   protecting GENERIC-TOOLS .
--- endfm
