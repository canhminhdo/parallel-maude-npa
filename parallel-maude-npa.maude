load maude-npa.maude

mod MAUDE-NPA-EXT is
    pr MAUDE-NPA .

    sort IdSystemSetPair .
    op <_,_> : IdSystemSet IdSystemSet -> IdSystemSetPair .
    op errIdSystemSet : -> IdSystemSet .

    vars M : Module .
    vars GS : GrammarList .
    vars F : Filters .
    vars BStep Nodes Sess : Bound .
    vars Rem? : Bool .
    vars IS : IdSystem .
    vars IST IST' INIT HistoryIST : IdSystemSet .
    vars IST1 IST2 IST3 IST4 IST5 IST6 IST7 IST8 : IdSystemSet .
    vars Pid : Nat .

    op filterStates : Filters IdSystemSet IdSystemSet -> IdSystemSet .
    --- eq filterStates(F, HistoryIST, IST) = filterSMsgListX(F,filterIdX(F, simplify-theSystemSet(F,HistoryIST, IST))) .
    eq filterStates(F, HistoryIST, IST) = simplifyByImplicationL(IST) .

    op searchState-CheckInit : Module Bound IdSystemSet IdSystemSetPair IdSystemSet -> IdSystemSetPair .
    eq searchState-CheckInit(M, Sess, HistoryIST, < INIT, IST' >, empty) = < INIT, IST' > .
    eq searchState-CheckInit(M, Sess,HistoryIST, < INIT, IST' >, (IS IST))
    = if Sess =/= unbounded and-then countSessions(IS) > Sess
    then searchState-CheckInit(M, Sess, HistoryIST, < INIT, IST' >, IST)
    else if isInitialM(M,IS)
        then
            searchState-CheckInit(M, Sess, HistoryIST, < INIT IS, IST' >, IST)
        else searchState-CheckInit(M, Sess, HistoryIST,
            < INIT, if isNFSystem(M,HistoryIST,IS) then IST' else (IS IST') fi >,
            IST)
        fi
    fi .

    op pM : -> Module .
    op pGS : -> GrammarList .
    op pF : -> Filters .

    --- parallel back narrowing wrapper function
    op nextBackNarrowParallel* : Nat GrammarList Bound IdSystemSet IdSystemSet -> IdSystemSet [memo] .
    eq nextBackNarrowParallel*(Pid, GS, Nodes, HistoryIST, IST) = nextBackNarrowParallel(Pid, pM, GS, pF, Nodes, HistoryIST, IST) .

    op nextBackNarrowParallel : Nat Module GrammarList Filters Bound IdSystemSet IdSystemSet -> IdSystemSet [memo] .
    ceq nextBackNarrowParallel(Pid,M,GS,F,Nodes,HistoryIST,IST)
    = IST'
    if IST' := filterSMsgListX(F,
        filterIdX(F,
            simplify-theSystemSet(F,HistoryIST,
                filter-eachSystem#Top(F,M,GS, --- filter systems with grammars, never patterns, ...
                    simplify-eachSystem#Top(F,M, --- always simplify before filtering
                        simplifyGhost#Top(F, --- simplify Ghost
                            createGhost#Top(M,F, --- create Ghost again
                                reactivateGhost#Top(F, --- if messages are not ghost messages anymore, reactive the messages
                                    tryUnificationofKnowledge(M, --- create and check ghosts before and after
                                        nextBackNarrow*(M,GS,F,Nodes,empty,IST)
                                    )
                                )
                            )
                        )
                    )
                )
            )
        )
    ) [print "Handling by Pid = " Pid] .

    --- eq nextBackNarrowParallel(Pid,M,GS,F,Nodes,HistoryIST,IST)
    --- = filterSMsgListX(F,
    ---     filterIdX(F,
    ---         simplify-theSystemSet(F,HistoryIST,
    ---             filter-eachSystem#Top(F,M,GS, --- filter systems with grammars, never patterns, ...
    ---                 simplify-eachSystem#Top(F,M, --- always simplify before filtering
    ---                     simplifyGhost#Top(F, --- simplify Ghost
    ---                         createGhost#Top(M,F, --- create Ghost again
    ---                             reactivateGhost#Top(F, --- if messages are not ghost messages anymore, reactive the messages
    ---                                 tryUnificationofKnowledge(M, --- create and check ghosts before and after
    ---                                     nextBackNarrow*(M,GS,F,Nodes,empty,IST)
    ---                                 )
    ---                             )
    ---                         )
    ---                     )
    ---                 )
    ---             )
    ---         )
    ---     )
    --- ) [print "Handling by Pid = " Pid] .
endm

load metaInterpreter.maude

view Worker from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

mod PARALLEL-CONFIG is
    pr MAUDE-NPA-EXT .
    pr META-INTERPRETER .
    pr SET{Worker} .

    sort Status .
    ops idle initializing initialized waiting suspending working stopping terminated : -> Status .
    op status :_ : Status -> Attribute [ctor format(m o o o)] .
    op m :_ : Module -> Attribute .
    op gs :_ : GrammarList -> Attribute .
    op filter :_ : Filters -> Attribute .
    op bStep :_ : Bound -> Attribute .
    op nodes :_ : Bound -> Attribute .
    op sess :_ : Bound -> Attribute .
    op rem :_ : Bool -> Attribute .
    op history :_ : IdSystemSet -> Attribute .
    op jobs :_ : IdSystemSet -> Attribute .
    op next :_ : IdSystemSet -> Attribute .
    op init :_ : IdSystemSet -> Attribute .
    op depth :_ : Nat -> Attribute . --- depth needs to be explored
    op nWorkers :_ : Nat -> Attribute [ctor format(! o o o)] .
    op workers :_ : Set{Worker} -> Attribute [ctor format(! o o o)] .
    op stopWorking : Oid Oid -> Msg [ctor msg format (b o)] .
    op ShortIdSystem:_ : IdSystemSet-or-Error -> Msg [ctor msg] .
    op initialize : Oid Oid Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet -> Msg [ctor msg format (b o)] .

    op Manager : -> Cid [ctor] .
    op aManager : -> Oid [ctor] .
    op npa : -> Oid [ctor] .

endm

mod PARALLEL-GENERIC-TOOL is
    pr PARALLEL-CONFIG .

    vars M : Module .
    vars GS : GrammarList .
    vars F : Filters .
    vars BStep Nodes Sess : Bound .
    vars Rem? : Bool .
    vars IS : IdSystem .
    vars IST IST' INIT HistoryIST : IdSystemSet .

    *** prun **********************
    op p-run : Nat Bound Filters Nat -> Configuration .
    op p-run : Nat Bound Nat -> Configuration .

    eq p-run(Attack:Nat,Depth:Bound, nWorker:Nat)
    = < aManager : Manager | nWorkers : nWorker:Nat, status : idle >
    toMsg(run[0](Attack:Nat,Depth:Bound,+parallel,unbounded)< unbounded >) .

    eq p-run(Attack:Nat,Depth:Bound,F:Filters,nWorker:Nat)
    = < aManager : Manager | nWorkers : nWorker:Nat, status : idle >
    toMsg(run[0](Attack:Nat,Depth:Bound,F:Filters,unbounded)< unbounded >) .

    op toMsg : IdSystemSet -> Msg .
    eq toMsg(< M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST >)
    = initialize(aManager, npa, M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST) .
endm

mod PARALLEL-MAUDE-NPA is
    pr PARALLEL-GENERIC-TOOL .

    vars O O' MI : Oid .
    var  A : AttributeSet .
    vars N D Pid : Nat .
    vars Nodes BStep Sess : Bound .
    vars Rem? : Bool .
    vars IST IST' IST'' INIT INIT' HistoryIST HistoryIST' : IdSystemSet .
    var IS : IdSystem .
    vars W : Set{Worker} .
    vars T T' : Term .
    var RT : Type .
    vars M M' M'' : Module .
    var GS : GrammarList .
    var F : Filters .

    crl [CreateWorkers] : < O : Manager |
        status : idle,
        nWorkers : N,
        A >
        initialize(O, O', M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST)
    => < O : Manager |
        status : initializing,
        nWorkers : N,
        workers : empty,
        m : M,
        gs : GS,
        filter : F,
        bStep : BStep,
        nodes : Nodes,
        sess : Sess,
        rem : Rem?,
        history : (HistoryIST IST'),
        jobs : IST',
        next : empty,
        init : INIT,
        depth : 1,
        A >
        produceInterpreter(O, N)
    if (< INIT, IST' >) := searchState-CheckInit(M, Sess, HistoryIST, < empty, empty > ,IST)
    [print "[CreateWorkers]"] .

    op produceInterpreter : Oid Nat -> Configuration .
    ceq produceInterpreter(O, N) = createInterpreter(interpreterManager, O, newProcess)
        produceInterpreter(O, sd(N, 1)) if N > 0 .
    eq produceInterpreter(O, N) = none [owise] .

    crl [CreatedWorker] : < O : Manager |
        status : initializing,
        nWorkers : N,
        workers : empty,
        m : M,
        gs : GS,
        filter : F,
        nodes : Nodes,
        jobs : IST,
        A >
        createdInterpreter(O, O', MI)
    => < O : Manager |
        status : initializing,
        nWorkers : N,
        workers : empty,
        m : M,
        gs : GS,
        filter : F,
        nodes : Nodes,
        jobs : IST,
        A >
        insertModule(MI, O, M'')
        if M' := upModule('MAUDE-NPA-EXT, true)
        /\ M'' := addEqs(
            (eq 'pM.Module = upTerm(M) [none] . )
            --- (eq 'pGS.GrammarList = upTerm(GS) [none] . )
            (eq 'pF.Filters = upTerm(F) [none] . )
            , M'
        )
        [print "[CreatedWorker]"] .

    rl [InsertedModule] : < O : Manager |
        status : initializing,
        workers : W,
        A >
        insertedModule(O, MI)
    => < O : Manager |
        status : initializing,
        workers : (MI, W),
        A >
        [print "[InsertedModule]"] .

    crl [CreatedWorkersDone] : < O : Manager |
        status : initializing,
        nWorkers : N,
        workers : W,
        A >
    => < O : Manager |
        status : working,
        nWorkers : N,
        workers : W,
        A >
    if | W | == N [print "[CreatedWorkersDone]"] .

    crl [AssignJob] : < O : Manager |
        status : working,
        jobs : (IS IST),
        workers : (MI, W),
        m : M,
        gs : GS,
        filter : F,
        nodes : Nodes,
        bStep : BStep,
        history : HistoryIST,
        A >
    => < O : Manager |
        status : working,
        jobs : IST,
        workers : W,
        m : M,
        gs : GS,
        filter : F,
        nodes : Nodes,
        bStep : BStep,
        history : HistoryIST,
        A >
        handleJob(O, MI, M, GS, F, if BStep == 1 then Nodes else unbounded fi, HistoryIST, IS)
    if Pid := extractPid(MI) [print "[AssignJob] Pid = " Pid] .

    op handleJob : Oid Oid Module GrammarList Filters Bound IdSystemSet IdSystemSet -> Configuration .
    ceq handleJob(O, MI, M, GS, F, Nodes, HistoryIST, IS)
    = reduceTerm(MI, O,
        'MAUDE-NPA-EXT-ADDEDEQS,
        T)
    if Pid := extractPid(MI)
    /\ T := 'nextBackNarrowParallel*[
            upTerm(Pid),
            --- upTerm(M),
            upTerm(GS),
            --- upTerm(F),
            upTerm(Nodes),
            upTerm(HistoryIST),
            upTerm(IS)
        ] .
        --- upTerm(nextBackNarrowParallel(M, GS, F, Nodes, IS))) .
        --- upTerm(nextBackNarrow(M, GS, F, Nodes, HistoryIST, IS))) .

    op extractPid : Oid -> Nat .
    eq extractPid(interpreter(N)) = N .

    crl [WorkerResult] : < O : Manager |
        status : working,
        workers : W,
        next : IST,
        A >
        reducedTerm(O, MI, N, T, RT)
    => < O : Manager |
        status : working,
        workers : (W, MI),
        next : (IST IST'),
        A >
    if RT == 'IdSystemSet or-else RT == 'IdSystem
    /\ IST' := downTerm(T, errIdSystemSet)
    /\ Pid := extractPid(MI)
    [print "[WorkerResult] Pid = " Pid] .

    crl [Switch] : < O : Manager |
        status : working,
        nWorkers : N,
        workers : W,
        m : M,
        gs : GS,
        filter : F,
        bStep : BStep,
        nodes : Nodes,
        sess : Sess,
        rem : Rem?,
        jobs : empty,
        next : IST,
        init : INIT,
        history : HistoryIST,
        depth : D,
        A >
    => < O : Manager |
        status : suspending,
        nWorkers : N,
        workers : W,
        m : M,
        gs : GS,
        filter : F,
        bStep : dec(BStep),
        nodes : Nodes,
        sess : Sess,
        rem : Rem?,
        jobs : IST'',
        next : empty,
        init : (INIT INIT'),
        history : (HistoryIST IST''),
        depth : (D + 1),
        A >
    if | W | == N
    /\ IST =/= empty
    /\ IST' := filterStates(F, HistoryIST, IST) --- filter sucessor states with history states
    /\ < INIT', IST'' > := searchState-CheckInit(M, Sess, HistoryIST, < empty, empty > ,IST') --- filter initial and other states
    [print "<================= [Switch at Depth " D "] =================>"] .

    rl [Resuming] : < O : Manager |
        status : suspending,
        jobs : IST,
        filter : F,
        history : HistoryIST,
        bStep : BStep,
        rem : Rem?,
        A >
    => if BStep == 0 or-else IST == empty then
            --- Stop the search
            stopWorking(O, O)
            < O : Manager |
                status : stopping,
                jobs : IST,
                filter : F,
                history : HistoryIST,
                bStep : BStep,
                rem : Rem?,
                A >
        else
            < O : Manager |
                status : working,
                jobs : IST,
                filter : F,
                history : HistoryIST,
                bStep : BStep,
                rem : Rem?,
                A >
        fi .

    crl [terminate] : < O : Manager |
        status : working,
        nWorkers : N,
        workers : W,
        jobs : empty,
        next : empty,
        A >
    => < O : Manager |
        status : stopping,
        nWorkers : N,
        workers : W,
        jobs : empty,
        next : empty,
        A >
        stopWorking(O, O)
    if | W | == N
    [print "[terminate]"] .

    rl [StopWorkers] : < O : Manager | workers : W, A > stopWorking(O, O')
        => produceQuitMsg(O, W) < O : Manager | workers : W, A > [print "[StopWorkers]"] .

    op produceQuitMsg : Oid Set{Worker} -> Configuration .
    eq produceQuitMsg(O, (MI, W)) = quit(MI, O) produceQuitMsg(O, W) .
    eq produceQuitMsg(O, empty) = none .

    rl [Bye] : < O : Manager | workers : (MI, W), A > bye(O, MI) => < O : Manager | workers : W, A > [print "[Bye]"] .

    rl [CleanUp] : < O : Manager |
        status : stopping,
        workers : empty,
        filter : F,
        jobs : IST,
        rem : Rem?,
        init : INIT,
        A >
    => ShortIdSystem: if Rem? then
            changeShortSystem(F, INIT IST)
        else
            changeShortSystem(F, INIT)
        fi
        [print "[CleanUp]"] .
endm