Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 1488667 in 4708ms cpu (21359ms real) (316199 rewrites/second)
result GrammarList: (errorNoHeuristicApplied {
grl #0:Skey inL => senc(#0:Skey, #1:Skey) inL . ,none,
grl #0:Skey inL => (h(#4:Nonce,#1:Skey),h(#5:Nonce,#0:Skey)) inL . ,none,
grl (#7:IMsg ; #0:Skey) notInI,
   (#0:Skey notLeq #8:Name),
   (#0:Skey notLeq h(n(#9:Name, #10:Fresh),#11:Skey)),
   (#0:Skey notLeq senc(#12:Skey, #13:Skey)),
   (#0:Skey notLeq n(i, #14:Fresh)),
   (#0:Skey notLeq sKey(i, #15:Fresh)),
   (#7:IMsg ; #0:Skey) notLeq #16:IMsg ; sKey(#17:Name, #18:Fresh) => (h(
    #4:Nonce,#1:Skey),h(#5:Nonce,#0:Skey)) inL . } usingGrammar
grl #0:Skey inL => h(#1:Nonce,#0:Skey) inL .  ;
grl #0:Skey inL => senc(#0:Skey, #1:Skey) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq #1:Name),
   (#0:IMsg notLeq h(n(#2:Name, #3:Fresh),#4:Skey)),
   (#0:IMsg notLeq senc(#5:Skey, #6:Skey)),
   (#0:IMsg notLeq n(i, #7:Fresh)),
   (#0:IMsg notLeq #8:IMsg ; sKey(#9:Name, #10:Fresh)),
   #0:IMsg notLeq sKey(i, #11:Fresh) => (#0:IMsg ; #12:IMsg) inL .  ;
grl (#1:IMsg ; #0:IMsg) notInI,
   (#1:IMsg notLeq #2:Name),
   (#1:IMsg notLeq h(n(#3:Name, #4:Fresh),#5:Skey)),
   (#1:IMsg notLeq senc(#6:Skey, #7:Skey)),
   (#1:IMsg notLeq n(i, #8:Fresh)),
   (#1:IMsg notLeq sKey(i, #9:Fresh)),
   (#1:IMsg ; #0:IMsg) notLeq #10:IMsg ; sKey(#11:Name, #12:Fresh) => #1:IMsg inL .
    )
|
grl empty => (#1:IMsg ; #2:IMsg) inL .
|
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:Name, #2:Fresh) => h(#0:Nonce,#3:Key) inL .
|
grl #0:Key notInI,
   #0:Key notLeq sKey(#1:Name, #2:Fresh) => h(#3:Nonce,#0:Key) inL .
|
grl h(#0:Nonce,#1:Key) notLeq h(n(#2:Name, #3:Fresh),#4:Skey) => h(#0:Nonce,
    #1:Key) inL .
|
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL .
| (errorInconsistentExceptionsInGrammarRule
grl sKey(#0:Name, #1:Fresh) notLeq sKey(#2:Name, #4:Fresh) => sKey(#0:Name,
    #1:Fresh) inL .  inGrammar
grl #0:Skey inL => h(#1:Nonce,#0:Skey) inL .  ;
grl #0:Skey inL => senc(#0:Skey, #1:Skey) inL .  ;
grl sKey(#0:Name, #1:Fresh) notLeq sKey(#2:Name, #4:Fresh) => sKey(#0:Name,
    #1:Fresh) inL . )
| (errorNoHeuristicApplied {
grl #50:Skey notInI => senc(#50:Skey, #60:Skey) inL . ,none,
grl #50:Skey notInI => (h(#63:Nonce,#60:Skey),h(#64:Nonce,#50:Skey)) inL . ,
    none,
grl #50:Skey notInI => (h(#63:Nonce,#60:Skey),h(#64:Nonce,#50:Skey)) inL . }
    usingGrammar
grl #50:Skey notInI => senc(#50:Skey, #60:Skey) inL . )
| (errorNoHeuristicApplied {
grl #50:Skey notInI => senc(#1:Skey, #50:Skey) inL . ,none,
grl #50:Skey notInI => (h(#53:Nonce,#50:Skey),h(#54:Nonce,#1:Skey)) inL . ,
    none,
grl #50:Skey notInI => (h(#53:Nonce,#50:Skey),h(#54:Nonce,#1:Skey)) inL . }
    usingGrammar
grl #50:Skey notInI => senc(#1:Skey, #50:Skey) inL . )
| errorNoHeuristicApplied {
grl empty => senc(#1:Skey, #2:Skey) inL . ,none,
grl empty => (h(#5:Nonce,#2:Skey),h(#6:Nonce,#1:Skey)) inL . ,none,
grl empty => (h(#5:Nonce,#2:Skey),h(#6:Nonce,#1:Skey)) inL . } usingGrammar
grl empty => senc(#1:Skey, #2:Skey) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3463 in 128ms cpu (536ms real) (27054 rewrites/second)
result ShortIdSystem: < 1 >
:: r1:Fresh,r2:Fresh,r1':Fresh,r2':Fresh ::
[ nil,
   +(h(n(a, r1:Fresh),sKey(a, r1':Fresh))),
   +(h(n(a, r2:Fresh),sKey(a, r2':Fresh))) | nil]
|
sKey(a, r1':Fresh) inI
|
nil
|
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 268891 in 568ms cpu (2364ms real) (473399 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 1385217 in 3056ms cpu (12419ms real) (453277 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 12299402 in 18520ms cpu (68399ms real) (664114 rewrites/second)
result Summary: States>> 13 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 95144000 in 119900ms cpu (331774ms real) (793527 rewrites/second)
result Summary: States>> 20 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 126396558 in 178168ms cpu (372762ms real) (709423 rewrites/second)
result Summary: States>> 21 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 112850966 in 189300ms cpu (300645ms real) (596148 rewrites/second)
result Summary: States>> 13 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 119 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))) | nil] )
|
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 2 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#0:Fresh ::
[ nil,
   +(h(n(a, #2:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #3:Fresh),sKey(a, #4:Fresh))) | nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), #1:Skey) inI
|
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey))
< 1 . 3 >
:: #1:Fresh,#2:Fresh,#3:Fresh,#0:Fresh ::
[ nil,
   +(h(n(a, #0:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #1:Fresh),sKey(a, #3:Fresh))), nil]
|
sKey(a, #2:Fresh) inI
|
+(h(n(a, #1:Fresh),sKey(a, #3:Fresh)))
|
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 201 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))), nil] )
|
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
+(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 6 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(#2:Skey, #5:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#7:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #8:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#4:Nonce,#5:Skey)),
-(senc(#2:Skey, #5:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #5:Skey)))
(< 1 . 1 . 3{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#6:Fresh,#7:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))) | nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#3:Nonce != #4:Nonce),(
#3:Nonce != #0:Nonce),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#4:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#6:Fresh,#7:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))) | nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 2 . 1 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#0:Fresh ::
[ nil,
   +(h(n(a, #2:Fresh),sKey(a, #0:Fresh))) |
   +(h(n(a, #3:Fresh),sKey(a, #4:Fresh))), nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), #1:Skey) inI
|
+(h(n(a, #3:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey))
< 1 . 2 . 2{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#1:Skey)),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #6:Fresh))) | nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#1:Skey) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,(
#2:Nonce != #3:Nonce),(
#1:Skey != sKey(a, #0:Fresh)),
h(#2:Nonce,#1:Skey) != h(#3:Nonce,sKey(a, #0:Fresh))
|
-(h(#2:Nonce,#1:Skey)),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey)
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 370 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 6 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(#2:Skey, #5:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#7:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #7:Fresh),sKey(a, #8:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#4:Nonce,#5:Skey)),
-(senc(#2:Skey, #5:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
+(h(n(a, #7:Fresh),sKey(a, #8:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #5:Skey)))
(< 1 . 1 . 1 . 3{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#6:Fresh,#7:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))), nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#3:Nonce != #4:Nonce),(
#3:Nonce != #0:Nonce),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#4:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#6:Fresh,#7:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))), nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(senc(#2:Skey, #2:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,(
#4:Nonce != #5:Nonce),(
#2:Skey != sKey(a, #3:Fresh)),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#4:Nonce,#2:Skey)),
-(senc(#2:Skey, #2:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #2:Skey)))
(< 1 . 1 . 6 . 3{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#6:Nonce,#7:Skey) inI,(
#4:Nonce != #5:Nonce),(
#4:Nonce != #6:Nonce),(
#2:Skey != sKey(a, #3:Fresh)),(
#7:Skey != sKey(a, #3:Fresh)),(
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))),(
h(#4:Nonce,#2:Skey) != h(#6:Nonce,#7:Skey)),
h(#5:Nonce,sKey(a, #3:Fresh)) != h(#6:Nonce,#7:Skey)
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #7:Skey)))
(< 1 . 1 . 3{2} . 6{3} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #4:Fresh), #7:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
senc(sKey(a, #4:Fresh), #7:Skey) inI,(
#5:Nonce != #0:Nonce),(
#5:Nonce != n(#2:Name, #3:Fresh)),(
#0:Nonce != n(#2:Name, #3:Fresh)),(
#6:Nonce != n(#2:Name, #3:Fresh)),(
#1:Skey != sKey(a, #4:Fresh)),(
#7:Skey != sKey(a, #4:Fresh)),(
h(#5:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#5:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),(
h(#0:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))
|
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #4:Fresh), #7:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
-(h(#5:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #2:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(#1:Skey, sKey(a, #2:Fresh)) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#0:Nonce != n(#3:Name, #4:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(n(#3:Name, #4:Fresh),#1:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#3:Name, #4:Fresh),#1:Skey)
|
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(sKey(a, #1:Fresh), #5:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))), nil]  &
:: #1:Fresh,#6:Fresh,#7:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #8:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), #5:Skey) inI,(
#4:Nonce != #0:Nonce),(
#5:Skey != sKey(a, #1:Fresh)),
h(#4:Nonce,#5:Skey) != h(#0:Nonce,sKey(a, #1:Fresh))
|
-(h(#4:Nonce,#5:Skey)),
-(senc(sKey(a, #1:Fresh), #5:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 2 . 1 . 2{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#1:Skey)),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))) |
   +(h(n(a, #5:Fresh),sKey(a, #6:Fresh))), nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#1:Skey) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,(
#2:Nonce != #3:Nonce),(
#1:Skey != sKey(a, #0:Fresh)),
h(#2:Nonce,#1:Skey) != h(#3:Nonce,sKey(a, #0:Fresh))
|
-(h(#2:Nonce,#1:Skey)),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
+(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey))
(< 1 . 2 . 2{1} . 6{1} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#2:Skey, sKey(a, #4:Fresh)) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey))
(< 1 . 2 . 2{1} . 6{2} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(#2:Skey, #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,#6:Skey) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#5:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),(
#6:Skey != sKey(a, #4:Fresh)),(
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#5:Nonce,#6:Skey)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#5:Nonce,#6:Skey)),
-(senc(#2:Skey, #6:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #6:Skey)))
(< 1 . 1 . 6 . 2 . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
   -(senc(#2:Skey, sKey(a, #5:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(n(a, #4:Fresh),sKey(a, #5:Fresh)) inI,
senc(#2:Skey, sKey(a, #5:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
resuscitated(senc(#2:Skey, sKey(a, #5:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(senc(#2:Skey, sKey(a, #5:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
< 1 . 1 . 6 . 3{2} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
senc(#2:Skey, sKey(a, #3:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
resuscitated(senc(#2:Skey, sKey(a, #3:Fresh))),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 683 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(senc(#2:Skey, #2:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,(
#4:Nonce != #5:Nonce),(
#2:Skey != sKey(a, #3:Fresh)),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#4:Nonce,#2:Skey)),
-(senc(#2:Skey, #2:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #2:Skey)))
(< 1 . 1 . 1 . 6 . 3{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#6:Nonce,#7:Skey) inI,(
#4:Nonce != #5:Nonce),(
#4:Nonce != #6:Nonce),(
#2:Skey != sKey(a, #3:Fresh)),(
#7:Skey != sKey(a, #3:Fresh)),(
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))),(
h(#4:Nonce,#2:Skey) != h(#6:Nonce,#7:Skey)),
h(#5:Nonce,sKey(a, #3:Fresh)) != h(#6:Nonce,#7:Skey)
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(senc(#2:Skey, #7:Skey)))
(< 1 . 1 . 1 . 3{2} . 2 > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: #2:Fresh,#3:Fresh,#5:Fresh,#6:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #6:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,(
#4:Nonce != #0:Nonce),(
#4:Nonce != n(a, #2:Fresh)),(
#0:Nonce != n(a, #2:Fresh)),(
#1:Skey != sKey(a, #3:Fresh)),(
h(#4:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#4:Nonce,#1:Skey) != h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
h(#0:Nonce,#1:Skey) != h(n(a, #2:Fresh),sKey(a, #3:Fresh))
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
+(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
-(h(#4:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 7{3} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #4:Fresh), #7:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
senc(sKey(a, #4:Fresh), #7:Skey) inI,(
#5:Nonce != #0:Nonce),(
#5:Nonce != n(#2:Name, #3:Fresh)),(
#0:Nonce != n(#2:Name, #3:Fresh)),(
#6:Nonce != n(#2:Name, #3:Fresh)),(
#1:Skey != sKey(a, #4:Fresh)),(
#7:Skey != sKey(a, #4:Fresh)),(
h(#5:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#5:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),(
h(#0:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))
|
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #4:Fresh), #7:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(#5:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #2:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(#1:Skey, sKey(a, #2:Fresh)) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#0:Nonce != n(#3:Name, #4:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(n(#3:Name, #4:Fresh),#1:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#3:Name, #4:Fresh),#1:Skey)
|
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} . 6{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(sKey(a, #1:Fresh), #5:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))), nil]  &
:: #1:Fresh,#6:Fresh,#7:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))) |
   +(h(n(a, #7:Fresh),sKey(a, #8:Fresh))), nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), #5:Skey) inI,(
#4:Nonce != #0:Nonce),(
#5:Skey != sKey(a, #1:Fresh)),
h(#4:Nonce,#5:Skey) != h(#0:Nonce,sKey(a, #1:Fresh))
|
-(h(#4:Nonce,#5:Skey)),
-(senc(sKey(a, #1:Fresh), #5:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #7:Fresh),sKey(a, #8:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 6{3} . 5{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(h(#8:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #7:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
senc(sKey(a, #2:Fresh), #7:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
h(#8:Nonce,sKey(a, #2:Fresh)) inI,(
#3:Nonce != #0:Nonce),(
#3:Nonce != n(#4:Name, #5:Fresh)),(
#0:Nonce != n(#4:Name, #5:Fresh)),(
#6:Nonce != n(#4:Name, #5:Fresh)),(
#8:Nonce != n(#4:Name, #5:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
#7:Skey != sKey(a, #2:Fresh)),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#3:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#3:Nonce,#1:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),(
h(#0:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#0:Nonce,#1:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))),(
h(#0:Nonce,#1:Skey) != h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
h(#6:Nonce,#7:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))
|
-(h(#6:Nonce,#7:Skey)),
-(h(#8:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #7:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,#1:Skey)),
-(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 5{2} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #2:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#0:Nonce != n(#3:Name, #4:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(n(#3:Name, #4:Fresh),#1:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#3:Name, #4:Fresh),#1:Skey)
|
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 8{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #2:Fresh), #8:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(#1:Skey, sKey(a, #2:Fresh)) inI,
senc(sKey(a, #2:Fresh), #8:Skey) inI,(
h(n(#3:Name, #4:Fresh),#1:Skey) != h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
n(#3:Name, #4:Fresh) != n(#5:Name, #6:Fresh)
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #2:Fresh), #8:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 11{1} > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#2:Skey)),
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#5:Name, #6:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#2:Skey, sKey(a, #4:Fresh)) inI,(
h(n(#5:Name, #6:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(h(n(#5:Name, #6:Fresh),#2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #5:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(sKey(a, #1:Fresh), #5:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))), nil]  &
:: #1:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), #5:Skey) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,(
#4:Nonce != #0:Nonce),(
#5:Skey != sKey(a, #1:Fresh)),
h(#4:Nonce,#5:Skey) != h(#0:Nonce,sKey(a, #1:Fresh))
|
-(h(#4:Nonce,#5:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #5:Skey)),
-(h(#4:Nonce,#5:Skey)),
-(senc(sKey(a, #1:Fresh), #5:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 11{1} > (
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,#6:Skey) inI,
senc(sKey(a, #2:Fresh), #6:Skey) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#6:Skey != sKey(a, #2:Fresh)),
h(#5:Nonce,#6:Skey) != h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))
|
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 2 . 1 . 2{1} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,(
#0:Nonce != n(a, #2:Fresh)),(
#1:Skey != sKey(a, #3:Fresh)),
h(#0:Nonce,#1:Skey) != h(n(a, #2:Fresh),sKey(a, #3:Fresh))
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
+(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #3:Fresh))
| ghost(#1:Skey))
(< 1 . 2 . 1 . 2{1} . 7{1} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#2:Skey, sKey(a, #4:Fresh)) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #8:Fresh),sKey(a, #9:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey))
(< 1 . 2 . 1 . 2{1} . 7{2} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(#2:Skey, #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,#6:Skey) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#5:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),(
#6:Skey != sKey(a, #4:Fresh)),(
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#5:Nonce,#6:Skey)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#5:Nonce,#6:Skey)),
-(senc(#2:Skey, #6:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #8:Fresh),sKey(a, #9:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #6:Skey)))
(< 1 . 2 . 2{1} . 6{1} . 4{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(h(#6:Nonce,#2:Skey)),
   +(senc(#2:Skey, sKey(a, #4:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(#2:Skey, sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,#2:Skey) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#6:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),(
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#6:Nonce,#2:Skey)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(h(#6:Nonce,#2:Skey)),
+(senc(#2:Skey, sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey))
(< 1 . 2 . 2{1} . 6{2} . 3{1} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#7:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #4:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#7:Skey, sKey(a, #4:Fresh)) inI,
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#7:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #7:Skey)))
(< 1 . 2 . 2{1} . 6{2} . 3{2} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#8:Nonce,#9:Skey)),
   -(senc(#7:Skey, #9:Skey)),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #4:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#8:Nonce,#9:Skey) inI,
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#8:Nonce,#9:Skey)),
-(senc(#7:Skey, #9:Skey)),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #7:Skey)),
ghost(senc(#7:Skey, #9:Skey)))
(< 1 . 1 . 1 . 6 . 3{2} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
senc(#2:Skey, sKey(a, #3:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
resuscitated(senc(#2:Skey, sKey(a, #3:Fresh))),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
< 1 . 1 . 6 . 2 . 0 . 4{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
   -(senc(#2:Skey, sKey(a, #7:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#7:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(n(a, #6:Fresh),sKey(a, #7:Fresh)) inI,
senc(#2:Skey, sKey(a, #7:Fresh)) inI
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
resuscitated(senc(#2:Skey, sKey(a, #7:Fresh))),
-(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(senc(#2:Skey, sKey(a, #7:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 1060 in 4ms cpu (0ms real) (265000 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 3{2} . 7{3} . 5{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(h(#8:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #7:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))), nil] )
|
h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
senc(sKey(a, #2:Fresh), #7:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
h(#8:Nonce,sKey(a, #2:Fresh)) inI,(
#3:Nonce != #0:Nonce),(
#3:Nonce != n(#4:Name, #5:Fresh)),(
#0:Nonce != n(#4:Name, #5:Fresh)),(
#6:Nonce != n(#4:Name, #5:Fresh)),(
#8:Nonce != n(#4:Name, #5:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
#7:Skey != sKey(a, #2:Fresh)),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#3:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#3:Nonce,#1:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),(
h(#0:Nonce,#1:Skey) != h(#6:Nonce,#7:Skey)),(
h(#0:Nonce,#1:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))),(
h(#0:Nonce,#1:Skey) != h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
h(#6:Nonce,#7:Skey) != h(#8:Nonce,sKey(a, #2:Fresh))
|
-(h(#6:Nonce,#7:Skey)),
-(h(#8:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #7:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,#1:Skey)),
-(h(n(#4:Name, #5:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #11:Fresh),sKey(a, #12:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 6{2} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #2:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#0:Nonce != n(#3:Name, #4:Fresh)),(
#1:Skey != sKey(a, #2:Fresh)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)),(
h(#5:Nonce,sKey(a, #2:Fresh)) != h(n(#3:Name, #4:Fresh),#1:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#3:Name, #4:Fresh),#1:Skey)
|
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 9{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #2:Fresh), #8:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(#1:Skey, sKey(a, #2:Fresh)) inI,
senc(sKey(a, #2:Fresh), #8:Skey) inI,(
h(n(#3:Name, #4:Fresh),#1:Skey) != h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
n(#3:Name, #4:Fresh) != n(#5:Name, #6:Fresh)
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #2:Fresh), #8:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 12{1} > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#2:Skey)),
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#5:Name, #6:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#2:Skey, sKey(a, #4:Fresh)) inI,(
h(n(#5:Name, #6:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(n(#5:Name, #6:Fresh),#2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} . 6{2} . 4{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #5:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#4:Nonce,#5:Skey)),
   -(senc(sKey(a, #1:Fresh), #5:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))), nil]  &
:: #1:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), #5:Skey) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#4:Nonce,#5:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,(
#4:Nonce != #0:Nonce),(
#5:Skey != sKey(a, #1:Fresh)),
h(#4:Nonce,#5:Skey) != h(#0:Nonce,sKey(a, #1:Fresh))
|
-(h(#4:Nonce,#5:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #5:Skey)),
-(h(#4:Nonce,#5:Skey)),
-(senc(sKey(a, #1:Fresh), #5:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} . 6{2} . 12{1} > (
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,#6:Skey) inI,
senc(sKey(a, #2:Fresh), #6:Skey) inI,(
#5:Nonce != n(#3:Name, #4:Fresh)),(
#6:Skey != sKey(a, #2:Fresh)),
h(#5:Nonce,#6:Skey) != h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))
|
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 6{3} . 5{3} . 5{6} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#4:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #4:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh))),
   -(h(n(#8:Name, #9:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: #7:Fresh ::
[ nil |
   -(h(#10:Nonce,#11:Skey)),
   -(senc(sKey(a, #2:Fresh), #11:Skey)),
   +(h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #9:Fresh ::
[ nil |
   -(h(#3:Nonce,#4:Skey)),
   -(senc(sKey(a, #2:Fresh), #4:Skey)),
   +(h(n(#8:Name, #9:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #12:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #13:Fresh),sKey(a, #14:Fresh))) | nil] )
|
h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#8:Name, #9:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #4:Skey) !inI,
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#4:Skey) inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#10:Nonce,#11:Skey) inI,
senc(sKey(a, #2:Fresh), #11:Skey) inI,(
h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh)) != h(n(#8:Name, #9:Fresh),sKey(a,
    #2:Fresh))),
n(#6:Name, #7:Fresh) != n(#8:Name, #9:Fresh)
|
-(h(#10:Nonce,#11:Skey)),
-(senc(sKey(a, #2:Fresh), #11:Skey)),
+(h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,#4:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #4:Skey)),
-(h(#3:Nonce,#4:Skey)),
-(senc(sKey(a, #2:Fresh), #4:Skey)),
+(h(n(#8:Name, #9:Fresh),sKey(a, #2:Fresh))),
-(h(n(#6:Name, #7:Fresh),sKey(a, #2:Fresh))),
-(h(n(#8:Name, #9:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 6{3} . 5{3} . 10{15} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #7:Skey)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #4:Fresh), #7:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #9:Fresh ::
[ nil |
   -(h(#10:Nonce,#11:Skey)),
   -(senc(sKey(a, #4:Fresh), #11:Skey)),
   +(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #12:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #13:Fresh),sKey(a, #14:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
senc(sKey(a, #4:Fresh), #7:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
h(#10:Nonce,#11:Skey) inI,
senc(sKey(a, #4:Fresh), #11:Skey) inI,
n(#2:Name, #3:Fresh) != n(#8:Name, #9:Fresh)
|
-(h(#10:Nonce,#11:Skey)),
-(senc(sKey(a, #4:Fresh), #11:Skey)),
+(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
-(h(#6:Nonce,#7:Skey)),
-(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #7:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #4:Fresh), #7:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
-(h(#5:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 5{2} . 5{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #2:Fresh))), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #2:Fresh), #8:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh)) !inI,
senc(#1:Skey, sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(sKey(a, #2:Fresh), #8:Skey) inI,(
h(n(#3:Name, #4:Fresh),#1:Skey) != h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
n(#3:Name, #4:Fresh) != n(#5:Name, #6:Fresh)
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #2:Fresh), #8:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 11{1} . 4{2} > (
:: nil ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(h(#8:Nonce,#2:Skey)),
   +(senc(#2:Skey, sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#4:Name, #5:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(#2:Skey, sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
h(#8:Nonce,#2:Skey) inI,(
h(n(#4:Name, #5:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#4:Name, #5:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(h(#8:Nonce,#2:Skey)),
+(senc(#2:Skey, sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 11{1} . 7{1} > (
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#2:Skey)),
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#2:Skey)), nil]  &
:: #7:Fresh ::
[ nil |
   -(h(#8:Nonce,#9:Skey)),
   -(senc(sKey(a, #3:Fresh), #9:Skey)),
   +(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #3:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#4:Name, #5:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#8:Nonce,#9:Skey) inI,
senc(#2:Skey, sKey(a, #3:Fresh)) inI,
senc(sKey(a, #3:Fresh), #9:Skey) inI,(
h(n(#4:Name, #5:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#4:Name, #5:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#8:Nonce,#9:Skey)),
-(senc(sKey(a, #3:Fresh), #9:Skey)),
+(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 3{1} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #1:Fresh))), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))) |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,(
h(#0:Nonce,sKey(a, #1:Fresh)) != h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
sKey(a, #1:Fresh) != sKey(a, #3:Fresh)
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(h(n(#4:Name, #5:Fresh),sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
-(h(n(#4:Name, #5:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 3{1} . 5{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #4:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #4:Fresh), #8:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(sKey(a, #4:Fresh), #8:Skey) inI,(
#0:Nonce != n(#2:Name, #3:Fresh)),(
#7:Nonce != n(#2:Name, #3:Fresh)),(
#1:Skey != sKey(a, #4:Fresh)),(
#8:Skey != sKey(a, #4:Fresh)),(
h(#0:Nonce,#1:Skey) != h(#7:Nonce,#8:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #4:Fresh), #8:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 11{1} . 3{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(h(#7:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #6:Skey) !inI,
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#5:Nonce,#6:Skey) inI,
h(#7:Nonce,sKey(a, #2:Fresh)) inI,(
#5:Nonce != n(#0:Name, #1:Fresh)),(
#7:Nonce != n(#0:Name, #1:Fresh)),(
#6:Skey != sKey(a, #2:Fresh)),(
h(#5:Nonce,#6:Skey) != h(#7:Nonce,sKey(a, #2:Fresh))),
h(#5:Nonce,#6:Skey) != h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))
|
-(h(#5:Nonce,#6:Skey)),
-(h(#7:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #6:Skey)),
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 2 . 1 . 2{1} . 2 . 1 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(n(a, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(#2:Skey, #6:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh ::
[ nil |
   +(h(n(a, #3:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #8:Fresh))), nil] )
|
h(n(a, #3:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#6:Skey) inI,(
h(n(a, #3:Fresh),sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(a, #3:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#5:Nonce,#6:Skey)),
-(senc(#2:Skey, #6:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
+(h(n(a, #3:Fresh),sKey(a, #4:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(a, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #7:Fresh),sKey(a, #8:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #6:Skey)))
(< 1 . 2 . 1 . 2{1} . 7{1} . 5{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(h(#6:Nonce,#2:Skey)),
   +(senc(#2:Skey, sKey(a, #4:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #8:Fresh),sKey(a, #9:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(#2:Skey, sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,#2:Skey) inI,(
#3:Nonce != n(#0:Name, #1:Fresh)),(
#6:Nonce != n(#0:Name, #1:Fresh)),(
#2:Skey != sKey(a, #4:Fresh)),(
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#6:Nonce,#2:Skey)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(h(#6:Nonce,#2:Skey)),
+(senc(#2:Skey, sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #8:Fresh),sKey(a, #9:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey))
(< 1 . 2 . 1 . 2{1} . 7{2} . 4{1} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#7:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #4:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))), nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#7:Skey, sKey(a, #4:Fresh)) inI,
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#7:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #11:Fresh),sKey(a, #12:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(senc(#2:Skey, #7:Skey)))
(< 1 . 1 . 6 . 2 . 0 . 4{1} . 5{5} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #7:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
   -(senc(#1:Skey, sKey(a, #7:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#1:Skey)), nil]  &
:: #3:Fresh,#7:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #7:Fresh))) | nil] )
|
h(n(#4:Name, #5:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #7:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
h(n(a, #9:Fresh),sKey(a, #7:Fresh)) inI,(
h(#2:Nonce,sKey(a, #3:Fresh)) != h(#0:Nonce,#1:Skey)),
h(#0:Nonce,#1:Skey) != h(n(a, #9:Fresh),sKey(a, #7:Fresh))
|
-(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #7:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
resuscitated(senc(#1:Skey, sKey(a, #7:Fresh))),
-(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
-(senc(#1:Skey, sKey(a, #7:Fresh))),
+(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 6 . 2 . 0 . 4{1} . 5{6} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
   -(h(#8:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #7:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
   -(senc(#1:Skey, sKey(a, #7:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#1:Skey)), nil]  &
:: #3:Fresh,#7:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #7:Fresh))) | nil] )
|
h(n(#4:Name, #5:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #7:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
h(#8:Nonce,#1:Skey) inI,
h(n(a, #9:Fresh),sKey(a, #7:Fresh)) inI
|
-(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
-(h(#8:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #7:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
resuscitated(senc(#1:Skey, sKey(a, #7:Fresh))),
-(h(n(a, #9:Fresh),sKey(a, #7:Fresh))),
-(senc(#1:Skey, sKey(a, #7:Fresh))),
+(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 2 . 1 . 2{1} . 7{2} . 2 . 0{2} > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(n(a, #5:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#6:Fresh,#7:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(n(a, #5:Fresh),sKey(a, #4:Fresh)) inI,
senc(#2:Skey, sKey(a, #4:Fresh)) inI,(
h(n(a, #5:Fresh),sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(a, #5:Fresh) != n(#0:Name, #1:Fresh)
|
resuscitated(senc(#2:Skey, sKey(a, #4:Fresh))),
-(h(n(a, #5:Fresh),sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(a, #5:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
+(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil)
< 1 . 2 . 2{1} . 6{2} . 3{2} . 1{1} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#7:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #4:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#7:Skey, sKey(a, #4:Fresh)) inI,
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
resuscitated(senc(#7:Skey, sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#7:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 1358 in 4ms cpu (1ms real) (339500 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 3{2} . 7{3} . 5{3} . 4{5} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #7:Skey)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #4:Fresh), #7:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil |
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(a, #8:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
senc(sKey(a, #4:Fresh), #7:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#6:Nonce,#7:Skey) inI,
n(a, #8:Fresh) != n(#2:Name, #3:Fresh)
|
+(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
-(h(#6:Nonce,#7:Skey)),
-(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #7:Skey)),
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #4:Fresh), #7:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
-(h(#5:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 6{2} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#1:Skey)),
   -(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#1:Skey)), nil]  &
:: #2:Fresh,#3:Fresh,#6:Fresh,#7:Fresh ::
[ nil |
   +(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))), nil] )
|
h(n(a, #3:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,(
h(n(a, #3:Fresh),sKey(a, #2:Fresh)) != h(n(#4:Name, #5:Fresh),#1:Skey)),
n(a, #3:Fresh) != n(#4:Name, #5:Fresh)
|
+(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
-(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #2:Fresh))),
-(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(h(n(#4:Name, #5:Fresh),#1:Skey)),
-(h(n(a, #3:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 6{2} . 6{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),#1:Skey)),
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #2:Fresh))), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
   -(senc(#1:Skey, sKey(a, #2:Fresh))),
   +(h(n(#3:Name, #4:Fresh),#1:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #2:Fresh), #8:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#3:Name, #4:Fresh),#1:Skey) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh)) !inI,
senc(#1:Skey, sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(sKey(a, #2:Fresh), #8:Skey) inI,(
h(n(#3:Name, #4:Fresh),#1:Skey) != h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
n(#3:Name, #4:Fresh) != n(#5:Name, #6:Fresh)
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #2:Fresh), #8:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #2:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
-(senc(#1:Skey, sKey(a, #2:Fresh))),
+(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#3:Name, #4:Fresh),#1:Skey)),
-(h(n(#5:Name, #6:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 12{1} . 5{2} > (
:: nil ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(h(#8:Nonce,#2:Skey)),
   +(senc(#2:Skey, sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#4:Name, #5:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(#2:Skey, sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
h(#8:Nonce,#2:Skey) inI,(
h(n(#4:Name, #5:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#4:Name, #5:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(h(#8:Nonce,#2:Skey)),
+(senc(#2:Skey, sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{2} . 9{1} . 12{1} . 8{1} > (
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#2:Skey)),
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   -(senc(#2:Skey, sKey(a, #3:Fresh))),
   +(h(n(#4:Name, #5:Fresh),#2:Skey)), nil]  &
:: #7:Fresh ::
[ nil |
   -(h(#8:Nonce,#9:Skey)),
   -(senc(sKey(a, #3:Fresh), #9:Skey)),
   +(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #3:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))), nil] )
|
h(n(#4:Name, #5:Fresh),#2:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#8:Nonce,#9:Skey) inI,
senc(#2:Skey, sKey(a, #3:Fresh)) inI,
senc(sKey(a, #3:Fresh), #9:Skey) inI,(
h(n(#4:Name, #5:Fresh),#2:Skey) != h(n(#0:Name, #1:Fresh),#2:Skey)),
n(#4:Name, #5:Fresh) != n(#0:Name, #1:Fresh)
|
-(h(#8:Nonce,#9:Skey)),
-(senc(sKey(a, #3:Fresh), #9:Skey)),
+(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(senc(#2:Skey, sKey(a, #3:Fresh))),
+(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#4:Name, #5:Fresh),#2:Skey)),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(h(n(a, #11:Fresh),sKey(a, #12:Fresh))),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} . 6{2} . 4{1} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #2:Fresh,#3:Fresh,#6:Fresh,#7:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #7:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,(
#0:Nonce != n(a, #2:Fresh)),(
#1:Skey != sKey(a, #3:Fresh)),
h(#0:Nonce,#1:Skey) != h(n(a, #2:Fresh),sKey(a, #3:Fresh))
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
+(h(n(a, #6:Fresh),sKey(a, #7:Fresh))),
-(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 3{3} . 6{2} . 4{1} . 6{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #4:Fresh)), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #4:Fresh), #8:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #10:Fresh),sKey(a, #11:Fresh))), nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,#8:Skey) inI,
senc(sKey(a, #4:Fresh), #8:Skey) inI,(
#0:Nonce != n(#2:Name, #3:Fresh)),(
#7:Nonce != n(#2:Name, #3:Fresh)),(
#1:Skey != sKey(a, #4:Fresh)),(
#8:Skey != sKey(a, #4:Fresh)),(
h(#0:Nonce,#1:Skey) != h(#7:Nonce,#8:Skey)),
h(#0:Nonce,#1:Skey) != h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #4:Fresh), #8:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
+(h(n(a, #10:Fresh),sKey(a, #11:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 3{2} . 8{1} . 11{1} . 4{2} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #7:Fresh ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   +(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))) |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,(
h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh)) != h(n(#6:Name, #7:Fresh),sKey(a,
    #3:Fresh))),
n(#4:Name, #5:Fresh) != n(#6:Name, #7:Fresh)
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
-(h(n(#6:Name, #7:Fresh),sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 3{1} . 2 . 2 > (
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#0:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #0:Fresh),sKey(a, #1:Fresh))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #0:Fresh),sKey(a, #1:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,(
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) != h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
sKey(a, #1:Fresh) != sKey(a, #3:Fresh)
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
-(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 3{3} . 4{2} . 11{1} . 3{1} . 5{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))),
   -(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))), nil]  &
:: #3:Fresh ::
[ nil |
   -(h(#9:Nonce,#10:Skey)),
   -(senc(sKey(a, #4:Fresh), #10:Skey)),
   +(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #8:Fresh ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #4:Fresh), #1:Skey)),
   +(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #11:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #13:Fresh))) | nil] )
|
h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh)) !inI,
h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #1:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#9:Nonce,#10:Skey) inI,
senc(sKey(a, #4:Fresh), #10:Skey) inI,
n(#2:Name, #3:Fresh) != n(#7:Name, #8:Fresh)
|
-(h(#9:Nonce,#10:Skey)),
-(senc(sKey(a, #4:Fresh), #10:Skey)),
+(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(#2:Name, #3:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #4:Fresh), #1:Skey)),
+(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))),
-(h(n(#7:Name, #8:Fresh),sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
-(h(n(#5:Name, #6:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 6 . 2 . 0 . 4{1} . 5{6} . 1{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
   -(h(#0:Nonce,#1:Skey)),
   +(senc(#1:Skey, sKey(a, #5:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#7:Name, #8:Fresh),#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #8:Fresh ::
[ nil |
   -(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
   -(senc(#1:Skey, sKey(a, #5:Fresh))),
   +(h(n(#7:Name, #8:Fresh),#1:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))), nil] )
|
h(n(a, #4:Fresh),sKey(a, #5:Fresh)) !inI,
h(n(#7:Name, #8:Fresh),#1:Skey) !inI,
senc(#1:Skey, sKey(a, #5:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
h(#2:Nonce,sKey(a, #3:Fresh)) != h(#0:Nonce,#1:Skey)
|
+(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(h(#0:Nonce,#1:Skey)),
+(senc(#1:Skey, sKey(a, #5:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
resuscitated(senc(#1:Skey, sKey(a, #5:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
-(senc(#1:Skey, sKey(a, #5:Fresh))),
+(h(n(#7:Name, #8:Fresh),#1:Skey)),
-(h(n(#7:Name, #8:Fresh),#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 2 . 2{1} . 6{2} . 3{2} . 1{1} . 0 . 1 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(#2:Skey, #7:Skey)),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(#7:Skey, sKey(a, #4:Fresh))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))) |
   +(h(n(a, #9:Fresh),sKey(a, #10:Fresh))), nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(#7:Skey, sKey(a, #4:Fresh)) inI,
n(#5:Name, #6:Fresh) != n(#0:Name, #1:Fresh)
|
+(h(n(a, #9:Fresh),sKey(a, #10:Fresh))),
resuscitated(senc(#7:Skey, sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(#7:Skey, sKey(a, #4:Fresh))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(#2:Skey, #7:Skey)),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil)
< 1 . 2 . 2{1} . 6{2} . 3{2} . 1{1} . 0 . 4{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
   -(senc(#2:Skey, sKey(a, #4:Fresh))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #9:Fresh ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
   +(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #4:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #12:Fresh))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh)) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
n(#0:Name, #1:Fresh) != n(#8:Name, #9:Fresh)
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
resuscitated(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #4:Fresh))),
+(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
-(h(n(#8:Name, #9:Fresh),sKey(a, #4:Fresh))),
-(senc(#2:Skey, sKey(a, #4:Fresh))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil
Bye.
Tue Jun  2 19:40:34 CEST 2020
