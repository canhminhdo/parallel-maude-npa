Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 4614290 in 10972ms cpu (39356ms real) (420551 rewrites/second)
result GrammarList: (errorNoHeuristicApplied {
grl #0:Skey inL => senc(#0:Skey, #1:Skey) inL . ,none,
grl #0:Skey inL => (h(#4:Nonce,#1:Skey),h(#5:Nonce,#0:Skey)) inL . ,none,
grl (#7:IMsg ; #0:Skey) notInI,
   (#0:Skey notLeq #8:Name),
   (#0:Skey notLeq pub(#9:Name)),
   (#0:Skey notLeq priv(i)),
   (#0:Skey notLeq h(n(i, #10:Fresh),priv(#11:Name))),
   (#0:Skey notLeq h(n(#12:Name, #13:Fresh),#14:Skey)),
   (#0:Skey notLeq h(n(#15:Name, #16:Fresh),priv(#15:Name))),
   (#0:Skey notLeq senc(#17:Skey, #18:Skey)),
   (#0:Skey notLeq aenc(#19:Skey, #20:Akey)),
   (#0:Skey notLeq n(i, #21:Fresh)),
   (#0:Skey notLeq sKey(#22:Name, #23:Fresh)),
   (#7:IMsg ; #0:Skey) notLeq #24:IMsg ; sKey(#25:Name, #26:Fresh) => (h(
    #4:Nonce,#1:Skey),h(#5:Nonce,#0:Skey)) inL . } usingGrammar
grl #0:Skey inL => h(#1:Nonce,#0:Skey) inL .  ;
grl #0:Skey inL => senc(#0:Skey, #1:Skey) inL .  ;
grl #0:Skey inL => aenc(#0:Skey, pub(#1:Name)) inL .  ;
grl #0:Skey inL => aenc(#0:Skey, priv(#1:Name)) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq #1:Name),
   (#0:IMsg notLeq pub(#2:Name)),
   (#0:IMsg notLeq priv(i)),
   (#0:IMsg notLeq h(n(i, #3:Fresh),priv(#4:Name))),
   (#0:IMsg notLeq h(n(#5:Name, #6:Fresh),#7:Skey)),
   (#0:IMsg notLeq h(n(#8:Name, #9:Fresh),priv(#8:Name))),
   (#0:IMsg notLeq senc(#10:Skey, #11:Skey)),
   (#0:IMsg notLeq aenc(#12:Skey, #13:Akey)),
   (#0:IMsg notLeq n(i, #14:Fresh)),
   (#0:IMsg notLeq #15:IMsg ; sKey(#16:Name, #17:Fresh)),
   #0:IMsg notLeq sKey(#18:Name, #19:Fresh) => (#0:IMsg ; #20:IMsg) inL .  ;
grl (#1:IMsg ; #0:IMsg) notInI,
   (#1:IMsg notLeq #2:Name),
   (#1:IMsg notLeq pub(#3:Name)),
   (#1:IMsg notLeq priv(i)),
   (#1:IMsg notLeq h(n(i, #4:Fresh),priv(#5:Name))),
   (#1:IMsg notLeq h(n(#6:Name, #7:Fresh),#8:Skey)),
   (#1:IMsg notLeq h(n(#9:Name, #10:Fresh),priv(#9:Name))),
   (#1:IMsg notLeq senc(#11:Skey, #12:Skey)),
   (#1:IMsg notLeq aenc(#13:Skey, #14:Akey)),
   (#1:IMsg notLeq n(i, #15:Fresh)),
   (#1:IMsg notLeq sKey(#16:Name, #17:Fresh)),
   (#1:IMsg ; #0:IMsg) notLeq #18:IMsg ; sKey(#19:Name, #20:Fresh) => #1:IMsg inL .
    )
|
grl empty => (#1:IMsg ; #2:IMsg) inL .
|
grl #50:Skey notInI => aenc(#50:Skey, #60:Akey) inL .
|
grl #0:Akey notInI,
   #0:Akey notLeq pub(#1:Name) => aenc(#2:Skey, #0:Akey) inL .
| (errorNoHeuristicApplied {
grl empty => aenc(#1:Skey, #2:Akey) inL . ,none,
grl empty => (#1:Skey,#2:Akey) inL . ,none,
grl empty => (#1:Skey,#2:Akey) inL . } usingGrammar
grl empty => aenc(#1:Skey, #2:Akey) inL . )
|
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:Name, #2:Fresh) => h(#0:Nonce,#3:Key) inL .
|
grl #0:Key notInI,
   (#0:Key notLeq priv(#1:Name)),
   #0:Key notLeq sKey(#2:Name, #3:Fresh) => h(#4:Nonce,#0:Key) inL .
|
grl (h(#0:Nonce,#1:Key) notLeq h(n(i, #2:Fresh),priv(#3:Name))),
   (h(#0:Nonce,#1:Key) notLeq h(n(#4:Name, #5:Fresh),#6:Skey)),
   h(#0:Nonce,#1:Key) notLeq h(n(#7:Name, #8:Fresh),priv(#7:Name)) => h(
    #0:Nonce,#1:Key) inL .
|
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL .
|
grl priv(#0:Name) notLeq priv(i) => priv(#0:Name) inL .
| (errorNoHeuristicApplied {
grl empty => pub(#1:Name) inL . ,none,
grl empty => emptyMsgSet inL . ,none,
grl empty => emptyMsgSet inL . } usingGrammar
grl empty => pub(#1:Name) inL . )
| (errorNoHeuristicApplied {
grl empty => sKey(#1:Name, #2:Fresh) inL . ,none,
grl empty => emptyMsgSet inL . ,none,
grl empty => emptyMsgSet inL . } usingGrammar
grl empty => sKey(#1:Name, #2:Fresh) inL . )
| (errorNoHeuristicApplied {
grl #50:Skey notInI => senc(#50:Skey, #60:Skey) inL . ,none,
grl #50:Skey notInI => (h(#63:Nonce,#60:Skey),h(#64:Nonce,#50:Skey)) inL . ,
    none,
grl #50:Skey notInI => (h(#63:Nonce,#60:Skey),h(#64:Nonce,#50:Skey)) inL . }
    usingGrammar
grl #50:Skey notInI => senc(#50:Skey, #60:Skey) inL . )
| (errorNoHeuristicApplied {
grl #50:Skey notInI => senc(#1:Skey, #50:Skey) inL . ,none,
grl #50:Skey notInI => (h(#53:Nonce,#50:Skey),h(#54:Nonce,#1:Skey)) inL . ,
    none,
grl #50:Skey notInI => (h(#53:Nonce,#50:Skey),h(#54:Nonce,#1:Skey)) inL . }
    usingGrammar
grl #50:Skey notInI => senc(#1:Skey, #50:Skey) inL . )
| errorNoHeuristicApplied {
grl empty => senc(#1:Skey, #2:Skey) inL . ,none,
grl empty => (h(#5:Nonce,#2:Skey),h(#6:Nonce,#1:Skey)) inL . ,none,
grl empty => (h(#5:Nonce,#2:Skey),h(#6:Nonce,#1:Skey)) inL . } usingGrammar
grl empty => senc(#1:Skey, #2:Skey) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 5026 in 132ms cpu (462ms real) (38075 rewrites/second)
result ShortIdSystem: < 1 > (
:: nil ::
[ nil,
   -(senc(sKey(a, r1':Fresh), sKey(a, r2':Fresh))),
   -(sKey(a, r2':Fresh)),
   +(sKey(a, r1':Fresh)) | nil]  &
:: r:Fresh,r1:Fresh,r2:Fresh,r1':Fresh,r2':Fresh,r3:Fresh,r3':Fresh ::
[ nil,
   +(h(n(a, r1:Fresh),sKey(a, r1':Fresh))),
   +(h(n(a, r2:Fresh),sKey(a, r2':Fresh))),
   +(sKey(a, r3:Fresh)),
   +(h(n(a, r3':Fresh),priv(a))) | nil] )
|
sKey(a, r1':Fresh) inI
|
nil
|
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 1664760 in 2152ms cpu (7850ms real) (773587 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 9450340 in 11032ms cpu (38559ms real) (856629 rewrites/second)
result Summary: States>> 11 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 38846036 in 42920ms cpu (147579ms real) (905080 rewrites/second)
result Summary: States>> 22 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 118655540 in 128736ms cpu (351066ms real) (921696 rewrites/second)
result Summary: States>> 31 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 165381557 in 178528ms cpu (302191ms real) (926362 rewrites/second)
result Summary: States>> 31 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 162155639 in 183388ms cpu (269007ms real) (884221 rewrites/second)
result Summary: States>> 15 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 58205399 in 68044ms cpu (78721ms real) (855408 rewrites/second)
result Summary: States>> 9 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(8) .
rewrites: 37510758 in 43124ms cpu (54873ms real) (869834 rewrites/second)
result Summary: States>> 5 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(9) .
rewrites: 10261579 in 13100ms cpu (15360ms real) (783326 rewrites/second)
result Summary: States>> 2 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(10) .
rewrites: 97247 in 472ms cpu (541ms real) (206031 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 123 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #5:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))) | nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 3 > (
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #5:Fresh)) |
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) inI
|
+(h(n(a, #6:Fresh),priv(a)))
|
nil)
(< 1 . 4 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))) | nil] )
|
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
< 1 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))) | nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), #1:Skey) inI
|
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey)
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 243 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #5:Fresh)) |
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
+(h(n(a, #6:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 2 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#3:Skey)),
   -(senc(sKey(a, #1:Fresh), #3:Skey)),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))) | nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#3:Skey) inI,
senc(sKey(a, #1:Fresh), #3:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(h(#2:Nonce,#3:Skey)),
-(senc(sKey(a, #1:Fresh), #3:Skey)),
+(sKey(a, #1:Fresh)),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 4 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #1:Fresh))),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,sKey(a, #1:Fresh)) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
-(h(#2:Nonce,sKey(a, #1:Fresh))),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))) | nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #1:Fresh), #2:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(senc(sKey(a, #1:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #1:Fresh)),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
| ghost(#2:Skey))
(< 1 . 3 . 3 > (
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #5:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) inI
|
+(sKey(a, #5:Fresh)),
+(h(n(a, #6:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 4 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #7:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(h(n(a, #8:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #6:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), #1:Skey) inI
|
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(h(n(a, #7:Fresh),priv(a)))
| ghost(#1:Skey))
(< 1 . 4 . 6 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 4 . 3{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#3:Nonce != #4:Nonce),(
#3:Nonce != #0:Nonce),(
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#4:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh))
|
nil)
(< 1 . 4 . 3{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh))
|
nil)
< 1 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#1:Skey)),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#1:Skey) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#2:Nonce != #3:Nonce),
h(#2:Nonce,#1:Skey) != h(#3:Nonce,sKey(a, #0:Fresh))
|
-(h(#2:Nonce,#1:Skey)),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh))
| ghost(#1:Skey)
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 525 in 4ms cpu (0ms real) (131250 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #3:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #4:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #5:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
+(sKey(a, #5:Fresh)),
+(h(n(a, #6:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 1 . 2 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#3:Skey)),
   -(senc(sKey(a, #1:Fresh), #3:Skey)),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#3:Skey) inI,
senc(sKey(a, #1:Fresh), #3:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(h(#2:Nonce,#3:Skey)),
-(senc(sKey(a, #1:Fresh), #3:Skey)),
+(sKey(a, #1:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 1 . 4 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #1:Fresh))),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,sKey(a, #1:Fresh)) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
-(h(#2:Nonce,sKey(a, #1:Fresh))),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 1 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #6:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #1:Fresh), #2:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(senc(sKey(a, #1:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #1:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
| ghost(#2:Skey))
(< 1 . 1 . 2 . 8 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 1 . 2 . 2{2} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#1:Skey) inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#4:Nonce != #5:Nonce),(
#4:Nonce != #0:Nonce),(
h(#4:Nonce,#1:Skey) != h(#5:Nonce,sKey(a, #2:Fresh))),(
h(#4:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#4:Nonce,#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 2 . 2{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh)),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 2 . 4{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 4 . 4 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #9:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), #4:Skey) inI
|
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 4 . 13 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,priv(#6:Name)) inI,
aenc(sKey(a, #2:Fresh), pub(#6:Name)) inI,
sKey(a, #2:Fresh) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 2{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 6 . 2{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
   -(sKey(a, #0:Fresh)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #0:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #0:Fresh)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#3:Nonce != #4:Nonce),
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #0:Fresh))
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
-(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
-(sKey(a, #0:Fresh)),
+(sKey(a, #2:Fresh))
| ghost(#1:Skey))
(< 1 . 3 . 3 . 4 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
sKey(a, #2:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(sKey(a, #7:Fresh)),
+(h(n(a, #8:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 3 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #0:Fresh), #1:Skey) inI
|
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(sKey(a, #6:Fresh)),
+(h(n(a, #7:Fresh),priv(a)))
| ghost(#1:Skey))
(< 1 . 3 . 4 . 6 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #11:Fresh),priv(a)))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 3 . 4 . 3{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#3:Nonce != #4:Nonce),(
#3:Nonce != #0:Nonce),(
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#4:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(h(n(a, #10:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 4 . 3{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh)),
+(h(n(a, #10:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#1:Skey)),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#1:Skey) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#2:Nonce != #3:Nonce),
h(#2:Nonce,#1:Skey) != h(#3:Nonce,sKey(a, #0:Fresh))
|
-(h(#2:Nonce,#1:Skey)),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(h(n(a, #8:Fresh),priv(a)))
| ghost(#1:Skey))
(< 1 . 4 . 6 . 3 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 4 . 6 . 4{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #6:Fresh))),
   -(sKey(a, #6:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #6:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#4:Nonce != #5:Nonce),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 6 . 3{1} . 6 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #4:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #4:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,priv(#7:Name))),
   -(aenc(#2:Skey, pub(#7:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #12:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,priv(#7:Name)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#6:Nonce,priv(#7:Name))),
-(aenc(#2:Skey, pub(#7:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
| ghost(#2:Skey),
ghost(aenc(#2:Skey, pub(#7:Name))))
< 1 . 4 . 6 . 1{2} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh)) inI,
aenc(sKey(a, #4:Fresh), pub(#6:Name)) inI
|
resuscitated(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 998 in 4ms cpu (1ms real) (249500 rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 2 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#3:Skey)),
   -(senc(sKey(a, #1:Fresh), #3:Skey)),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#3:Skey) inI,
senc(sKey(a, #1:Fresh), #3:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(h(#2:Nonce,#3:Skey)),
-(senc(sKey(a, #1:Fresh), #3:Skey)),
+(sKey(a, #1:Fresh)),
+(sKey(a, #7:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #1:Fresh))),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #5:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #6:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,sKey(a, #1:Fresh)) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,
sKey(a, #1:Fresh) inI
|
-(h(#2:Nonce,sKey(a, #1:Fresh))),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #7:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 6 > (
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #0:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh ::
[ nil,
   +(h(n(a, #4:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #5:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
sKey(a, #1:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
senc(sKey(a, #1:Fresh), #2:Skey) inI,
senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh)) inI
|
-(senc(sKey(a, #1:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #1:Fresh)),
+(sKey(a, #6:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(senc(sKey(a, #0:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #0:Fresh))
| ghost(#2:Skey))
(< 1 . 1 . 1 . 2 . 8 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 1 . 1 . 2 . 2{2} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#1:Skey) inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#4:Nonce != #5:Nonce),(
#4:Nonce != #0:Nonce),(
h(#4:Nonce,#1:Skey) != h(#5:Nonce,sKey(a, #2:Fresh))),(
h(#4:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#4:Nonce,#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 2 . 2{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 2 . 4{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 4 . 4 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #7:Fresh)) |
   +(h(n(a, #9:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), #4:Skey) inI
|
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #9:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 1 . 4 . 13 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,priv(#6:Name)) inI,
aenc(sKey(a, #2:Fresh), pub(#6:Name)) inI,
sKey(a, #2:Fresh) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 1 . 4 . 2{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 6 . 2{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
   -(sKey(a, #0:Fresh)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #0:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #0:Fresh)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#3:Nonce != #4:Nonce),
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #0:Fresh))
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
-(sKey(a, #0:Fresh)),
+(sKey(a, #2:Fresh))
| ghost(#1:Skey))
(< 1 . 1 . 2 . 8 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI
|
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 2 . 8 . 5 > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 2 . 8 . 3{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#2:Skey) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#5:Nonce != #6:Nonce),
h(#5:Nonce,#2:Skey) != h(#6:Nonce,sKey(a, #3:Fresh))
|
-(h(#5:Nonce,#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 2 . 2{2} . 2{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(h(#7:Nonce,sKey(a, #5:Fresh))),
   +(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #3:Fresh,#5:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#4:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,sKey(a, #5:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(h(#7:Nonce,sKey(a, #5:Fresh))),
+(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(h(#4:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #5:Fresh))
|
nil)
(< 1 . 1 . 2 . 4{3} . 2{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI
|
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 4 . 4 . 2{3} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#4:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #4:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
senc(sKey(a, #1:Fresh), #4:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#5:Nonce,#4:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI
|
-(h(#5:Nonce,#4:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #4:Skey)),
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 4 . 13 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
aenc(sKey(a, #2:Fresh), pub(a)) inI,
sKey(a, #2:Fresh) inI
|
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 9 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(#5:Name)),
   +(aenc(sKey(a, #2:Fresh), pub(#5:Name))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,priv(#5:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#5:Name)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,priv(#5:Name)) inI,
sKey(a, #2:Fresh) inI
|
-(sKey(a, #2:Fresh)),
-(pub(#5:Name)),
+(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
-(h(#6:Nonce,priv(#5:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(pub(#5:Name)))
(< 1 . 1 . 4 . 13 . 5{2} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(sKey(a, #2:Fresh)),
   +(aenc(sKey(a, #2:Fresh), pub(#6:Name))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#6:Name)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,priv(#6:Name)) inI,
h(#7:Nonce,priv(#6:Name)) inI,
sKey(a, #2:Fresh) inI,(
#5:Nonce != #7:Nonce),
h(#5:Nonce,priv(#6:Name)) != h(#7:Nonce,priv(#6:Name))
|
-(h(#5:Nonce,priv(#6:Name))),
-(sKey(a, #2:Fresh)),
+(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
-(h(#7:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 6 . 2{1} . 8 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#6:Nonce,priv(#7:Name))),
   -(aenc(#2:Skey, pub(#7:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #12:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
sKey(a, #4:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,priv(#7:Name)) inI,
senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
-(h(#6:Nonce,priv(#7:Name))),
-(aenc(#2:Skey, pub(#7:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh)),
-(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
-(sKey(a, #4:Fresh)),
+(sKey(a, #5:Fresh))
| ghost(#2:Skey),
ghost(aenc(#2:Skey, pub(#7:Name))))
(< 1 . 3 . 3 . 4 . 7 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #11:Fresh),priv(a)))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 3 . 3 . 4 . 4{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#3:Nonce != #4:Nonce),(
#3:Nonce != #0:Nonce),(
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #2:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#4:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 3 . 4 . 4{3} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #2:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #2:Fresh)) | nil]  &
:: #2:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
h(#3:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a)))
|
nil)
(< 1 . 3 . 3 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,#1:Skey)),
   -(h(#3:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #0:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #0:Fresh)) | nil]  &
:: #4:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #0:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #0:Fresh) !inI,
h(#2:Nonce,#1:Skey) inI,
h(#3:Nonce,sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#2:Nonce != #3:Nonce),
h(#2:Nonce,#1:Skey) != h(#3:Nonce,sKey(a, #0:Fresh))
|
-(h(#2:Nonce,#1:Skey)),
-(h(#3:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #8:Fresh),priv(a)))
| ghost(#1:Skey))
(< 1 . 3 . 4 . 6 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #6:Fresh))),
   -(sKey(a, #6:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #6:Fresh))),
   +(sKey(a, #11:Fresh)) |
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#4:Nonce != #5:Nonce),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #13:Fresh),priv(a)))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 4 . 6 . 3 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
+(sKey(a, #8:Fresh)),
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 4 . 6 . 3 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #6:Fresh))),
   -(sKey(a, #6:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #6:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#4:Nonce != #5:Nonce),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 6 . 3{1} . 6 . 3 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #4:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #4:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
#2:Skey !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
aenc(#2:Skey, pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
generatedByIntruder(aenc(#2:Skey, pub(a))),
generatedByIntruder(#2:Skey),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 3 . 4 . 6 . 1{2} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh)) inI,
aenc(sKey(a, #4:Fresh), pub(#6:Name)) inI
|
resuscitated(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #3:Fresh)),
+(h(n(a, #11:Fresh),priv(a)))
|
nil)
< 1 . 4 . 6 . 1{2} . 0 . 3 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #4:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #7:Fresh)) |
   +(h(n(a, #4:Fresh),priv(a))), nil] )
|
h(n(a, #4:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI,
aenc(sKey(a, #2:Fresh), pub(a)) inI
|
+(h(n(a, #4:Fresh),priv(a))),
resuscitated(aenc(sKey(a, #2:Fresh), pub(a))),
-(h(n(a, #4:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 1553 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 2 . 9 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(#2:Skey, pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(#2:Skey, pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#6:Name))))
(< 1 . 1 . 1 . 1 . 2 . 3{2} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(h(#5:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#1:Skey) inI,
h(#5:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI,(
#1:Skey != sKey(a, #2:Fresh)),(
#4:Nonce != #5:Nonce),(
#4:Nonce != #0:Nonce),(
h(#4:Nonce,#1:Skey) != h(#5:Nonce,sKey(a, #2:Fresh))),(
h(#4:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#5:Nonce,sKey(a, #2:Fresh)) != h(#0:Nonce,#1:Skey)
|
-(h(#4:Nonce,#1:Skey)),
-(h(#5:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 2 . 3{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #2:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#0:Nonce,sKey(a, #2:Fresh)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#4:Nonce,sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,sKey(a, #2:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #2:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 2 . 5{3} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,sKey(a, #2:Fresh)) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
senc(sKey(a, #2:Fresh), #1:Skey) inI
|
-(h(#4:Nonce,sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 . 5 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #9:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), #4:Skey) inI
|
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #7:Fresh)),
+(h(n(a, #9:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 1 . 1 . 4 . 14 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,priv(#6:Name)) inI,
aenc(sKey(a, #2:Fresh), pub(#6:Name)) inI,
sKey(a, #2:Fresh) inI
|
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #9:Fresh)),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 . 3{1} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #8:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 6 . 2{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(#4:Nonce,sKey(a, #0:Fresh))),
   +(senc(sKey(a, #0:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
   -(sKey(a, #0:Fresh)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #0:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #0:Fresh)), nil]  &
:: #2:Fresh,#5:Fresh,#0:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #2:Fresh))),
   +(h(n(a, #7:Fresh),sKey(a, #0:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
senc(sKey(a, #0:Fresh), #1:Skey) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #0:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #0:Fresh)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh)) inI,(
#1:Skey != sKey(a, #0:Fresh)),(
#3:Nonce != #4:Nonce),
h(#3:Nonce,#1:Skey) != h(#4:Nonce,sKey(a, #0:Fresh))
|
-(h(#3:Nonce,#1:Skey)),
-(h(#4:Nonce,sKey(a, #0:Fresh))),
+(senc(sKey(a, #0:Fresh), #1:Skey)),
-(senc(sKey(a, #0:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #0:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #2:Fresh), sKey(a, #0:Fresh))),
-(sKey(a, #0:Fresh)),
+(sKey(a, #2:Fresh))
| ghost(#1:Skey))
(< 1 . 1 . 1 . 2 . 8 . 4 > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #11:Fresh)) |
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #13:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 1 . 2 . 8 . 2{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #11:Fresh)) |
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#2:Skey) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#5:Nonce != #6:Nonce),
h(#5:Nonce,#2:Skey) != h(#6:Nonce,sKey(a, #3:Fresh))
|
-(h(#5:Nonce,#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #13:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 1 . 2 . 2{2} . 2{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(h(#7:Nonce,sKey(a, #5:Fresh))),
   +(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #3:Fresh,#5:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #12:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#4:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,sKey(a, #5:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(h(#7:Nonce,sKey(a, #5:Fresh))),
+(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(h(#4:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh)),
+(h(n(a, #12:Fresh),priv(a))),
-(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #5:Fresh))
|
nil)
(< 1 . 1 . 1 . 2 . 4{3} . 2{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #12:Fresh),priv(a))), nil] )
|
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI
|
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
+(h(n(a, #12:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 4 . 4 . 2{3} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#4:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #4:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
senc(sKey(a, #1:Fresh), #4:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#5:Nonce,#4:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI
|
-(h(#5:Nonce,#4:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #4:Skey)),
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 2 . 8 . 2 . 1 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI
|
+(sKey(a, #8:Fresh)),
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 2 . 8 . 2 . 4 > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#6:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 2 . 8 . 2 . 2{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#2:Skey) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#5:Nonce != #6:Nonce),
h(#5:Nonce,#2:Skey) != h(#6:Nonce,sKey(a, #3:Fresh))
|
-(h(#5:Nonce,#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 4 . 4 . 2{3} . 8 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#6:Skey, pub(#8:Name))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#3:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI
|
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#6:Skey, pub(#8:Name))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#6:Skey),
ghost(aenc(#6:Skey, pub(#8:Name))))
(< 1 . 1 . 4 . 13 . 2 . 1 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
aenc(sKey(a, #2:Fresh), pub(a)) inI,
sKey(a, #2:Fresh) inI
|
+(sKey(a, #8:Fresh)),
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 8 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #6:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #8:Fresh)) |
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
sKey(a, #2:Fresh) inI
|
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 9 . 5 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(#5:Name)),
   +(aenc(sKey(a, #2:Fresh), pub(#5:Name))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#5:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#5:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#7:Nonce,priv(#5:Name)) inI,
senc(sKey(a, #2:Fresh), #6:Skey) inI
|
-(senc(sKey(a, #2:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #2:Fresh)),
-(sKey(a, #2:Fresh)),
-(pub(#5:Name)),
+(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
-(h(#7:Nonce,priv(#5:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(#6:Skey),
ghost(pub(#5:Name)))
(< 1 . 1 . 4 . 13 . 9 . 3{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(#5:Name)),
   +(aenc(sKey(a, #2:Fresh), pub(#5:Name))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#8:Nonce,priv(#5:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#5:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#8:Nonce,priv(#5:Name)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #2:Fresh)),
-(sKey(a, #2:Fresh)),
-(pub(#5:Name)),
+(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
-(h(#8:Nonce,priv(#5:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(pub(#5:Name)))
(< 1 . 1 . 4 . 13 . 9 . 3{2} > (
:: nil ::
[ nil |
   -(h(#6:Nonce,#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(#5:Name)),
   +(aenc(sKey(a, #2:Fresh), pub(#5:Name))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#8:Nonce,priv(#5:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#5:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#6:Nonce,#7:Skey) inI,
h(#8:Nonce,priv(#5:Name)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#7:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != #6:Nonce),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#6:Nonce,#7:Skey)
|
-(h(#6:Nonce,#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(sKey(a, #2:Fresh)),
-(sKey(a, #2:Fresh)),
-(pub(#5:Name)),
+(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
-(h(#8:Nonce,priv(#5:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#5:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(pub(#5:Name)))
(< 1 . 1 . 4 . 13 . 5{2} . 6 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,priv(#1:Name))),
   -(sKey(a, #2:Fresh)),
   +(aenc(sKey(a, #2:Fresh), pub(#1:Name))), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   -(#7:Skey),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#8:Nonce,priv(#1:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#6:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #6:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#1:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#5:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,priv(#1:Name)) inI,
h(#8:Nonce,priv(#1:Name)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#0:Nonce != #8:Nonce),
h(#0:Nonce,priv(#1:Name)) != h(#8:Nonce,priv(#1:Name))
|
-(senc(sKey(a, #2:Fresh), #7:Skey)),
-(#7:Skey),
+(sKey(a, #2:Fresh)),
-(h(#0:Nonce,priv(#1:Name))),
-(sKey(a, #2:Fresh)),
+(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
-(h(#8:Nonce,priv(#1:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
| ghost(#7:Skey))
(< 1 . 1 . 4 . 13 . 5{2} . 4{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,priv(#1:Name))),
   -(sKey(a, #2:Fresh)),
   +(aenc(sKey(a, #2:Fresh), pub(#1:Name))), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#1:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#6:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #11:Fresh),sKey(a, #6:Fresh))),
   +(h(n(a, #13:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #12:Fresh)),
   +(h(n(a, #14:Fresh),priv(a))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#1:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#5:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,priv(#1:Name)) inI,
h(#9:Nonce,priv(#1:Name)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh)) inI,(
#0:Nonce != #9:Nonce),
h(#0:Nonce,priv(#1:Name)) != h(#9:Nonce,priv(#1:Name))
|
-(h(#5:Nonce,sKey(a, #6:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))),
+(sKey(a, #2:Fresh)),
-(h(#0:Nonce,priv(#1:Name))),
-(sKey(a, #2:Fresh)),
+(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
-(h(#9:Nonce,priv(#1:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 5{2} . 4{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,priv(#1:Name))),
   -(sKey(a, #2:Fresh)),
   +(aenc(sKey(a, #2:Fresh), pub(#1:Name))), nil]  &
:: nil ::
[ nil |
   -(h(#7:Nonce,#8:Skey)),
   -(senc(sKey(a, #2:Fresh), #8:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#1:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#6:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #11:Fresh),sKey(a, #6:Fresh))),
   +(h(n(a, #13:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #12:Fresh)),
   +(h(n(a, #14:Fresh),priv(a))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#1:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#5:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,priv(#1:Name)) inI,
h(#7:Nonce,#8:Skey) inI,
h(#9:Nonce,priv(#1:Name)) inI,
senc(sKey(a, #2:Fresh), #8:Skey) inI,(
#8:Skey != sKey(a, #6:Fresh)),(
#5:Nonce != #7:Nonce),(
#0:Nonce != #9:Nonce),(
h(#5:Nonce,sKey(a, #6:Fresh)) != h(#7:Nonce,#8:Skey)),
h(#0:Nonce,priv(#1:Name)) != h(#9:Nonce,priv(#1:Name))
|
-(h(#7:Nonce,#8:Skey)),
-(senc(sKey(a, #2:Fresh), #8:Skey)),
+(sKey(a, #2:Fresh)),
-(h(#0:Nonce,priv(#1:Name))),
-(sKey(a, #2:Fresh)),
+(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
-(h(#9:Nonce,priv(#1:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
|
nil)
(< 1 . 1 . 6 . 2{1} . 8 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
#2:Skey !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
aenc(#2:Skey, pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
generatedByIntruder(aenc(#2:Skey, pub(a))),
generatedByIntruder(#2:Skey),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh)),
-(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
-(sKey(a, #4:Fresh)),
+(sKey(a, #5:Fresh))
|
nil)
(< 1 . 3 . 3 . 4 . 7 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #6:Fresh))),
   -(sKey(a, #6:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#6:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #6:Fresh))) |
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#4:Nonce != #5:Nonce),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #11:Fresh)),
+(h(n(a, #13:Fresh),priv(a)))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 4 . 6 . 3 . 2 . 3{1} > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#2:Skey)),
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #6:Fresh))),
   -(sKey(a, #6:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #6:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
h(#4:Nonce,#2:Skey) inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#4:Nonce != #5:Nonce),
h(#4:Nonce,#2:Skey) != h(#5:Nonce,sKey(a, #3:Fresh))
|
-(h(#4:Nonce,#2:Skey)),
-(h(#5:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #10:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 6 . 3{1} . 6 . 3 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #4:Fresh), sKey(a, #5:Fresh))),
   -(sKey(a, #5:Fresh)),
   +(sKey(a, #4:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
#2:Skey !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
aenc(#2:Skey, pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
+(sKey(a, #10:Fresh)),
generatedByIntruder(aenc(#2:Skey, pub(a))),
generatedByIntruder(#2:Skey),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 3 . 3 . 4 . 7 . 1{2} . 0 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#5:Nonce,priv(#6:Name))),
   -(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
h(#5:Nonce,priv(#6:Name)) inI,
senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh)) inI,
aenc(sKey(a, #4:Fresh), pub(#6:Name)) inI
|
resuscitated(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
-(h(#5:Nonce,priv(#6:Name))),
-(aenc(sKey(a, #4:Fresh), pub(#6:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #4:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #3:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #11:Fresh),priv(a)))
|
nil)
< 1 . 4 . 6 . 1{2} . 0 . 3 . 2 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil,
   -(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #3:Fresh)) | nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #4:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #4:Fresh),priv(a))), nil] )
|
h(n(a, #4:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh)) inI,
aenc(sKey(a, #2:Fresh), pub(a)) inI
|
+(sKey(a, #6:Fresh)),
+(h(n(a, #4:Fresh),priv(a))),
resuscitated(aenc(sKey(a, #2:Fresh), pub(a))),
-(h(n(a, #4:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #2:Fresh))),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 1926 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 2 . 9 . 4 > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #11:Fresh)),
+(h(n(a, #13:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 1 . 1 . 2 . 9 . 2{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#2:Skey, pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh,#13:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #13:Fresh),priv(a))), nil] )
|
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#2:Skey) inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#5:Nonce != #6:Nonce),
h(#5:Nonce,#2:Skey) != h(#6:Nonce,sKey(a, #3:Fresh))
|
-(h(#5:Nonce,#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#2:Skey, pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #11:Fresh)),
+(h(n(a, #13:Fresh),priv(a))),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(#8:Name))))
(< 1 . 1 . 1 . 1 . 2 . 3{2} . 5{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(h(#7:Nonce,sKey(a, #5:Fresh))),
   +(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #3:Fresh,#5:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))), nil] )
|
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#4:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,
h(#7:Nonce,sKey(a, #5:Fresh)) inI
|
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(h(#7:Nonce,sKey(a, #5:Fresh))),
+(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(h(#4:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #10:Fresh)),
+(h(n(a, #12:Fresh),priv(a))),
-(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #5:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 2 . 5{3} . 4{3} > (
:: nil ::
[ nil |
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   -(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #12:Fresh),priv(a))), nil] )
|
senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI
|
-(h(#6:Nonce,sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
-(senc(sKey(a, #1:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #1:Fresh)),
+(sKey(a, #10:Fresh)),
+(h(n(a, #12:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 . 5 . 3{3} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#4:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #4:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #4:Skey)),
   -(#4:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
senc(sKey(a, #1:Fresh), #4:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#5:Nonce,#4:Skey) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI
|
-(h(#5:Nonce,#4:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #4:Skey)),
-(senc(sKey(a, #1:Fresh), #4:Skey)),
-(#4:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #8:Fresh)),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#4:Skey))
(< 1 . 1 . 2 . 8 . 2 . 1 . 4 > (
:: nil ::
[ nil |
   -(h(#5:Nonce,sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,sKey(a, #3:Fresh)) inI,
h(#6:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI
|
-(h(#5:Nonce,sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #10:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 2 . 8 . 2 . 1 . 2{1} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#2:Skey)),
   -(h(#6:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #3:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #3:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #3:Fresh), #2:Skey) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#5:Nonce,#2:Skey) inI,
h(#6:Nonce,sKey(a, #3:Fresh)) inI,
senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh)) inI,(
#2:Skey != sKey(a, #3:Fresh)),(
#5:Nonce != #6:Nonce),
h(#5:Nonce,#2:Skey) != h(#6:Nonce,sKey(a, #3:Fresh))
|
-(h(#5:Nonce,#2:Skey)),
-(h(#6:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #10:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(senc(sKey(a, #4:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#2:Skey, pub(a))))
(< 1 . 1 . 4 . 4 . 2{3} . 8 . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#6:Skey, pub(a))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
#6:Skey !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
aenc(#6:Skey, pub(a)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI
|
generatedByIntruder(aenc(#6:Skey, pub(a))),
generatedByIntruder(#6:Skey),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#6:Skey, pub(a))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 1 . 8 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #5:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #9:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #5:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #5:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
sKey(a, #2:Fresh) inI
|
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(sKey(a, #8:Fresh)),
+(h(n(a, #5:Fresh),priv(a))),
-(h(n(a, #5:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 8 . 4 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), #5:Skey)),
   -(#5:Skey),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)) |
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #2:Fresh), #5:Skey) inI
|
-(senc(sKey(a, #2:Fresh), #5:Skey)),
-(#5:Skey),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(#5:Skey))
(< 1 . 1 . 4 . 13 . 2 . 8 . 2{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 8 . 2{2} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #10:Fresh)) |
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,#6:Skey) inI,
senc(sKey(a, #2:Fresh), #6:Skey) inI,(
#6:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != #5:Nonce),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#5:Nonce,#6:Skey)
|
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 9 . 3{2} . 11{1} > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(#8:Name)),
   +(aenc(sKey(a, #2:Fresh), pub(#8:Name))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#8:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#8:Name))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#8:Name))),
   -(aenc(#7:Skey, pub(#8:Name))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #2:Fresh,#4:Fresh,#12:Fresh,#13:Fresh,#14:Fresh,#15:Fresh,#16:Fresh ::
[ nil,
   +(h(n(a, #13:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #15:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #14:Fresh)),
   +(h(n(a, #16:Fresh),priv(a))) | nil] )
|
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#8:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#9:Nonce,priv(#8:Name)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#7:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#5:Name, #6:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#5:Name, #6:Fresh),#7:Skey)
|
-(h(#9:Nonce,priv(#8:Name))),
-(aenc(#7:Skey, pub(#8:Name))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(sKey(a, #2:Fresh)),
-(sKey(a, #2:Fresh)),
-(pub(#8:Name)),
+(aenc(sKey(a, #2:Fresh), pub(#8:Name))),
-(h(#9:Nonce,priv(#8:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#8:Name))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#7:Skey, pub(#8:Name))),
ghost(pub(#8:Name)))
(< 1 . 1 . 4 . 13 . 5{2} . 4{2} . 14{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,priv(#1:Name))),
   -(sKey(a, #2:Fresh)),
   +(aenc(sKey(a, #2:Fresh), pub(#1:Name))), nil]  &
:: nil ::
[ nil |
   -(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#7:Name, #8:Fresh),#9:Skey)),
   -(senc(sKey(a, #2:Fresh), #9:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #4:Fresh ::
[ nil |
   -(h(#10:Nonce,priv(#1:Name))),
   -(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
   +(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #8:Fresh ::
[ nil |
   -(h(#10:Nonce,priv(#1:Name))),
   -(aenc(#9:Skey, pub(#1:Name))),
   +(h(n(#7:Name, #8:Fresh),#9:Skey)), nil]  &
:: #2:Fresh,#6:Fresh,#13:Fresh,#14:Fresh,#15:Fresh,#16:Fresh,#17:Fresh ::
[ nil,
   +(h(n(a, #14:Fresh),sKey(a, #6:Fresh))),
   +(h(n(a, #16:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #15:Fresh)),
   +(h(n(a, #17:Fresh),priv(a))) | nil] )
|
h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh)) !inI,
h(n(#7:Name, #8:Fresh),#9:Skey) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(#1:Name)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#5:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,priv(#1:Name)) inI,
h(#10:Nonce,priv(#1:Name)) inI,
senc(sKey(a, #2:Fresh), #9:Skey) inI,(
#9:Skey != sKey(a, #6:Fresh)),(
#5:Nonce != n(#7:Name, #8:Fresh)),(
#0:Nonce != #10:Nonce),(
h(#5:Nonce,sKey(a, #6:Fresh)) != h(n(#7:Name, #8:Fresh),#9:Skey)),
h(#0:Nonce,priv(#1:Name)) != h(#10:Nonce,priv(#1:Name))
|
-(h(#10:Nonce,priv(#1:Name))),
-(aenc(#9:Skey, pub(#1:Name))),
+(h(n(#7:Name, #8:Fresh),#9:Skey)),
-(h(n(#7:Name, #8:Fresh),#9:Skey)),
-(senc(sKey(a, #2:Fresh), #9:Skey)),
+(sKey(a, #2:Fresh)),
-(h(#0:Nonce,priv(#1:Name))),
-(sKey(a, #2:Fresh)),
+(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
-(h(#10:Nonce,priv(#1:Name))),
-(aenc(sKey(a, #2:Fresh), pub(#1:Name))),
+(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(#3:Name, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
| ghost(aenc(#9:Skey, pub(#1:Name))))
< 1 . 1 . 6 . 2{1} . 8 . 2 . 1 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), #2:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), #2:Skey)),
   -(#2:Skey),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
   -(sKey(a, #4:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #9:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
#2:Skey !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #4:Fresh), #2:Skey) !inI,
aenc(#2:Skey, pub(a)) !inI,
sKey(a, #4:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh)) inI,(
#2:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#0:Name, #1:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
+(sKey(a, #10:Fresh)),
generatedByIntruder(aenc(#2:Skey, pub(a))),
generatedByIntruder(#2:Skey),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), #2:Skey)),
-(senc(sKey(a, #4:Fresh), #2:Skey)),
-(#2:Skey),
+(sKey(a, #4:Fresh)),
-(senc(sKey(a, #5:Fresh), sKey(a, #4:Fresh))),
-(sKey(a, #4:Fresh)),
+(sKey(a, #5:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 2134 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 2 . 3{2} . 5{3} . 1{2} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,#1:Skey)),
   -(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(senc(sKey(a, #2:Fresh), #1:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#5:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #6:Fresh))) |
   +(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
h(n(a, #4:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), #1:Skey) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#3:Nonce,#1:Skey) inI,
h(#5:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,(
h(#3:Nonce,#1:Skey) != h(#5:Nonce,sKey(a, #6:Fresh))),(
h(#3:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),
h(#5:Nonce,sKey(a, #6:Fresh)) != h(#0:Nonce,#1:Skey)
|
+(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#5:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(h(#3:Nonce,#1:Skey)),
-(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), #1:Skey)),
-(h(#0:Nonce,#1:Skey)),
-(senc(sKey(a, #2:Fresh), #1:Skey)),
+(sKey(a, #2:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 2 . 3{2} . 5{3} . 1{4} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #6:Fresh))),
   -(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   +(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #6:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #6:Fresh))) |
   +(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #10:Fresh),priv(a))), nil] )
|
h(n(a, #4:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh)) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#3:Nonce,sKey(a, #6:Fresh)) inI,
h(#0:Nonce,sKey(a, #6:Fresh)) inI
|
+(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #6:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #2:Fresh))),
+(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))),
-(h(#0:Nonce,sKey(a, #6:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #6:Fresh))),
+(sKey(a, #2:Fresh)),
+(sKey(a, #9:Fresh)),
+(h(n(a, #10:Fresh),priv(a))),
-(senc(sKey(a, #6:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #6:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 . 5 . 3{3} . 2{2} > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(#4:Nonce,sKey(a, #5:Fresh))),
   +(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #5:Fresh))) |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #7:Fresh)),
   +(h(n(a, #9:Fresh),priv(a))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#4:Nonce,sKey(a, #5:Fresh)) inI,
h(#0:Nonce,#1:Skey) inI,
h(#4:Nonce,sKey(a, #5:Fresh)) != h(#0:Nonce,#1:Skey)
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #3:Fresh)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#4:Nonce,sKey(a, #5:Fresh))),
+(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #7:Fresh)),
+(h(n(a, #9:Fresh),priv(a))),
-(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #5:Fresh))
| ghost(#1:Skey))
(< 1 . 1 . 4 . 4 . 2{3} . 8 . 2 . 1 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(#0:Nonce,sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#6:Skey, pub(a))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #1:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
#6:Skey !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
aenc(#6:Skey, pub(a)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI,
h(#0:Nonce,sKey(a, #1:Fresh)) inI
|
+(sKey(a, #9:Fresh)),
generatedByIntruder(aenc(#6:Skey, pub(a))),
generatedByIntruder(#6:Skey),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#6:Skey, pub(a))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(#0:Nonce,sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 1 . 8 . 4 > (
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #2:Fresh), #5:Skey)),
   -(#5:Skey),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #6:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #7:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #10:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #6:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #6:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #2:Fresh), #5:Skey) inI
|
-(senc(sKey(a, #2:Fresh), #5:Skey)),
-(#5:Skey),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(sKey(a, #9:Fresh)),
+(h(n(a, #6:Fresh),priv(a))),
-(h(n(a, #6:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(#5:Skey))
(< 1 . 1 . 4 . 13 . 2 . 1 . 8 . 2{1} > (
:: nil ::
[ nil |
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   -(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh)) inI
|
-(h(#3:Nonce,sKey(a, #4:Fresh))),
-(senc(sKey(a, #2:Fresh), sKey(a, #4:Fresh))),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(sKey(a, #10:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 1 . 8 . 2{2} > (
:: nil ::
[ nil |
   -(h(#5:Nonce,#6:Skey)),
   -(senc(sKey(a, #2:Fresh), #6:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #2:Fresh,#4:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil,
   +(h(n(a, #8:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #11:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#5:Nonce,#6:Skey) inI,
senc(sKey(a, #2:Fresh), #6:Skey) inI,(
#6:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != #5:Nonce),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(#5:Nonce,#6:Skey)
|
-(h(#5:Nonce,#6:Skey)),
-(senc(sKey(a, #2:Fresh), #6:Skey)),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(sKey(a, #10:Fresh)),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 8 . 2{2} . 8 > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#10:Name))),
   -(aenc(#7:Skey, pub(#10:Name))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #2:Fresh,#4:Fresh,#8:Fresh,#11:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #12:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #14:Fresh),sKey(a, #2:Fresh))),
   +(sKey(a, #13:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #8:Fresh),priv(a)) !inI,
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#9:Nonce,priv(#10:Name)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#7:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#5:Name, #6:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#5:Name, #6:Fresh),#7:Skey)
|
-(h(#9:Nonce,priv(#10:Name))),
-(aenc(#7:Skey, pub(#10:Name))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(a, #8:Fresh),priv(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#7:Skey, pub(#10:Name))))
< 1 . 1 . 4 . 13 . 9 . 3{2} . 11{1} . 1 > (
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
   -(h(#6:Nonce,sKey(a, #7:Fresh))),
   +(senc(sKey(a, #7:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),#2:Skey)),
   -(senc(sKey(a, #3:Fresh), #2:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #7:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #7:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #3:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #3:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(#2:Skey, pub(a))),
   +(h(n(#0:Name, #1:Fresh),#2:Skey)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(sKey(a, #3:Fresh), pub(a))),
   +(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))), nil]  &
:: #3:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #7:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #11:Fresh)) |
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #8:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(#0:Name, #1:Fresh),#2:Skey) !inI,
senc(sKey(a, #7:Fresh), sKey(a, #3:Fresh)) !inI,
aenc(sKey(a, #3:Fresh), pub(a)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #7:Fresh) !inI,
h(#6:Nonce,sKey(a, #7:Fresh)) inI,
senc(sKey(a, #3:Fresh), #2:Skey) inI,(
#2:Skey != sKey(a, #7:Fresh)),(
#6:Nonce != n(#0:Name, #1:Fresh)),
h(#6:Nonce,sKey(a, #7:Fresh)) != h(n(#0:Name, #1:Fresh),#2:Skey)
|
generatedByIntruder(pub(a)),
+(h(n(a, #8:Fresh),priv(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(#2:Skey, pub(a))),
+(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(h(n(#0:Name, #1:Fresh),#2:Skey)),
-(senc(sKey(a, #3:Fresh), #2:Skey)),
+(sKey(a, #3:Fresh)),
-(sKey(a, #3:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #3:Fresh), pub(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(sKey(a, #3:Fresh), pub(a))),
+(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(n(#4:Name, #5:Fresh),sKey(a, #3:Fresh))),
-(h(#6:Nonce,sKey(a, #7:Fresh))),
+(senc(sKey(a, #7:Fresh), sKey(a, #3:Fresh))),
-(senc(sKey(a, #7:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #7:Fresh))
| ghost(aenc(#2:Skey, pub(a)))
==========================================
reduce in MAUDE-NPA : run(8) .
rewrites: 2262 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 2 . 3{2} . 5{3} . 1{2} . 2 > (
:: nil ::
[ nil |
   -(h(#4:Nonce,#1:Skey)),
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
   +(senc(sKey(a, #6:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #6:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #6:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh,#9:Fresh ::
[ nil |
   +(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #8:Fresh)),
   +(h(n(a, #9:Fresh),priv(a))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #5:Fresh),sKey(a, #6:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #6:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #6:Fresh) !inI,
h(#4:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) inI,(
h(#4:Nonce,#1:Skey) != h(#0:Nonce,#1:Skey)),(
h(#4:Nonce,#1:Skey) != h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
h(#0:Nonce,#1:Skey) != h(n(a, #5:Fresh),sKey(a, #6:Fresh))
|
+(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #5:Fresh),sKey(a, #6:Fresh))),
+(senc(sKey(a, #6:Fresh), sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(h(#4:Nonce,#1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
+(sKey(a, #3:Fresh)),
+(sKey(a, #8:Fresh)),
+(h(n(a, #9:Fresh),priv(a))),
-(senc(sKey(a, #6:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #6:Fresh))
|
nil)
(< 1 . 1 . 1 . 1 . 4 . 5 . 3{3} . 2{2} . 2 > (
:: nil ::
[ nil |
   -(h(#0:Nonce,#1:Skey)),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), #1:Skey)), nil]  &
:: nil ::
[ nil |
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   -(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
   +(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), #1:Skey)),
   -(#1:Skey),
   +(sKey(a, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
   -(sKey(a, #3:Fresh)),
   +(sKey(a, #5:Fresh)), nil]  &
:: #2:Fresh,#3:Fresh,#4:Fresh,#5:Fresh,#7:Fresh,#6:Fresh,#8:Fresh ::
[ nil |
   +(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(sKey(a, #6:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #4:Fresh),sKey(a, #5:Fresh)) !inI,
senc(sKey(a, #3:Fresh), #1:Skey) !inI,
senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh)) !inI,
sKey(a, #3:Fresh) !inI,
sKey(a, #5:Fresh) !inI,
h(#0:Nonce,#1:Skey) inI,
h(#0:Nonce,#1:Skey) != h(n(a, #4:Fresh),sKey(a, #5:Fresh))
|
+(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(#0:Nonce,#1:Skey)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), #1:Skey)),
-(senc(sKey(a, #3:Fresh), #1:Skey)),
-(#1:Skey),
+(sKey(a, #3:Fresh)),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
-(h(n(a, #4:Fresh),sKey(a, #5:Fresh))),
+(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
+(sKey(a, #6:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(senc(sKey(a, #5:Fresh), sKey(a, #3:Fresh))),
-(sKey(a, #3:Fresh)),
+(sKey(a, #5:Fresh))
| ghost(#1:Skey))
(< 1 . 1 . 4 . 4 . 2{3} . 8 . 2 . 1 . 2 > (
:: nil ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(h(#2:Nonce,sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#6:Skey, pub(a))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#3:Fresh,#0:Fresh,#7:Fresh,#8:Fresh,#9:Fresh,#10:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #3:Fresh))) |
   +(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
#6:Skey !inI,
h(n(a, #0:Fresh),sKey(a, #1:Fresh)) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
aenc(#6:Skey, pub(a)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#2:Nonce,sKey(a, #3:Fresh)) inI
|
+(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(sKey(a, #9:Fresh)),
generatedByIntruder(aenc(#6:Skey, pub(a))),
generatedByIntruder(#6:Skey),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#6:Skey, pub(a))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(#2:Nonce,sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil)
(< 1 . 1 . 4 . 13 . 2 . 1 . 8 . 2{2} . 9 > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(#9:Nonce,priv(#10:Name))),
   -(aenc(#7:Skey, pub(#10:Name))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #2:Fresh,#4:Fresh,#8:Fresh,#11:Fresh,#12:Fresh,#13:Fresh,#14:Fresh ::
[ nil,
   +(h(n(a, #11:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #14:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #13:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #8:Fresh),priv(a)) !inI,
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
h(#9:Nonce,priv(#10:Name)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#7:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#5:Name, #6:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#5:Name, #6:Fresh),#7:Skey)
|
-(h(#9:Nonce,priv(#10:Name))),
-(aenc(#7:Skey, pub(#10:Name))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(sKey(a, #2:Fresh)),
generatedByIntruder(pub(a)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
+(sKey(a, #13:Fresh)),
+(h(n(a, #8:Fresh),priv(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#7:Skey, pub(#10:Name))))
< 1 . 1 . 4 . 13 . 9 . 3{2} . 11{1} . 1 . 1 > (
:: nil ::
[ nil |
   -(h(n(#5:Name, #6:Fresh),#7:Skey)),
   -(senc(sKey(a, #2:Fresh), #7:Skey)),
   +(sKey(a, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
   -(h(#3:Nonce,sKey(a, #4:Fresh))),
   +(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
   -(sKey(a, #2:Fresh)),
   +(sKey(a, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(sKey(a, #2:Fresh)),
   -(pub(a)),
   +(aenc(sKey(a, #2:Fresh), pub(a))), nil]  &
:: #1:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(sKey(a, #2:Fresh), pub(a))),
   +(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))), nil]  &
:: #6:Fresh ::
[ nil |
   -(h(n(a, #8:Fresh),priv(a))),
   -(aenc(#7:Skey, pub(a))),
   +(h(n(#5:Name, #6:Fresh),#7:Skey)), nil]  &
:: #2:Fresh,#4:Fresh,#8:Fresh,#9:Fresh,#10:Fresh,#11:Fresh,#12:Fresh ::
[ nil,
   +(h(n(a, #10:Fresh),sKey(a, #4:Fresh))),
   +(h(n(a, #12:Fresh),sKey(a, #2:Fresh))) |
   +(sKey(a, #11:Fresh)),
   +(h(n(a, #8:Fresh),priv(a))), nil] )
|
pub(a) !inI,
h(n(a, #8:Fresh),priv(a)) !inI,
h(n(#5:Name, #6:Fresh),#7:Skey) !inI,
h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh)) !inI,
senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh)) !inI,
aenc(sKey(a, #2:Fresh), pub(a)) !inI,
sKey(a, #2:Fresh) !inI,
sKey(a, #4:Fresh) !inI,
h(#3:Nonce,sKey(a, #4:Fresh)) inI,
senc(sKey(a, #2:Fresh), #7:Skey) inI,(
#7:Skey != sKey(a, #4:Fresh)),(
#3:Nonce != n(#5:Name, #6:Fresh)),
h(#3:Nonce,sKey(a, #4:Fresh)) != h(n(#5:Name, #6:Fresh),#7:Skey)
|
+(sKey(a, #11:Fresh)),
generatedByIntruder(pub(a)),
+(h(n(a, #8:Fresh),priv(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(#7:Skey, pub(a))),
+(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(h(n(#5:Name, #6:Fresh),#7:Skey)),
-(senc(sKey(a, #2:Fresh), #7:Skey)),
+(sKey(a, #2:Fresh)),
-(sKey(a, #2:Fresh)),
-(pub(a)),
+(aenc(sKey(a, #2:Fresh), pub(a))),
-(h(n(a, #8:Fresh),priv(a))),
-(aenc(sKey(a, #2:Fresh), pub(a))),
+(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(n(#0:Name, #1:Fresh),sKey(a, #2:Fresh))),
-(h(#3:Nonce,sKey(a, #4:Fresh))),
+(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(senc(sKey(a, #4:Fresh), sKey(a, #2:Fresh))),
-(sKey(a, #2:Fresh)),
+(sKey(a, #4:Fresh))
| ghost(aenc(#7:Skey, pub(a)))
==========================================
reduce in MAUDE-NPA : run(9) .
rewrites: 2327 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 1 . 1 . 4 . 5 . 3{3} . 2{2} . 2 . 1 > (
:: nil ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(#7:Nonce,priv(#8:Name))),
   -(aenc(#6:Skey, pub(#8:Name))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#0:Fresh,#9:Fresh,#10:Fresh,#11:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #10:Fresh)),
   +(h(n(a, #11:Fresh),priv(a))), nil] )
|
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #0:Fresh),sKey(a, #1:Fresh)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI,
h(#7:Nonce,priv(#8:Name)) inI,
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) != h(n(#4:Name, #5:Fresh),#6:Skey)
|
-(h(#7:Nonce,priv(#8:Name))),
-(aenc(#6:Skey, pub(#8:Name))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
+(sKey(a, #10:Fresh)),
+(h(n(a, #11:Fresh),priv(a))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
| ghost(#6:Skey),
ghost(aenc(#6:Skey, pub(#8:Name))))
< 1 . 1 . 4 . 4 . 2{3} . 8 . 2 . 1 . 2 . 2 > (
:: nil ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#6:Skey, pub(a))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#0:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
#6:Skey !inI,
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #0:Fresh),sKey(a, #1:Fresh)) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
aenc(#6:Skey, pub(a)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(sKey(a, #9:Fresh)),
generatedByIntruder(aenc(#6:Skey, pub(a))),
generatedByIntruder(#6:Skey),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#6:Skey, pub(a))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil
==========================================
reduce in MAUDE-NPA : run(10) .
rewrites: 2364 in 4ms cpu (2ms real) (591000 rewrites/second)
result ShortIdSystem: < 1 . 1 . 4 . 4 . 2{3} . 8 . 2 . 1 . 2 . 2 > (
:: nil ::
[ nil |
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   -(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(h(n(#4:Name, #5:Fresh),#6:Skey)),
   -(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(senc(sKey(a, #1:Fresh), #6:Skey)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #1:Fresh), #6:Skey)),
   -(#6:Skey),
   +(sKey(a, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
   -(sKey(a, #1:Fresh)),
   +(sKey(a, #3:Fresh)), nil]  &
:: #5:Fresh ::
[ nil |
   -(h(n(a, #7:Fresh),priv(a))),
   -(aenc(#6:Skey, pub(a))),
   +(h(n(#4:Name, #5:Fresh),#6:Skey)), nil]  &
:: #1:Fresh,#2:Fresh,#3:Fresh,#0:Fresh,#7:Fresh,#8:Fresh,#9:Fresh ::
[ nil |
   +(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
   +(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
   +(sKey(a, #9:Fresh)),
   +(h(n(a, #7:Fresh),priv(a))), nil] )
|
#6:Skey !inI,
h(n(a, #2:Fresh),sKey(a, #3:Fresh)) !inI,
h(n(a, #0:Fresh),sKey(a, #1:Fresh)) !inI,
h(n(a, #7:Fresh),priv(a)) !inI,
h(n(#4:Name, #5:Fresh),#6:Skey) !inI,
senc(sKey(a, #1:Fresh), #6:Skey) !inI,
senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh)) !inI,
aenc(#6:Skey, pub(a)) !inI,
sKey(a, #1:Fresh) !inI,
sKey(a, #3:Fresh) !inI
|
+(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(sKey(a, #9:Fresh)),
generatedByIntruder(aenc(#6:Skey, pub(a))),
generatedByIntruder(#6:Skey),
+(h(n(a, #7:Fresh),priv(a))),
-(h(n(a, #7:Fresh),priv(a))),
-(aenc(#6:Skey, pub(a))),
+(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(#4:Name, #5:Fresh),#6:Skey)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
+(senc(sKey(a, #1:Fresh), #6:Skey)),
-(senc(sKey(a, #1:Fresh), #6:Skey)),
-(#6:Skey),
+(sKey(a, #1:Fresh)),
-(h(n(a, #0:Fresh),sKey(a, #1:Fresh))),
-(h(n(a, #2:Fresh),sKey(a, #3:Fresh))),
+(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(senc(sKey(a, #3:Fresh), sKey(a, #1:Fresh))),
-(sKey(a, #1:Fresh)),
+(sKey(a, #3:Fresh))
|
nil
Bye.
Tue Jun  2 19:43:48 CEST 2020
