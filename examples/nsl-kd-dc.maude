--- Direct composition
--- NSL-Key Distribution protocol composition

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts IMsg, Fresh, Public, and GhostData
  protecting DEFINITION-PROTOCOL-RULES .

  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort IMsg and Fresh are special and imported
  --- * Every sort must be a subsort of IMsg
  --- * No sort can be a supersort of IMsg
  ----------------------------------------------------------

  --- Synchronization for composition


  subsort Role < IMsg .

  --- Roles
  ops init-nsl resp-nsl : -> Role .
  ops init-kd  resp-kd :  -> Role .

  --- Sort Information
  sorts Name Nonce  MKey SKey      .
  subsort Name Nonce MKey   SKey    < IMsg .
  subsort Name < Public .

   --- Encoding operators for public/private encryption
  op pk : Name IMsg ->  IMsg [frozen] .
  op sk : Name IMsg ->  IMsg [frozen] .

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .

   --- Concatenation operator
   op _;_ : IMsg  IMsg  -> IMsg [gather (e E) frozen] .

 --- Hash operator
  op h :  Nonce Nonce -> MKey [ frozen ]  .

  --- Key operator
  op skey : Name Fresh -> SKey  [ frozen ] .

  --- Encryption Operators
  op e : MKey IMsg  -> IMsg [frozen] .
  op d : MKey IMsg ->  IMsg [frozen] .

   --- Principals
  op a : -> Name . --- Alice
  op b : -> Name . --- Bob
  op i : -> Name . --- Intruder

endfm


fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties
  --- of your protocol
  ----------------------------------------------------------

--- Variables
  vars Z : IMsg .
  var A  : Name .
   vars MKe : MKey .

  *** Encryption/Decryption Cancellation
  eq pk(A,sk(A,Z)) = Z [variant] .
  eq sk(A,pk(A,Z)) = Z [variant] .

  eq d(MKe,e(MKe,Z)) = Z [variant] .
  eq e(MKe,d(MKe,Z)) = Z [variant] .

endfm


fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands
  --- of your protocol
  ----------------------------------------------------------

  vars r r' : Fresh .
  vars A B C D : Name .
  vars NA NB N : Nonce .
  vars X Y : IMsg .
  var MKe : MKey .
  var K KA KB : SKey .
  var rK : Role .
  vars NA' NB' : Nonce .

  eq STRANDS-DOLEVYAO
   =
     :: nil :: [ nil | -(X), -(Y), +(X ; Y), nil ] &
     :: nil :: [ nil | -(X ; Y), +(X), nil ] &
     :: nil :: [ nil | -(X ; Y), +(Y), nil ] &
     :: nil :: [ nil | -(X), +(sk(i,X)), nil ] &
     :: nil :: [ nil | -(X), +(pk(A,X)), nil ] &
     :: nil :: [ nil | +(A) , nil ] &
     :: r :: [ nil | +(n(i,r)), nil ] &
     :: nil :: [ nil | -(MKe), -(X), +(e(MKe,X)), nil ] &
     :: nil :: [ nil | -(MKe), -(X), +(d(MKe,X)), nil ] &
     :: r :: [ nil | -(N), +(h(n(i,r), N)), nil ] &
     :: r :: [ nil | -(N), +(h(N, n(i,r))), nil ] &
     :: r :: [ nil | +(skey(i,r)), nil ]
  [nonexec] .


  eq STRANDS-PROTOCOL
   =
     --- NSL protocol
     :: r ::
         [ nil | +(pk(B, n(A,r) ; A)) ,
	       	  -(pk(A, n(A,r) ; NB ; B )),
		  +(pk(B, NB)),
                  { init-nsl -> init-kd resp-kd  ;; 1-* ;;   A ;  B ; h(n(A,r) , NB) }, nil ] &
     :: r ::
     [ nil | -(pk(B,NA ; A)),
       	     +(pk(A, NA ; n(B,r) ; B)),
	     -(pk(B,n(B,r))),
             {resp-nsl -> init-kd resp-kd ;; 1-* ;;  B ; A  ; h(NA , n(B,r))}, nil ] &
     ---- KD protocol
     :: r' ::
     [ nil |  { init-nsl resp-nsl -> init-kd ;; 1-* ;;  C ; D ; MKe },
             +(e(MKe, skey(C, r'))) ,
	     -(e(MKe, skey(C, r') ; N)),
	     +(e(MKe, N)), nil] &
     :: r' ::
     [ nil |  { init-nsl resp-nsl -> resp-kd ;; 1-* ;;  C ; D ;  MKe },
             -(e(MKe, K)),
	     +(e(MKe, K ; n(C,r'))),
	     -(e(MKe, n(C,r'))), nil ]
  [nonexec] .


--- Attack pattern to find secrecy attack
eq ATTACK-STATE(0)
  =  :: r' ::
     [ nil,  { init-nsl -> init-kd ;; 1-* ;;  a ; b ; MKe },
             +(e(MKe, skey(a, r'))) ,
	     -(e(MKe, skey(a, r') ;  n(b,r))),
	     +(e(MKe,  n(b,r)))  | nil] &
      :: r ::
     [ nil,   { resp-nsl -> resp-kd ;; 1-* ;;  a ; b ;  MKe },
             -(e(MKe, skey(a,r'))),
	     +(e(MKe, skey(a,r') ; n(b,r))),
	     -(e(MKe, n(b,r))) | nil ]
     || skey(a, r') inI
     || nil
     || nil
     || nil
 [nonexec] .


--- Attack pattern to find regular execution of the protocol
eq ATTACK-STATE(1)
  =  :: r' ::
     [ nil,  { init-nsl -> init-kd ;; 1-* ;;  a ; b ; MKe },
             +(e(MKe, skey(a, r'))) ,
	     -(e(MKe, skey(a, r') ;  n(b,r))),
	     +(e(MKe,  n(b,r)))  | nil] &
      :: r ::
     [ nil,   { resp-nsl -> resp-kd ;; 1-* ;;  a ; b ;  MKe },
             -(e(MKe, skey(a,r'))),
	     +(e(MKe, skey(a,r') ; n(b,r))),
	     -(e(MKe, n(b,r))) | nil ]
     || empty
     || nil
     || nil
     || nil
 [nonexec] .


endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .


