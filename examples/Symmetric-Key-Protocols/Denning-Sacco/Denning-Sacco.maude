----  Denning Sacco Protocol

---------------------------------------------------
--- We modify only the relevant MAUDE-NPA modules
---------------------------------------------------

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts IMsg, Fresh, Public
  protecting DEFINITION-PROTOCOL-RULES .

  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort IMsg and Fresh are special and imported
  --- * Every sort must be a subsort of IMsg
  --- * No sort can be a supersort of IMsg
  ----------------------------------------------------------

  --- Sort Information
  sorts  UName SName Name Key Nonce  Masterkey Sessionkey .
  subsort Name Nonce  Key < IMsg .
  subsort Masterkey  Sessionkey < Key .
  subsort SName UName < Name .
  subsort Name < Public . --- This is quite relevant and necessary

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .
  op t : Name Fresh -> Nonce [frozen] . ---Nonce del server

  --- User names
  ops a b i : -> UName .

  --- Server name
  op s : ->  SName .

  --- MKey
  op mkey : Name Name -> Masterkey [frozen] .

  --- Seskey
  op seskey : Name Name Nonce -> Sessionkey [frozen] .

  ---encrypt
  op e : Key IMsg -> IMsg [frozen] .
  op d : Key IMsg -> IMsg  [frozen] .

  --- Concatenation
  op _;_ : IMsg IMsg -> IMsg [frozen gather (e E)] .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties
  --- of your protocol
  ----------------------------------------------------------

 eq d(K:Key, e(K:Key, Z:IMsg)) = Z:IMsg [variant] .
 eq e(K:Key, d(K:Key, Z:IMsg)) = Z:IMsg [variant] .


endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands
  --- of your protocol
  ----------------------------------------------------------

  var A B : UName .
  var D : Name .
  var r r' r'' r''' r# r## : Fresh . --- Comerntario chorra
  vars TS : Nonce .
  vars M1 M2 M N : IMsg .
  var K : Key .
  var SK : Sessionkey .

  eq STRANDS-DOLEVYAO
   = :: nil :: [ nil | +(D), nil ]  &
     :: nil :: [ nil | -(K), -(M), +(d(K,M)), nil ] &
     :: nil :: [ nil | -(K), -(M), +(e(K,M)), nil ] &
     :: nil :: [ nil | -(N), -(M), +(M ; N) , nil ] &
     :: nil :: [ nil | -(M ; N), +(M) , nil ] &
     :: nil :: [ nil | -(M ; N), +(N) , nil ] &
     :: nil :: [ nil | +(mkey(i,D)), nil ]  &
     :: nil :: [ nil | +(mkey(D,i)), nil ]
  [nonexec] .

  eq STRANDS-PROTOCOL =
   --- A -> S : A,B
   --- S -> A : E(Kas: B, Kab, T, E(Kbs: A, Kab, T))
   --- A -> B : E(Kbs: A, Kab, T)

   --- Alice's Strand
    :: nil ::
    [ nil | +(A ; B),
            -(e(mkey(A,s), B ; SK ; TS ; M)),
            +(M),
            nil ]
 &
    --- Bob's Strand
    :: nil ::
    [ nil | -(e(mkey(B,s), A ; SK ; TS)),
            nil ]
 &
     :: r,r' ::
     --- Server's Strand
    [ nil | -(A ; B),
            +(e(mkey(A,s), B
                         ; seskey(A,B,n(s,r))
                         ; t(s,r')
                         ; e(mkey(B,s), A ; seskey(A,B,n(s,r)) ; t(s,r')))),
            nil ]

  [nonexec] .

eq ATTACK-STATE(0) =
    :: r,r' ::
     --- Server's Strand
    [ nil,  -(a ; b),
            +(e(mkey(a,s), b
                         ; seskey(a,b,n(s,r))
                         ; t(s,r')
                         ; e(mkey(b,s), a ; seskey(a,b,n(s,r)) ; t(s,r')))) | nil ]
    || seskey(a,b,n(s,r)) inI
    || nil
    || nil
    || nil
    [nonexec] .
endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
--- fmod MAUDE-NPA is
---   protecting GENERIC-TOOLS .
--- endfm
