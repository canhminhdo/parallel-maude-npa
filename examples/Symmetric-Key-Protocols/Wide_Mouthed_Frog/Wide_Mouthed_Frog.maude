----Wide Mouthed Frog Protocol

---------------------------------------------------
--- We modify only the relevant MAUDE-NPA modules
---------------------------------------------------

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts IMsg, Fresh, Public
  protecting DEFINITION-PROTOCOL-RULES .

  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort IMsg and Fresh are special and imported
  --- * Every sort must be a subsort of IMsg
  --- * No sort can be a supersort of IMsg
  ----------------------------------------------------------

  --- Sort Information
  sorts  UName SName Name Key Nonce  Masterkey Sessionkey .
  subsort Name Nonce  Key < IMsg .
  subsort Masterkey  Sessionkey < Key .
  subsort SName UName < Name .
  subsort Name < Public . --- This is quite relevant and necessary
  --- Nonce operator
  op n  : Name Fresh -> Nonce [frozen] .

  --- User names
  ops a b i : -> UName .

  --- Server name
  op s : ->  SName .

--- MKey
  op mkey : Name Name -> Masterkey [frozen] .

--- Seskey
 op seskey : Name Name Nonce -> Sessionkey [frozen] .

 ---encrypt
  op e : Key IMsg -> IMsg [frozen] .
  op d : Key IMsg -> IMsg  [frozen] .

--- successor

 op p : IMsg -> IMsg [frozen] .


--- Concatenation
  op _;_ : IMsg IMsg -> IMsg [frozen gather (e E)] .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties
  --- of your protocol
  ----------------------------------------------------------

 eq d(K:Key, e(K:Key, Z:IMsg )) = Z:IMsg [variant] .
 eq e(K:Key, d(K:Key, Z:IMsg )) = Z:IMsg [variant] .


endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands
  --- of your protocol
  ----------------------------------------------------------

  var A B S T : UName .
  var r r' r'' r''' r# r## rM : Fresh .
  vars NA NMA NB NMB NMS : Nonce .
  vars M1 M2 MA MB MS N M : IMsg .
  var K : Key .
  var SK : Sessionkey .

  eq STRANDS-DOLEVYAO
  =  :: nil :: [ nil | +(A), nil ]  &
     :: nil :: [ nil | +(s), nil ] &
     :: nil :: [ nil | -(K), -(M), +(d(K,M)), nil ] &
     :: nil :: [ nil | -(M), -(K), +(e(K, M)), nil ] &
     :: nil :: [ nil | -(N), -(M), +(M ; N) , nil ] &
     :: nil :: [ nil | -(M ; N), +(M) , nil ] &
     :: nil :: [ nil | -(M ; N), +(N) , nil ] &
     :: nil :: [ nil | +(mkey(A,i)), nil ]  &
     :: nil :: [ nil | +(mkey(i,A)), nil ]  &
     :: nil :: [ nil | +(mkey(i,s)), nil ]
  [nonexec] .

  eq STRANDS-PROTOCOL

  --- Alice's Strand.
   = :: r ::
     [ nil | +(A ; e(mkey(A,s) , B ; seskey(A,B,n(A,r)))) ,
             +(A ; e(seskey(A,B,n(A,r)), NMA)), nil ]
   &
     :: nil ::
   --- Bob's Strand.
     [ nil | -(e(mkey(B,s), A ; SK)),
             -(A ; e(SK,NMA)), nil ]
   &
     :: nil ::
     --- Server's Strand
    [ nil | -(A ; e(mkey(A,s) , B ; SK)),
            +(e(mkey(B,s) , A  ; SK)) , nil]

  [nonexec] .


eq ATTACK-STATE(0) =
--- A normal execution of the protocol
:: r ::
     [ nil, +(a ; e(mkey(a,s) , b ; seskey(a,b,n(a,r)))) ,
            +(a ; e(seskey(a,b,n(a,r)), NMA)) | nil ]
   &
:: nil ::
    [ nil,  -(e(mkey(b,s), a ; seskey(a,b,n(a,r)))),
            -(a ; e(seskey(a,b,n(a,r)), NMA)) | nil ]
     || empty
     || nil
     || nil
     || nil
[nonexec] .

eq ATTACK-STATE(1) =
--- An execution where the intruder finds out a message that share between the participants
:: r ::
     [ nil, +(a ; e(mkey(a,s) , b ; seskey(a,b,n(a,r)))) ,
            +(a ; e(seskey(a,b,n(a,r)), NMA)) | nil ]
   &
:: nil ::
    [ nil,  -(e(mkey(b,s), a ; seskey(a,b,n(a,r)))),
            -(a ; e(seskey(a,b,n(a,r)), NMA)) | nil ]
     || NMA inI
     || nil
     || nil
     || nil
[nonexec] .


endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
--- fmod MAUDE-NPA is
---   protecting GENERIC-TOOLS .
--- endfm
