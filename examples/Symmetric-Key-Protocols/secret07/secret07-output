Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 295197 in 2084ms cpu (8181ms real) (141649 rewrites/second)
result GrammarList: (errorInconsistentExceptionsInGrammarRule 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI,
   (#0:NeNonceSet notLeq n(i, #2:Fresh)),
   (#1:NeNonceSet * #0:NeNonceSet) notLeq #1:NeNonceSet * #2:NeNonceSet =>
    #0:NeNonceSet inL .  inGrammar 
grl #0:NeNonceSet notInI,
   (#0:NeNonceSet notLeq n(i, #1:Fresh)),
   #0:NeNonceSet notLeq #1:NeNonceSet * #2:NeNonceSet => (#2:NeNonceSet *
    #0:NeNonceSet) inL .  ; 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI,
   (#0:NeNonceSet notLeq n(i, #2:Fresh)),
   (#1:NeNonceSet * #0:NeNonceSet) notLeq #1:NeNonceSet * #2:NeNonceSet =>
    #0:NeNonceSet inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL . ,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL . ,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL . } usingGrammar 
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL . )
| 
grl #50:GenvExp notInI => exp(#50:GenvExp, #60:NeNonceSet) inL . 
| 
grl #0:NeNonceSet notInI,
   (#0:NeNonceSet notLeq n(a, #1:Fresh)),
   (#0:NeNonceSet notLeq n(b, #2:Fresh)),
   #0:NeNonceSet notLeq #3:NeNonceSet * #4:NeNonceSet => exp(#5:GenvExp,
    #0:NeNonceSet) inL . 
| (errorNoHeuristicApplied {
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL . ,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL . ,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL . } usingGrammar 
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL . )
| 
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL . 
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 3747 in 148ms cpu (693ms real) (25317 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, r:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, NS:NeNonceSet)), nil] 
| 
exp(g, NS:NeNonceSet * n(a, r:Fresh)) inI
| 
-(b), 
-(a), 
-(exp(g, NS:NeNonceSet))
| ghost(exp(g, NS:NeNonceSet))
==========================================
reduce in MAUDE-NPA : summary(0) .
rewrites: 97 in 0ms cpu (0ms real) (~ rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 186254 in 556ms cpu (2486ms real) (334989 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 996581 in 2380ms cpu (10677ms real) (418731 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 352438 in 888ms cpu (4065ms real) (396889 rewrites/second)
result Summary: States>> 1 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 35750 in 132ms cpu (627ms real) (270833 rewrites/second)
result Summary: States>> 1 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 83 in 0ms cpu (0ms real) (~ rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, r:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, NS:NeNonceSet)), nil] 
| 
exp(g, NS:NeNonceSet * n(a, r:Fresh)) inI
| 
-(b), 
-(a), 
-(exp(g, NS:NeNonceSet))
| ghost(exp(g, NS:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 139 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 > (
:: nil ::
[ nil | 
   -(g), 
   -(#0:NeNonceSet * n(a, #1:Fresh)), 
   +(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #1:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #0:NeNonceSet)), nil] )
| 
exp(g, #0:NeNonceSet * n(a, #1:Fresh)) !inI,
(#0:NeNonceSet * n(a, #1:Fresh)) inI
| 
-(g), 
-(#0:NeNonceSet * n(a, #1:Fresh)), 
+(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
-(b), 
-(a), 
-(exp(g, #0:NeNonceSet))
| ghost(exp(g, #0:NeNonceSet)))
(< 1 . 3 > (
:: nil ::
[ nil | 
   -(exp(g, #0:NeNonceSet)), 
   -(#1:NeNonceSet * n(a, #2:Fresh)), 
   +(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #2:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet * #0:NeNonceSet)), nil] )
| 
exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)) !inI,
(#1:NeNonceSet * n(a, #2:Fresh)) inI
| 
-(exp(g, #0:NeNonceSet)), 
-(#1:NeNonceSet * n(a, #2:Fresh)), 
+(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet * #0:NeNonceSet))
| ghost(exp(g, #0:NeNonceSet)),
ghost(exp(g, #1:NeNonceSet * #0:NeNonceSet)))
(< 1 . 4 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #0:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) inI
| 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
| 
nil)
< 1 . 5 > (
:: nil ::
[ nil | 
   -(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #1:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #2:NeNonceSet * #0:NeNonceSet)), nil] )
| 
exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(g, #0:NeNonceSet * n(a, #1:Fresh)) inI
| 
-(exp(g, #0:NeNonceSet * n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(g, #2:NeNonceSet * #0:NeNonceSet * n(a, #1:Fresh))), 
-(b), 
-(a), 
-(exp(g, #2:NeNonceSet * #0:NeNonceSet))
| ghost(#2:NeNonceSet),
ghost(exp(g, #2:NeNonceSet * #0:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 195 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 1 . 4 > (
:: nil ::
[ nil | 
   -(g), 
   -(#1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)), 
   +(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:NeNonceSet), 
   -(#1:NeNonceSet * n(a, #2:Fresh)), 
   +(#1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   +(a), 
   +(b), 
   +(exp(g, n(a, #2:Fresh))) | 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet * #0:NeNonceSet)), nil] )
| 
exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)) !inI,
(#1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)) !inI,
(#1:NeNonceSet * n(a, #2:Fresh)) inI
| 
-(#0:NeNonceSet), 
-(#1:NeNonceSet * n(a, #2:Fresh)), 
+(#1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)), 
-(g), 
-(#1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh)), 
+(exp(g, #1:NeNonceSet * #0:NeNonceSet * n(a, #2:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet * #0:NeNonceSet))
| ghost(#0:NeNonceSet),
ghost(exp(g, #1:NeNonceSet * #0:NeNonceSet)))
< 1 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a), 
   +(b) | 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
| 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
| 
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 226 in 0ms cpu (0ms real) (~ rewrites/second)
result ShortIdSystem: < 1 . 4 . 1 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil, 
   +(a) | 
   +(b), 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
| 
+(b), 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
| 
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 254 in 0ms cpu (0ms real) (~ rewrites/second)
result ShortIdSystem: < 1 . 4 . 1 . 1 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   +(a), 
   +(b), 
   +(exp(g, n(a, #0:Fresh))), 
   -(b), 
   -(a), 
   -(exp(g, #1:NeNonceSet)), nil] )
| 
#1:NeNonceSet !inI,
exp(g, #1:NeNonceSet) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI
| 
+(a), 
+(b), 
+(exp(g, n(a, #0:Fresh))), 
generatedByIntruder(exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(b), 
-(a), 
-(exp(g, #1:NeNonceSet))
| 
nil
Bye.
Tue Jun  2 19:22:30 CEST 2020
