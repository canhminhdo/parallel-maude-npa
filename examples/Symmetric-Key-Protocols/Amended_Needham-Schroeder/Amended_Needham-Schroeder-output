Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 23700129 in 41596ms cpu (149219ms real) (569769 rewrites/second)
result GrammarList: (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq n(#1:Name, #2:Fresh)),
   (#0:IMsg notLeq #3:Name ; n(#4:Name, #5:Fresh) ; #6:IMsg),
   (#0:IMsg notLeq n(#7:Name, #8:Fresh) ; #9:IMsg),
   (#0:IMsg notLeq seskey(#10:Name, #11:Name, n(#12:Name, #13:Fresh)) ; e(mkey(
    #11:Name, s), seskey(#10:Name, #11:Name, n(#12:Name, #13:Fresh)) ;
    #14:Nonce ; #10:Name)),
   #0:IMsg notLeq seskey(#15:Name, #16:Name, n(#17:Name, #18:Fresh)) => (#0:IMsg
    ; #19:IMsg) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq n(#1:Name, #2:Fresh)),
   (#0:IMsg notLeq #3:Name ; n(#4:Name, #5:Fresh) ; #6:IMsg),
   (#0:IMsg notLeq n(#7:Name, #8:Fresh) ; #9:IMsg),
   (#0:IMsg notLeq seskey(#10:Name, #11:Name, n(#12:Name, #13:Fresh)) ; e(mkey(
    #11:Name, s), seskey(#10:Name, #11:Name, n(#12:Name, #13:Fresh)) ;
    #14:Nonce ; #10:Name)),
   #0:IMsg notLeq seskey(#15:Name, #16:Name, n(#17:Name, #18:Fresh)) => (
    #19:Name ; #0:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq n(#1:Name, #2:Fresh)),
   (#0:IMsg notLeq e(mkey(#3:Name, s), seskey(#4:Name, #3:Name, n(#5:Name,
    #6:Fresh)) ; #7:Nonce ; #4:Name)),
   (#0:IMsg notLeq #8:Nonce ; #9:Name),
   (#0:IMsg notLeq #10:Name ; n(#11:Name, #12:Fresh) ; #13:IMsg),
   (#0:IMsg notLeq #14:Name ; seskey(#15:Name, #14:Name, n(#16:Name, #17:Fresh))
    ; e(mkey(#14:Name, s), seskey(#15:Name, #14:Name, n(#16:Name, #17:Fresh)) ;
    #18:Nonce ; #15:Name)),
   (#0:IMsg notLeq n(#19:Name, #20:Fresh) ; #21:IMsg),
   #0:IMsg notLeq seskey(#22:Name, #23:Name, n(#24:Name, #25:Fresh)) ; e(mkey(
    #23:Name, s), seskey(#22:Name, #23:Name, n(#24:Name, #25:Fresh)) ;
    #26:Nonce ; #22:Name) => (#27:IMsg ; #0:IMsg) inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:IMsg ; #2:IMsg) inL . ,none,
grl empty => (#1:IMsg,#2:IMsg) inL . ,none,
grl empty => (#1:IMsg,#2:IMsg) inL . } usingGrammar
grl empty => (#1:IMsg ; #2:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:Key notInI => d(#0:Key, #1:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:IMsg notInI => d(#1:Key, #0:IMsg) inL . )
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:IMsg) inL . ,none,
grl empty => (#2:IMsg,#1:Key) inL . ,none,
grl empty => (#2:IMsg,#1:Key) inL . } usingGrammar
grl empty => d(#1:Key, #2:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:Name, #2:Fresh) => dec(#0:Nonce) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq dec(#1:Nonce)),
   #0:IMsg notLeq n(#2:Name, #3:Fresh) => e(#4:Sessionkey, #0:IMsg) inL . )
| (errorNoHeuristicApplied {
grl empty => dec(#1:Nonce) inL . ,none,
grl empty => #1:Nonce inL . ,none,
grl empty => #1:Nonce inL . } usingGrammar
grl empty => dec(#1:Nonce) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:Key notInI,
   (#0:Key notLeq #1:Sessionkey),
   #0:Key notLeq mkey(#2:Name, s) => e(#0:Key, #3:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:IMsg notInI,
   (#0:IMsg notLeq dec(#1:Nonce)),
   (#0:IMsg notLeq n(#2:Name, #3:Fresh)),
   (#0:IMsg notLeq #4:Nonce ; #5:Name ; seskey(#6:Name, #5:Name, n(#7:Name,
    #8:Fresh)) ; e(mkey(#5:Name, s), seskey(#6:Name, #5:Name, n(#7:Name,
    #8:Fresh)) ; #9:Nonce ; #6:Name)),
   (#0:IMsg notLeq #10:Name ; n(#11:Name, #12:Fresh)),
   #0:IMsg notLeq seskey(#13:Name, #14:Name, n(#15:Name, #16:Fresh)) ; #17:Nonce
    ; #13:Name => e(#18:Key, #0:IMsg) inL . )
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:IMsg) inL . ,none,
grl empty => (#2:IMsg,#1:Key) inL . ,none,
grl empty => (#2:IMsg,#1:Key) inL . } usingGrammar
grl empty => e(#1:Key, #2:IMsg) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl (mkey(#0:Name, #1:Name) notLeq mkey(i, #2:Name)),
   mkey(#0:Name, #1:Name) notLeq mkey(#3:Name, i) => mkey(#0:Name, #1:Name) inL
    . )
| (errorInconsistentExceptionsInGrammarRule
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL .
    inGrammar
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:Nonce inL => dec(#0:Nonce) inL .  ;
grl n(#0:Name, #1:Fresh) notLeq #7:Nonce => n(#0:Name, #1:Fresh) inL . )
| (
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl #0:Nonce notInI,
   #0:Nonce notLeq n(#1:Name, #2:Fresh) => seskey(#3:Name, #4:Name, #0:Nonce)
    inL . )
|
grl #0:IMsg inL => e(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => d(#1:Key, #0:IMsg) inL .  ;
grl #0:IMsg inL => (#1:IMsg ; #0:IMsg) inL .  ;
grl #0:IMsg inL => (#0:IMsg ; #1:IMsg) inL .  ;
grl seskey(#0:Name, #1:Name, #2:Nonce) notLeq seskey(#3:Name, #4:Name, n(
    #5:Name, #6:Fresh)) => seskey(#0:Name, #1:Name, #2:Nonce) inL .
==========================================
reduce in MAUDE-NPA : run(0) .
rewrites: 5274 in 136ms cpu (311ms real) (38779 rewrites/second)
result ShortIdSystem: < 1 >
:: r1:Fresh,r0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, r0:Fresh))),
   -(e(mkey(b, s), SK:Sessionkey ; n(b, r0:Fresh) ; a)),
   +(e(SK:Sessionkey, n(b, r1:Fresh))) |
   -(e(SK:Sessionkey, dec(n(b, r1:Fresh)))), nil]
|
e(SK:Sessionkey, dec(n(b, r1:Fresh))) inI
|
-(e(SK:Sessionkey, dec(n(b, r1:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : summary(1) .
rewrites: 765235 in 1340ms cpu (3407ms real) (571070 rewrites/second)
result Summary: States>> 2 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(2) .
rewrites: 1299976 in 2496ms cpu (6325ms real) (520823 rewrites/second)
result Summary: States>> 4 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(3) .
rewrites: 5155280 in 8568ms cpu (21488ms real) (601690 rewrites/second)
result Summary: States>> 9 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(4) .
rewrites: 20191460 in 29168ms cpu (90398ms real) (692246 rewrites/second)
result Summary: States>> 26 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(5) .
rewrites: 119783863 in 143592ms cpu (326628ms real) (834195 rewrites/second)
result Summary: States>> 62 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(6) .
rewrites: 788279311 in 846876ms cpu (1086081ms real) (930808 rewrites/second)
result Summary: States>> 152 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(7) .
rewrites: 5436934935 in 3860600ms cpu (3860664ms real) (1408313
    rewrites/second)
result Summary: States>> 366 Solutions>> 1
==========================================
reduce in MAUDE-NPA : run(1) .
rewrites: 115 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: #2:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
dec(n(b, #0:Fresh)) inI
|
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
< 1 . 7 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg),
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg) |
   -(e(#4:Sessionkey, n(b, #6:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #6:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#4:Sessionkey, n(b, #6:Fresh)) inI
|
-(e(#4:Sessionkey, n(b, #6:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #6:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(2) .
rewrites: 171 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: #2:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
n(b, #0:Fresh) inI
|
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 5 > (
:: nil ::
[ nil |
   -(#2:Key),
   -(e(#2:Key, dec(n(b, #0:Fresh)))),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: #3:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(#2:Key, dec(n(b, #0:Fresh))) inI
|
-(#2:Key),
-(e(#2:Key, dec(n(b, #0:Fresh)))),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#2:Key),
ghost(#1:Sessionkey))
(< 1 . 7 . 1 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #6:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #6:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#4:Sessionkey, n(b, #6:Fresh)) inI,
e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    inI
|
-(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #6:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
< 1 . 7 . 3 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg),
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg) |
   -(e(#4:Sessionkey, n(b, #6:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #6:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#4:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a) inI
|
-(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #6:Fresh))),
-(e(#4:Sessionkey, n(b, #6:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #6:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(3) .
rewrites: 279 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: #3:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) inI
|
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #3:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:IMsg) inI
|
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 5 > (
:: nil ::
[ nil |
   -(#2:Key),
   -(e(#2:Key, n(b, #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: #3:Fresh,#0:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(#2:Key, n(b, #0:Fresh)) inI
|
-(#2:Key),
-(e(#2:Key, n(b, #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#2:Key),
ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#3:Name),
   -(#4:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #2:Fresh) ; #4:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) inI
|
-(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #6:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #6:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#4:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a) inI,
e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    inI
|
-(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #6:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #6:Fresh)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #6:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #6:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#4:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #6:Fresh))),
-(e(#4:Sessionkey, n(b, #6:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg),
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg) |
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
< 1 . 7 . 3 . 9 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg),
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #5:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg) |
   -(e(#5:Sessionkey, n(b, #12:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #12:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#5:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #12:Fresh))),
-(e(#5:Sessionkey, n(b, #12:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #12:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(4) .
rewrites: 577 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 . 3 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; n(b, #0:Fresh)) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
((#2:IMsg ; n(b, #0:Fresh)) ; #3:IMsg) inI
|
-((#2:IMsg ; n(b, #0:Fresh)) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 4 > (
:: nil ::
[ nil |
   -(#3:Key),
   -(e(#3:Key, #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
e(#3:Key, #2:IMsg ; n(b, #0:Fresh)) inI
|
-(#3:Key),
-(e(#3:Key, #2:IMsg ; n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#3:Key),
ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(#3:IMsg ; n(b, #0:Fresh) ; #2:IMsg) inI
|
-(#3:IMsg ; n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((n(b, #0:Fresh) ; #2:IMsg) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
((n(b, #0:Fresh) ; #2:IMsg) ; #3:IMsg) inI
|
-((n(b, #0:Fresh) ; #2:IMsg) ; #3:IMsg),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 5 > (
:: nil ::
[ nil |
   -(#3:Key),
   -(e(#3:Key, n(b, #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
e(#3:Key, n(b, #0:Fresh) ; #2:IMsg) inI
|
-(#3:Key),
-(e(#3:Key, n(b, #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#3:Key),
ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: #1:Fresh,#2:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #2:Fresh) ; a) inI
|
-(e(mkey(b, s), #0:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#6:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 3 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#3:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 > (
:: #0:Fresh ::
[ nil,
   +(#1:Name),
   -(#2:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #0:Fresh) ; #2:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #5:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg),
   -(e(#5:Sessionkey, n(b, #12:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #12:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#5:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #5:Sessionkey ; #11:IMsg)
    inI
|
-(e(mkey(#1:Name, s), n(#1:Name, #0:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #5:Sessionkey ;
    #11:IMsg)),
+(#11:IMsg),
-(e(#5:Sessionkey, n(b, #12:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #5:Fresh)) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 11 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI
|
-(#5:Key),
-(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 1 . 13 . 19 > (
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
n(#0:Name, #1:Fresh) inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #6:Fresh)) inI
|
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 22 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #11:Fresh)) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #4:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#3:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) inI
|
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #6:Fresh))),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 > (
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #4:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#1:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #1:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a)),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #5:Fresh))),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #5:Fresh)))), nil]  &
:: #4:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a)),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #5:Fresh))),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #5:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #5:Fresh))) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #5:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #4:Fresh))) inI
|
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #4:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #4:Fresh) ; a)),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #5:Fresh))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #5:Fresh))),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #5:Fresh)))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg),
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg) |
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 5 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg),
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg) |
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg) inI
|
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg),
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg) |
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
< 1 . 7 . 3 . 9 . 9 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg),
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg) |
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) inI
|
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(5) .
rewrites: 1372 in 4ms cpu (0ms real) (343000 rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 . 3 . 2 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #4:IMsg),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
((#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #4:IMsg) inI
|
-((#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #4:IMsg),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #4:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
((#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #4:IMsg) inI
|
-((#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #4:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 > (
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
e(#4:Key, #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(#4:Key),
-(e(#4:Key, #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#4:Key),
ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#3:Name),
   -(#4:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #2:Fresh) ; #4:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a)), nil]  &
:: #1:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #7:Fresh) ; a)) inI
|
-(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),

   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#7:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
(#6:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(#6:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ;
    #6:IMsg),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#7:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #6:IMsg)
    inI
|
-((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #6:IMsg),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 3 . 4 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg)
    inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg)
    inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg) inI
|
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
mkey(#3:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 14 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ; #12:IMsg)
    inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
+(#12:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #5:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI,
(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 10 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 13 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI
|
-(#5:Key),
-(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 1 . 2 . 12 . 17 > (
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#3:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
n(#0:Name, #1:Fresh) inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a) inI
|
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 20 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
mkey(#0:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ; #11:IMsg)
    inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) inI
|
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ;
    #11:IMsg)),
+(#11:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) inI,
(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) inI,
((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg) inI
|
-((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI,
e(#2:Sessionkey, n(b, #6:Fresh)) inI
|
-(#4:Key),
-(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key))
(< 1 . 7 . 1 . 13 . 4 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; #3:IMsg),
   -(n(i, #0:Fresh)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
n(i, #0:Fresh) inI,
e(#2:Sessionkey, n(b, #5:Fresh)) inI
|
-(#1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#1:Name ; #2:Sessionkey ; #3:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 16 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #8:Fresh)) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #8:Fresh)) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg)
    inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg),

+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 19 . 7 > (
:: nil ::
[ nil |
   -(dec(n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#5:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #5:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
dec(n(#3:Name, #4:Fresh)) inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #6:Fresh)) inI
|
-(dec(n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 8 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI,
(#5:IMsg ; n(#3:Name, #4:Fresh)) inI
|
-(#5:IMsg ; n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 11 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 14 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#5:Key, n(#3:Name, #4:Fresh)) inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI
|
-(#5:Key),
-(e(#5:Key, n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 22 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #11:Fresh)) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 22 . 20{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #10:Fresh)) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #10:Fresh)) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #3:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #5:Fresh))),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
-(#5:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 8 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)) ; #5:IMsg) inI
|
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 10 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
-(#5:Key),
-(e(#5:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 > (
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #4:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#3:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
n(#0:Name, #1:Fresh) inI,
mkey(#0:Name, s) inI,
(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    inI
|
-(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #6:Fresh))),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 2 > (
:: #1:Fresh ::
[ nil,
   +(a) |
   -(e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil]  &
:: #0:Fresh ::
[ nil |
   -(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
    nil]  &
:: #2:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh)) !inI,
(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))) !inI,
e(mkey(b, s), a ; n(b, #2:Fresh)) inI
|
-(e(mkey(b, s), a ; n(b, #2:Fresh))),
+(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
-(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
+(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
-(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #2:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#4:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
   +(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))), nil]  &
:: #1:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
   -(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh))) !inI,
e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
-(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
+(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))),
-(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg),
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg) |
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    inI
|
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 5 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg),
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg) |
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg) inI
|
-((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#2:Sessionkey, n(b, #14:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #3:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #14:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#2:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #14:Fresh))),
-(e(#2:Sessionkey, n(b, #14:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg),
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg) |
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 > (
:: nil ::
[ nil |
   -(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg),
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg) |
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 11 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg),
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg) |
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) ; #6:IMsg) inI
|
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 13 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg),
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg) |
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#6:Key),
-(e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 9 . 9 . 18 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg),
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg) |
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 4 . 2 . 4 . 5 . 8 . 0 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(mkey(#2:Name, s)),
   -(e(mkey(#2:Name, s), n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #2:Name))),
   +(n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh))
    ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #2:Name)), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh))
    ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #2:Name)),
   +(n(b, #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   -(#2:Name ; #3:Name ; n(b, #0:Fresh) ; e(mkey(#3:Name, s), #2:Name ;
    #6:Nonce)),
   +(e(mkey(#2:Name, s), n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #2:Name))) | nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ; e(
    mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #2:Name)) !inI,
mkey(#2:Name, s) inI,
e(mkey(#2:Name, s), n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #2:Name)) inI
|
resuscitated(mkey(#2:Name, s)),
-(mkey(#2:Name, s)),
-(e(mkey(#2:Name, s), n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #2:Name))),
+(n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #2:Name)),
-(n(b, #0:Fresh) ; #3:Name ; seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    e(mkey(#3:Name, s), seskey(#2:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #2:Name)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} > (
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
    nil]  &
:: #5:Fresh ::
[ nil,
   -(#0:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; e(mkey(#3:Name, s), #0:Name ;
    #6:Nonce)),
   +(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))) | nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #9:Fresh) ; a)),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))) |
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
    nil] )
|
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh))) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh)) inI,(
#1:Name != #0:Name),
mkey(#1:Name, s) != mkey(#0:Name, s)
|
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(6) .
rewrites: 3440 in 4ms cpu (1ms real) (860000 rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 . 3 . 2 . 2 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #5:IMsg),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
((#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #5:IMsg) inI
|
-((#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #5:IMsg),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 2 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#3:Name, s) inI,
(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) inI
|
-(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#3:Name, s) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) ;
    #7:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) ;
    #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 4 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #5:IMsg),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
((#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #5:IMsg) inI
|
-((#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #5:IMsg),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 2 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) inI
|
-(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 7 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(#0:Key,
    #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #2:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
    nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
mkey(#3:Name, s) inI,
(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #2:IMsg) inI
|
-(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #2:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
mkey(#3:Name, s) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) ;
    #7:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) ;
    #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 2 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 3 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ; #4:IMsg),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
((#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ; #4:IMsg) inI
|
-((#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ; #4:IMsg),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 7 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #2:IMsg ;
    e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #2:IMsg ;
    e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#7:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
mkey(#2:Name, s) inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey ;
    n(b, #6:Fresh) ; a)) inI
|
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) inI
|
-(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    ; #7:IMsg),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) ;
    #7:IMsg) inI
|
-((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) ;
    #7:IMsg),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),

   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #2:IMsg ;
    n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#10:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #8:Name ; n(#2:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#2:Name, s), n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
(n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#10:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI,(
#2:Name != #6:Name),
mkey(#2:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ; #9:IMsg)
    inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    inI
|
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
+(#9:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 6 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ; #9:IMsg)
    inI,
((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg) inI
|
-((#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #4:IMsg),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #2:Sessionkey ;
    #9:IMsg)),
+(#9:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #3:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #7:IMsg)
    !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #7:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #7:IMsg)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 14 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#2:Sessionkey, n(b, #14:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #3:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #14:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#2:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ;
    #13:IMsg) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#2:Sessionkey, n(b, #14:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #3:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
-(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 13 > (
:: nil ::
[ nil |
   -(#7:Key),
   -(e(#7:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#7:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#7:Key),
-(e(#7:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#7:Key))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:Name ; #1:Sessionkey ; #6:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#5:Name ; #1:Sessionkey ; #6:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 10{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg) inI,(
#0:IMsg != n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),(
#7:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) != (n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 10{2} > (
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 14 . 13 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ; #12:IMsg)
    inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ;
    #12:IMsg)),
+(#12:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a) inI,
(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a) inI,
((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg) inI
|
-((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a) inI
|
-(#4:Key),
-(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; #3:IMsg),
   -(n(i, #0:Fresh)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
n(i, #0:Fresh) inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a) inI
|
-(#1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #5:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#1:Name ; #2:Sessionkey ; #3:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #11:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #11:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#2:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #9:Fresh) ; a)) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #11:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 10 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg)
    inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg),

+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #11:Fresh) ; a)) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 10 . 21 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #13:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #13:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#3:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #11:Fresh) ; a)) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a)),
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #13:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 13 . 21 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #11:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 12 . 17 . 6 > (
:: nil ::
[ nil |
   -(dec(n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#5:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #5:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
dec(n(#3:Name, #4:Fresh)) inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a) inI
|
-(dec(n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a) inI,
(#5:IMsg ; n(#3:Name, #4:Fresh)) inI
|
-(#5:IMsg ; n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a) inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 13 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#5:Key, n(#3:Name, #4:Fresh)) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a) inI
|
-(#5:Key),
-(e(#5:Key, n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 20 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 22 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #10:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 20 . 21 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ;
    n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 8 > (
:: nil ::
[ nil |
   -(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ; #12:IMsg)
    inI,
(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#6:IMsg ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
+(#12:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 11 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ; #12:IMsg)
    inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) ; #6:IMsg) inI
|
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
+(#12:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 14 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
   +(#12:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ; #12:IMsg)
    inI
|
-(#6:Key),
-(e(#6:Key, n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #4:Sessionkey ;
    #12:IMsg)),
+(#12:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 1 . 2 . 14 . 13 . 21 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg) |
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg),
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)) inI,
e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
+(#16:IMsg),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 15 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 13 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(dec(n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #5:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #5:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
dec(n(i, #3:Fresh)) inI,
e(#1:Sessionkey, n(b, #5:Fresh)) inI
|
-(dec(n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #5:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #3:Fresh)),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) inI,
(#4:IMsg ; n(i, #3:Fresh)) inI
|
-(#4:IMsg ; n(i, #3:Fresh)),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) inI,
(n(i, #3:Fresh) ; #4:IMsg) inI
|
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#4:Key, n(i, #3:Fresh)) inI,
e(#1:Sessionkey, n(b, #6:Fresh)) inI
|
-(#4:Key),
-(e(#4:Key, n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 17 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 16 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#10:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(#2:Sessionkey, n(b, #9:Fresh)) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 4 > (
:: nil ::
[ nil |
   -(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg),
   +(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg), nil]
    &
:: nil ::
[ nil |
   -(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#0:Name) |
   -(#1:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #5:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #5:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #5:Fresh)) inI
|
-(#1:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),

-(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),

+(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #5:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#1:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 8 . 8 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #10:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #9:Fresh)) inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) inI
|
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) ; #7:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #10:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #9:Fresh)) inI,
((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #7:IMsg) inI
|
-((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #7:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 23 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #13:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #13:Fresh)) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #8:Name ; n(#1:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #11:Fresh)) inI,
(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(#4:Sessionkey, n(b, #11:Fresh)) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 19 . 7 . 13 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
   +(dec(n(#0:Name, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
dec(n(#0:Name, #1:Fresh)) !inI,
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, dec(n(#0:Name, #1:Fresh))) inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI
|
-(#5:Key),
-(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
+(dec(n(#0:Name, #1:Fresh))),
-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 8 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #8:Fresh)) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)) inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 8 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #8:Fresh)) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 8 . 14 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh)) inI,
e(#4:Sessionkey, n(b, #8:Fresh)) inI
|
-(#6:Key),
-(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key),
ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 8 . 22 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 11 . 8 > (
:: nil ::
[ nil |
   -(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #8:Fresh)) inI,
(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 11 . 11 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #8:Fresh)) inI,
((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 11 . 15 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg) inI,
e(#1:Sessionkey, n(b, #8:Fresh)) inI
|
-(#6:Key),
-(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 11 . 22 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #12:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 22 . 20{1} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #7:Name ; n(#3:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#1:Sessionkey, n(b, #10:Fresh)) inI,
(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI
|
-(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 19 . 22 . 20{2} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
mkey(#5:Name, s) inI,
e(#1:Sessionkey, n(b, #10:Fresh)) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI,(
#3:Name != #5:Name),
mkey(#3:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #8:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 9 > (
:: nil ::
[ nil |
   -(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #10:Fresh)) inI,
(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 12 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #10:Fresh)) inI,
((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg) inI
|
-((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 23 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #14:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #14:Fresh)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 12 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #11:Fresh)) inI,
(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 16 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #11:Fresh)) inI,
((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 30 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #15:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#16:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #16:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #15:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #15:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #15:Fresh)) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #15:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #3:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#4:IMsg ; n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) ; #4:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #3:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #4:IMsg) inI
|
-((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a)) ; #4:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #3:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#2:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#4:Key),
-(e(#4:Key, n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #6:Fresh))),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key))
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(i, #0:Fresh)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #5:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #3:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #5:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#2:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
n(i, #0:Fresh) inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    inI
|
-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(i, #0:Fresh)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #5:Fresh))),
-(e(#2:Sessionkey, n(b, #5:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 6 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #6:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #6:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 15 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 6 > (
:: nil ::
[ nil |
   -(dec(n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#5:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #5:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
dec(n(#3:Name, #4:Fresh)) inI,
mkey(#3:Name, s) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(dec(n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 > (
:: nil ::
[ nil |
   -(#5:IMsg ; n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#5:IMsg ; n(#3:Name, #4:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#5:IMsg ; n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 > (
:: nil ::
[ nil |
   -(#5:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(#5:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#5:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 13 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(#5:Key, n(#3:Name, #4:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#5:Key),
-(e(#5:Key, n(#3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 19 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#5:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #5:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 20 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 22 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 2 . 1 > (
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil |
   +(a),
   -(e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))), nil]  &
:: #1:Fresh,#4:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh))) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
e(mkey(b, s), a ; n(b, #1:Fresh)) inI
|
+(a),
-(e(mkey(b, s), a ; n(b, #1:Fresh))),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 2 . 2 > (
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a) |
   -(e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))), nil]  &
:: #1:Fresh,#4:Fresh ::
[ nil |
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
   -(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), a ; n(b, #1:Fresh)) !inI,
e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh))) !inI,
e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI
|
-(a),
+(e(mkey(b, s), a ; n(b, #1:Fresh))),
-(e(mkey(b, s), a ; n(b, #1:Fresh))),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#2:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#2:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), n(b, #4:Fresh))),
+(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh)))),
-(e(seskey(a, b, n(#2:Name, #3:Fresh)), dec(n(b, #4:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 3 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#5:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 4 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -((b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#5:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
((b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg) inI
|
-((b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 7 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(b),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #2:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#4:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #4:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
   +(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))), nil]  &
:: #1:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
   -(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh))) !inI,
e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#3:Name, #2:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#3:Name, #2:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
-(e(seskey(a, b, n(#3:Name, #2:Fresh)), n(b, #5:Fresh))),
+(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh)))),
-(e(seskey(a, b, n(#3:Name, #2:Fresh)), dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 8 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#3:Name),
   -(#4:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #2:Fresh) ; #4:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; b ;
    n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#9:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
   +(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
   -(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh))) !inI,
e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; b ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; b ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
-(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
+(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))),
-(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 6 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(#5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 15 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 2 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #1:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #1:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #1:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 4 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg),
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg) |
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 5 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)) ; #5:IMsg),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg),
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg) |
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    ; #5:IMsg) inI
|
-((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)) ; #5:IMsg),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 6 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a))),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg),
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg) |
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#5:Key),
-(e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a))),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 3 . 4 . 4 . 4 . 9 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#1:Sessionkey, n(b, #15:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #2:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #15:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#1:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #15:Fresh))),
-(e(#1:Sessionkey, n(b, #15:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 . 9 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 18 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#1:Sessionkey, n(b, #18:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #2:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #18:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#1:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #18:Fresh))),
-(e(#1:Sessionkey, n(b, #18:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #8:Name ; n(#0:Name, #7:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#10:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #10:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #5:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(e(#5:Sessionkey, n(b, #12:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #12:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#5:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #5:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #12:Fresh))),
-(e(#5:Sessionkey, n(b, #12:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#5:Sessionkey, n(b, #14:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #14:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#5:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #14:Fresh))),
-(e(#5:Sessionkey, n(b, #14:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg),
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg) |
   -(e(#5:Sessionkey, n(b, #14:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #14:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#5:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #14:Fresh))),
-(e(#5:Sessionkey, n(b, #14:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 18 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#5:Sessionkey, n(b, #18:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #6:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #18:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#5:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #18:Fresh))),
-(e(#5:Sessionkey, n(b, #18:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #8:Name ; n(#0:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg),
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg) |
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg),
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg) |
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 4 . 2 . 4 . 5 . 8 . 0 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(mkey(i, s)),
   -(e(mkey(i, s), n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))),
   +(n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   +(n(b, #0:Fresh)), nil]  &
:: #4:Fresh ::
[ nil,
   -(i ; #2:Name ; n(b, #0:Fresh) ; e(mkey(#2:Name, s), i ; #5:Nonce)),
   +(e(mkey(i, s), n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))) | nil]  &
:: #0:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(
    #2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i))
    !inI,
e(mkey(i, s), n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i)) inI
|
+(mkey(i, s)),
resuscitated(mkey(i, s)),
-(mkey(i, s)),
-(e(mkey(i, s), n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))),
+(n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(
    #2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i)),
-(n(b, #0:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(
    #2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 12 . 13 . 22 . 0{2} > (
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
    nil]  &
:: #5:Fresh ::
[ nil,
   -(#0:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; e(mkey(#3:Name, s), #0:Name ;
    #6:Nonce)),
   +(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))) | nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #9:Fresh) ; a)),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
    nil] )
|
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh))) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #9:Fresh) ;
    a) inI,
e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) inI,(
#1:Name != #0:Name),
mkey(#1:Name, s) != mkey(#0:Name, s)
|
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
-(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #9:Fresh)
    ; a)),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #8:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh)))),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 9 . 17 . 0 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
    nil]  &
:: #4:Fresh ::
[ nil,
   -(#0:Name ; #2:Name ; n(i, #1:Fresh) ; e(mkey(#2:Name, s), #0:Name ;
    #5:Nonce)),
   +(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))) | nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #8:Fresh) ; a)),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))) |
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
    nil] )
|
mkey(i, s) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name)) inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh)) inI
|
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(mkey(i, s)),
   -(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil]  &

:: #4:Fresh ::
[ nil,
   -(i ; #2:Name ; n(#0:Name, #1:Fresh) ; e(mkey(#2:Name, s), i ; #5:Nonce)),
   +(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))) | nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ;
    a)),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))) |
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i)) !inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i))
    !inI,
mkey(#0:Name, s) inI,
e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i)) inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh)) inI,(
i != #0:Name),
mkey(i, s) != mkey(#0:Name, s)
|
+(mkey(i, s)),
resuscitated(mkey(i, s)),
-(mkey(i, s)),
-(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
+(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 > (
:: nil ::
[ nil |
   -(n(b, #7:Fresh)),
   -(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #7:Fresh)))),
    nil]  &
:: #5:Fresh ::
[ nil,
   -(#0:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; e(mkey(#3:Name, s), #0:Name ;
    #6:Nonce)),
   +(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))) | nil]  &
:: #7:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #9:Fresh) ; a)),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh))) |
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #7:Fresh)))),
    nil] )
|
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #7:Fresh))) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
n(b, #7:Fresh) inI,
mkey(#1:Name, s) inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) inI,
seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) inI,(
#1:Name != #0:Name),
mkey(#1:Name, s) != mkey(#0:Name, s)
|
-(n(b, #7:Fresh)),
-(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh))),
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #7:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #7:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : run(7) .
rewrites: 8790 in 4ms cpu (4ms real) (2197500 rewrites/second)
result IdSystemSet: (< 1 . 4 . 2 . 3 . 2 . 2 . 2 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#6:IMsg ; #5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(#6:IMsg ; #5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 2 . 2 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #6:IMsg),
   +(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
((#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #6:IMsg) inI
|
-((#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) ; #6:IMsg),
+(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 2 . 2 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg ;
    #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg
    ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
+(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #3:IMsg ; #2:IMsg
    ; n(b, #0:Fresh)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #3:IMsg ; #2:IMsg ; n(
    b, #0:Fresh)) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #3:IMsg ; #2:IMsg ;
    n(b, #0:Fresh)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
+(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#4:IMsg ; #3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg
    ; n(b, #0:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
mkey(#4:Name, s) inI,
(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(
    b, #0:Fresh)) inI
|
-(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ;
    n(b, #0:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
mkey(#4:Name, s) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 2 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #2:IMsg ; n(b, #0:Fresh))),
   +(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh))),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh))),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #2:IMsg ; n(b,
    #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #2:IMsg ; n(b, #0:Fresh))),
+(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
-(#3:IMsg ; #2:IMsg ; n(b, #0:Fresh)),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 6 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg
    ; n(b, #0:Fresh)),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#4:Name, s) inI,
(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(
    b, #0:Fresh)) inI
|
-(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 6 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#4:Name, s) inI,
((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg) inI
|
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) ; #8:IMsg),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 6 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh))),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg ;
    n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg
    ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh))),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 3 . 7 . 7 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh))),
   +(#2:IMsg ; n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#12:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
(#2:IMsg ; n(b, #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))
    !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh))),
+(#2:IMsg ; n(b, #0:Fresh)),
-(#2:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 3 . 2 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(#6:IMsg ; #5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(#6:IMsg ; #5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 3 . 3 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #6:IMsg),
   +(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
((#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #6:IMsg) inI
|
-((#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) ; #6:IMsg),
+(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 3 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg ;
    #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg
    ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
+(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#5:IMsg ; #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 2 . 8 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
+(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#4:IMsg ; #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 2 . 2 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
(#6:IMsg ; #5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) inI
|
-(#6:IMsg ; #5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 2 . 3 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -((#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) ; #6:IMsg),
   +(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
((#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) ; #6:IMsg) inI
|
-((#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) ; #6:IMsg),
+(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
   +(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg ;
    e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg
    ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
+(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#5:IMsg ; e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 4 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
   +(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #2:Fresh))),
   -(#4:Sessionkey),
   +(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh)),
   +(dec(n(b, #2:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #2:Fresh) ; #3:IMsg),
   +(n(b, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(#0:Key, #1:IMsg ; n(b,
    #2:Fresh) ; #3:IMsg)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
   +(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #2:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #2:Fresh)))), nil] )
|
dec(n(b, #2:Fresh)) !inI,
n(b, #2:Fresh) !inI,
e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
e(#4:Sessionkey, dec(n(b, #2:Fresh))) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(#0:Key,
    #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)) !inI,
(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg) !inI,
(n(b, #2:Fresh) ; #3:IMsg) !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(#0:Key, #1:IMsg ; n(b,
    #2:Fresh) ; #3:IMsg)) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(#0:Key, #1:IMsg ; n(b,
    #2:Fresh) ; #3:IMsg)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    #0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg))),
+(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
-(#0:Key),
-(e(#0:Key, #1:IMsg ; n(b, #2:Fresh) ; #3:IMsg)),
+(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
-(#1:IMsg ; n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh) ; #3:IMsg),
-(n(b, #2:Fresh) ; #3:IMsg),
+(n(b, #2:Fresh)),
-(n(b, #2:Fresh)),
+(dec(n(b, #2:Fresh))),
-(dec(n(b, #2:Fresh))),
-(#4:Sessionkey),
+(e(#4:Sessionkey, dec(n(b, #2:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #2:Fresh))))
| ghost(#0:Key),
ghost(#4:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) !inI,
mkey(#4:Name, s) inI,
(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg) inI
|
-(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b,
    #0:Fresh) ; #3:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh)
    ; #3:IMsg) ; #8:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) !inI,
mkey(#4:Name, s) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) ; #8:IMsg) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) ; #8:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 2 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; n(b, #0:Fresh) ; #3:IMsg)),
   +(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg) !inI,
(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(b, #0:Fresh) ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; n(b, #0:Fresh) ;
    #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    n(b, #0:Fresh) ; #3:IMsg)),
+(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
-(#2:IMsg ; n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh) ; #3:IMsg),
-(n(b, #0:Fresh) ; #3:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 6 . 6 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
    nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #7:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
   +(n(b, #0:Fresh) ; #7:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg) !inI,
(n(b, #0:Fresh) ; #7:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg)
    !inI,
mkey(#3:Name, s) inI,
(#8:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg) inI
|
-(#8:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
+(n(b, #0:Fresh) ; #7:IMsg),
-(n(b, #0:Fresh) ; #7:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 6 . 8 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
    nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #7:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)
    ; #7:IMsg) ; #8:IMsg),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
   +(n(b, #0:Fresh) ; #7:IMsg), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg) !inI,
(n(b, #0:Fresh) ; #7:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg)
    !inI,
mkey(#3:Name, s) inI,
((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg) ; #8:IMsg) inI
|
-((#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg) ; #8:IMsg),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
+(n(b, #0:Fresh) ; #7:IMsg),
-(n(b, #0:Fresh) ; #7:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 6 . 15 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
    nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #7:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#13:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #13:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
   +(n(b, #0:Fresh) ; #7:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg)),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg) !inI,
(n(b, #0:Fresh) ; #7:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg)
    !inI,
mkey(#3:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #2:IMsg ;
    n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg)
    inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg)),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ;
    #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #7:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #7:IMsg)),
+(n(b, #0:Fresh) ; #7:IMsg),
-(n(b, #0:Fresh) ; #7:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 4 . 7 . 7 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #2:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),

   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
   +(n(b, #0:Fresh) ; #2:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#12:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
(n(b, #0:Fresh) ; #2:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)
    !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh) ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh) ; #2:IMsg)),
+(n(b, #0:Fresh) ; #2:IMsg),
-(n(b, #0:Fresh) ; #2:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 2 . 2 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#5:IMsg ; #4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))
    inI
|
-(#5:IMsg ; #4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 2 . 3 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #5:IMsg),
   +(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
((#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #5:IMsg) inI
|
-((#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) ;
    #5:IMsg),
+(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 2 . 7 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#4:IMsg ; #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 2 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #1:Fresh,#3:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#2:IMsg ; e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 . 7 . 6 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#8:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #8:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#2:Name, s) inI,
(#7:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(#7:IMsg ; n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#8:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #8:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#2:Name, s) inI,
((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)) ; #7:IMsg) inI
|
-((n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 . 7 . 10 > (
:: nil ::
[ nil |
   -(#7:Key),
   -(e(#7:Key, n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#8:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #8:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#2:Name, s) inI,
e(#7:Key, n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(#7:Key),
-(e(#7:Key, n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#7:Key),
ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 5 . 2 . 7 . 7 . 15 > (
:: nil ::
[ nil |
   -(#0:Sessionkey),
   -(e(#0:Sessionkey, n(b, #1:Fresh))),
   +(n(b, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #1:Fresh))),
   -(#0:Sessionkey),
   +(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #1:Fresh)),
   +(dec(n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#12:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #12:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(
    mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s),
    #0:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#0:Sessionkey, n(b, #1:Fresh))),
   -(e(#0:Sessionkey, dec(n(b, #1:Fresh)))), nil] )
|
dec(n(b, #1:Fresh)) !inI,
n(b, #1:Fresh) !inI,
e(#0:Sessionkey, dec(n(b, #1:Fresh))) !inI,
e(#0:Sessionkey, n(b, #1:Fresh)) !inI,
e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b,
    s), #0:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#2:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(b, s), #0:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; e(mkey(
    b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #0:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#0:Sessionkey, n(b, #1:Fresh))),
-(#0:Sessionkey),
-(e(#0:Sessionkey, n(b, #1:Fresh))),
+(n(b, #1:Fresh)),
-(n(b, #1:Fresh)),
+(dec(n(b, #1:Fresh))),
-(dec(n(b, #1:Fresh))),
-(#0:Sessionkey),
+(e(#0:Sessionkey, dec(n(b, #1:Fresh)))),
-(e(#0:Sessionkey, dec(n(b, #1:Fresh))))
| ghost(#0:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 6 . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey
    ; n(b, #0:Fresh)),
   +(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
(#8:IMsg ; #7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(
    b, #0:Fresh)) inI
|
-(#8:IMsg ; #7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    n(b, #0:Fresh)),
+(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
-(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 6 . 9 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) ; #8:IMsg),
   +(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
((#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) ; #8:IMsg) inI
|
-((#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) ; #8:IMsg),
+(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
-(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 6 . 16 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#13:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #13:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg
    ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
-(#7:IMsg ; #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),

   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ;
    n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 6 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),

   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
    nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#12:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),

   +(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
    nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ;
    n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))
    !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #2:IMsg
    ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh))),
+(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(#2:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{1} . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
    nil]  &
:: nil ::
[ nil |
   -(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ;
    #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #2:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #3:Name ; n(i, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),

   +(n(b, #0:Fresh)), nil]  &
:: #5:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #6:Name ; n(i, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ;
    #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
   +(n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(i, s), n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)) !inI,
e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ;
    #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; n(b, #0:Fresh)) inI
|
+(mkey(i, s)),
-(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; n(b, #0:Fresh)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ;
    #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #2:Fresh) ;
    #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
+(n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)),
-(n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(i, s), n(i, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(b, #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{1} . 7 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#9:IMsg ; n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   +(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#10:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #7:Name ; n(#2:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
(#9:IMsg ; n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh)
    ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(#9:IMsg ; n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
+(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{1} . 9 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #9:IMsg),
   +(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#10:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #7:Name ; n(#2:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
((n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #9:IMsg) inI
|
-((n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #9:IMsg),
+(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{1} . 16 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#14:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #14:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#2:Name),
   -(#15:IMsg),
   +(#2:Name ; #7:Name ; n(#2:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{2} . 10 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
mkey(#6:Name, s) inI,
(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI,(
#2:Name != #6:Name),
mkey(#2:Name, s) != mkey(#6:Name, s)
|
-(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{2} . 13 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #10:IMsg),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#11:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #11:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
mkey(#6:Name, s) inI,
((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #10:IMsg) inI,(
#2:Name != #6:Name),
mkey(#2:Name, s) != mkey(#6:Name, s)
|
-((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) ; #10:IMsg),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 4 . 2 . 7 . 7 . 15 . 14{2} . 23 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#15:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #15:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#16:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #16:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name,
    #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) !inI,
mkey(#2:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)) inI,(
#2:Name != #6:Name),
mkey(#2:Name, s) != mkey(#6:Name, s)
|
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#2:Name, #3:Fresh) ;
    #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh))),
+(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b, #0:Fresh)),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 . 5 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ; #10:IMsg)
    inI,
(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#5:IMsg ; #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
+(#10:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 . 7 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)) ; #5:IMsg),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ; #10:IMsg)
    inI,
((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    ; #5:IMsg) inI
|
-((#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)) ; #5:IMsg),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
+(#10:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 . 15 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg),
   -(e(#1:Sessionkey, n(b, #15:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #2:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #15:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#1:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #4:IMsg ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #15:Fresh))),
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg)),
+(#14:IMsg),
-(e(#1:Sessionkey, n(b, #15:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 . 9{1} > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a))),
   +(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
   +(#10:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ; #10:IMsg)
    inI,(
#3:IMsg != #9:Name),(
#0:IMsg != #1:Sessionkey),(
#4:IMsg != n(#7:Name, #6:Fresh)),(
#10:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),(
#5:Key != mkey(#7:Name, s)),
e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) != e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ;
    #1:Sessionkey ; #10:IMsg)
|
-(#5:Key),
-(e(#5:Key, #4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a))),
+(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #1:Sessionkey ;
    #10:IMsg)),
+(#10:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 1 . 2 . 3 . 4 . 4 . 13{1} > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg)
    !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#5:Name, s) inI,
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg) inI,(
#3:IMsg != #7:Name),(
#0:IMsg != #1:Sessionkey),(
#4:IMsg != n(#5:Name, #6:Fresh)),(
#8:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    != n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
-(#4:IMsg ; #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 6 . 12 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ;
    #4:IMsg),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg)
    !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg) inI,
((#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ;
    #4:IMsg) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ; #8:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
-((#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ;
    #4:IMsg),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #1:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)), nil]  &

:: #4:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 7 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI
|
-(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 13 > (
:: nil ::
[ nil |
   -(#8:Key),
   -(e(#8:Key, n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
e(#8:Key, n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#8:Key),
-(e(#8:Key, n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#8:Key))
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 18 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:Name ; #1:Sessionkey ; #7:IMsg),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#6:Name ; #1:Sessionkey ; #7:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 20 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg
    ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 21 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 12 . 10{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-((n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 4 . 14 . 13 > (
:: nil ::
[ nil |
   -(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
     &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #3:IMsg ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #6:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #8:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #8:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #8:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 13 > (
:: nil ::
[ nil |
   -(#8:Key),
   -(e(#8:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#8:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-(#8:Key),
-(e(#8:Key, n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#8:Key))
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 18 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:Name ; #1:Sessionkey ; #6:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-(#5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#5:Name ; #1:Sessionkey ; #6:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#13:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #13:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 6{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
(#8:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI,(
#7:IMsg != n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),(
#8:IMsg != #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#8:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) != (#0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg
|
-(#8:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 6 . 12 . 6{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-((#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#6:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI
|
-(#6:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
e(#6:Key, n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#6:Key),
-(e(#6:Key, n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 12 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:Name ; #1:Sessionkey ; #5:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
n(i, #3:Fresh) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#4:Name ; #1:Sessionkey ; #5:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#4:Name ; #1:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 6{1} > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; #6:IMsg),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; #6:IMsg) inI,(
#0:IMsg != n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),(
#6:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) != (n(i, #3:Fresh)
    ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; #6:IMsg
|
-((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; #6:IMsg),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 3 . 6{2} > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
   +(#5:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) !inI,
((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
-((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg) ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #5:IMsg)),
+(#5:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 . 6 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI
|
-(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 . 20 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &

:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg ;
    n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg
    ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 . 21 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 . 9{1} > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ;
    #8:IMsg),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &

:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #8:IMsg)
    inI,(
#0:IMsg != #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),(
#8:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) != (#3:IMsg ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #8:IMsg
|
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; #8:IMsg),

+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 7 . 9{2} > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg), nil]  &

:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
   +(#7:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg)
    !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) !inI,
mkey(#4:Name, s) inI,
((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #7:IMsg) ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #7:IMsg)),
+(#7:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 13 . 21 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #14:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a))),
   +(#6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)), nil]  &
:: #7:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #14:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#4:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #6:IMsg ;
    e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #6:IMsg
    ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a))),
+(#6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(#6:IMsg ; e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #14:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #14:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 6 > (
:: nil ::
[ nil |
   -(dec(n(#5:Name, #6:Fresh))),
   +(n(#5:Name, #6:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#7:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #7:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
dec(n(#5:Name, #6:Fresh)) inI,
mkey(#5:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(dec(n(#5:Name, #6:Fresh))),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(#7:IMsg ; n(#5:Name, #6:Fresh)) inI
|
-(#7:IMsg ; n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 13 > (
:: nil ::
[ nil |
   -(#7:Key),
   -(e(#7:Key, n(#5:Name, #6:Fresh))),
   +(n(#5:Name, #6:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
e(#7:Key, n(#5:Name, #6:Fresh)) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#7:Key),
-(e(#7:Key, n(#5:Name, #6:Fresh))),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#7:Key),
ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #5:Name, #6:Fresh))),
   +(n(#5:Name, #6:Fresh)), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #5:Name, #6:Fresh)) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #5:Name, #6:Fresh))),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 22 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
n(#5:Name, #6:Fresh) inI,
mkey(#5:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 10{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:IMsg),
   +(n(#5:Name, #6:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#5:Name, #6:Fresh) ; #7:IMsg) inI,(
#0:IMsg != n(#5:Name, #6:Fresh)),(
#7:IMsg != e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) != n(#5:Name,
    #6:Fresh) ; #7:IMsg
|
-(n(#5:Name, #6:Fresh) ; #7:IMsg),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 18 . 10{2} > (
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #4:IMsg),
   -(n(#5:Name, #6:Fresh)),
   +(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

   +(n(#5:Name, #6:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #3:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
n(#5:Name, #6:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg)
    !inI,
(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#5:Name, #6:Fresh) ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#5:Name, #6:Fresh)),
-(#3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh)),
+(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
-(n(#5:Name, #6:Fresh) ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #3:Name ; #1:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
| ghost(#3:Name ; #1:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 3 . 12 . 20 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 20 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #14:Fresh ::
[ nil,
   +(#15:Name),
   -(#16:IMsg),
   +(#15:Name ; #17:Name ; n(#15:Name, #14:Fresh) ; #16:IMsg) |
   -(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 20 . 19{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#13:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 20 . 19{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#13:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#13:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#13:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 12 . 10{1} . 6{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
   +(#6:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg)
    !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) !inI,
mkey(#3:Name, s) inI,
(#8:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg) inI
|
-(#8:IMsg ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-((n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg) ; #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #6:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #6:IMsg)),
+(#6:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 14 . 13 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg) inI,
(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#7:IMsg ; n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 14 . 13 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#1:Sessionkey, n(b, #14:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #2:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #14:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#1:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg) inI,
((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#1:Sessionkey, n(b, #14:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 3 . 14 . 13 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg),
   -(e(#1:Sessionkey, n(b, #18:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #2:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #18:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#1:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #18:Fresh))),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg)),
+(#17:IMsg),
-(e(#1:Sessionkey, n(b, #18:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 4 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 4 . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI,
((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 4 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 4 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 6 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #12:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #12:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#2:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #10:Fresh) ; a)) inI,
((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
-((n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) ; #4:IMsg),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #12:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 8 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(dec(n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #5:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #5:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#1:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
dec(n(i, #3:Fresh)) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a) inI
|
-(dec(n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #5:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #5:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #3:Fresh)),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a) inI,
(#4:IMsg ; n(i, #3:Fresh)) inI
|
-(#4:IMsg ; n(i, #3:Fresh)),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a) inI,
(n(i, #3:Fresh) ; #4:IMsg) inI
|
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#4:Key, n(i, #3:Fresh)) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a) inI
|
-(#4:Key),
-(e(#4:Key, n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
n(i, #3:Fresh) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #9:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 11 . 15 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 3 . 13 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #8:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #8:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #8:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #8:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 13 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #11:Fresh ::
[ nil,
   +(#12:Name),
   -(#13:IMsg),
   +(#12:Name ; #14:Name ; n(#12:Name, #11:Fresh) ; #13:IMsg) |
   -(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)), nil]  &
:: #10:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI,
e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 14 . 13 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#10:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 . 3 > (
:: nil ::
[ nil |
   -(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg),
   +(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg), nil]
    &
:: nil ::
[ nil |
   -(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#0:Name) |
   -(#1:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #5:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #5:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#3:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #6:Fresh) ; a) inI
|
-(#1:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),

-(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),

+(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #5:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #5:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#1:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #10:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#4:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) inI
|
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) ; #7:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #10:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#4:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) inI,
((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #7:IMsg) inI
|
-((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #7:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #13:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 7 . 22 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #14:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #14:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#4:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #14:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 10 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ;
    #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #14:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #14:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#4:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg)
    inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #6:IMsg),

+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #14:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 20 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #14:Fresh ::
[ nil,
   +(#15:Name),
   -(#16:IMsg),
   +(#15:Name ; #17:Name ; n(#15:Name, #14:Fresh) ; #16:IMsg) |
   -(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #11:Fresh) ; a)) inI,
e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
-(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #18:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 20 . 19{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #8:Name ; n(#1:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a) inI,
(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 20 . 19{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #8:Name ; n(#1:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI
|
-(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 7 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#13:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 10 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #8:Name ; n(#0:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI
|
-(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 10 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#13:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI,
((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-((n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ; #5:IMsg),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 13 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #8:Name ; n(#1:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI
|
-(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 12 . 13 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#13:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #10:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #10:Fresh) ; a)) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #10:Fresh) ; a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 12 . 17 . 6 . 12 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
   +(dec(n(#0:Name, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
dec(n(#0:Name, #1:Fresh)) !inI,
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, dec(n(#0:Name, #1:Fresh))) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) inI
|
-(#5:Key),
-(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
+(dec(n(#0:Name, #1:Fresh))),
-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 6 . 21 > (
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
dec(n(#0:Name, #1:Fresh)) inI,
mkey(#0:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #10:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)) inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 . 10 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 . 13 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh)) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a) inI
|
-(#6:Key),
-(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key),
ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 7 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #11:Fresh) ; a)) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 . 7 > (
:: nil ::
[ nil |
   -(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) inI,
(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 . 10 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) inI,
((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 . 14 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) inI
|
-(#6:Key),
-(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 . 20 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 10 . 21 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #11:Fresh) ; a)) inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 13 . 21 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh))),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; #5:IMsg),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #11:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh))),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
| ghost(#0:Key),
ghost(#3:Name ; #4:Sessionkey ; #5:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 20 . 21 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ;
    n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #10:Fresh) ; a)) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #3:Name, #4:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 20 . 19{1} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #7:Name ; n(#3:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a) inI,
(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI
|
-(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 20 . 19{2} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
mkey(#3:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI,(
#3:Name != #5:Name),
mkey(#3:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 22 . 20{1} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #7:Name ; n(#3:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI
|
-(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 17 . 22 . 20{2} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI,(
#3:Name != #5:Name),
mkey(#3:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ;
    #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 2 . 12 . 20 . 21 . 19{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ;
    n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 21 . 19{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ;
    n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #17:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 21 . 20{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#17:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #17:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh ::
[ nil,
   +(#12:Name),
   -(#13:IMsg),
   +(#12:Name ; #14:Name ; n(#12:Name, #11:Fresh) ; #13:IMsg) |
   -(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ;
    e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)), nil]  &
:: #10:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)) inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 21 . 20{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#17:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #17:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh ::
[ nil,
   +(#12:Name),
   -(#13:IMsg),
   +(#12:Name ; #14:Name ; n(#12:Name, #11:Fresh) ; #13:IMsg) |
   -(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ;
    e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)), nil]  &
:: #10:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #15:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{1} . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #8:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a) inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #10:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{1} . 8 > (
:: nil ::
[ nil |
   -(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{1} . 11 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a) inI,
((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg) inI
|
-((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #8:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{1} . 21 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #14:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#3:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{2} . 11 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a) inI,
(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{2} . 15 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a) inI,
((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) ; #9:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 20 . 19{2} . 28 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #15:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#16:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #16:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #15:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #15:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#3:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #15:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #15:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #7:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)), nil]  &
:: #7:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #7:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #7:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a))),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} . 8 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #8:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #8:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #8:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(#9:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#9:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} . 11 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)) ; #9:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #8:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #8:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #8:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)) ; #9:IMsg) inI
|
-((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)) ; #9:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} . 14 > (
:: nil ::
[ nil |
   -(#9:Key),
   -(e(#9:Key, n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #8:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #8:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #8:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(#9:Key, n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(#9:Key),
-(e(#9:Key, n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a))),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#9:Key))
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{1} . 22 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #15:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#16:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #16:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a))),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #8:Fresh) ; a)), nil]  &
:: #8:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #15:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#3:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #8:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #8:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a))),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #8:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #15:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #15:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ; #8:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ;
    #8:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ; #8:IMsg)
    !inI,
mkey(#5:Name, s) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ; #8:IMsg) inI,(
i != #5:Name),
mkey(i, s) != mkey(#5:Name, s)
|
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ; #8:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ;
    #8:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #3:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} . 11 > (
:: nil ::
[ nil |
   -(#10:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#13:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #13:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
(#10:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(#10:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} . 15 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)) ; #10:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#13:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #13:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,
((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)) ; #10:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)) ; #10:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} . 19 > (
:: nil ::
[ nil |
   -(#10:Key),
   -(e(#10:Key, n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#13:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #13:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#10:Key, n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(#10:Key),
-(e(#10:Key, n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#10:Key))
(< 1 . 7 . 1 . 2 . 12 . 21 . 19{2} . 29 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #16:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#17:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #17:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a))),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #9:Fresh) ; a)), nil]  &
:: #9:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #16:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(#3:Sessionkey, n(b, #16:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #9:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #9:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)) inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a))),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #9:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #16:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #16:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 8 . 8 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#5:Sessionkey, n(b, #14:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #14:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#5:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg) inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#5:Sessionkey, n(b, #14:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 8 . 11 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
   +(#13:IMsg),
   -(e(#5:Sessionkey, n(b, #14:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #14:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#5:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #7:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #14:Fresh))),
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #13:IMsg)),
+(#13:IMsg),
-(e(#5:Sessionkey, n(b, #14:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 8 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg) |
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg),
   -(e(#5:Sessionkey, n(b, #18:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #6:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #18:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#5:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI,
e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #18:Fresh))),
-(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg)),
+(#17:IMsg),
-(e(#5:Sessionkey, n(b, #18:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 14 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ; #11:IMsg)
    inI
|
+(mkey(i, s)),
-(#0:Key),
-(e(#0:Key, n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #4:Sessionkey ;
    #11:IMsg)),
+(#11:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 1 . 2 . 14 . 13 . 21 . 20{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #8:Name ; n(#0:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg) |
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg),
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg) inI,
(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
+(#16:IMsg),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 14 . 13 . 21 . 20{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg) |
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg),
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
+(#16:IMsg),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 5 . 1 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(i ; #0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
   +(#0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
   +(n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i) |
   -(#0:Name ; #2:Sessionkey ; #3:IMsg),
   +(i ; #0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
   -(e(mkey(i, s), n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #4:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #4:Fresh)))), nil]  &
:: #4:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #4:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #4:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #4:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(i ; #0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(#0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #4:Fresh)) inI
|
-(#0:Name ; #2:Sessionkey ; #3:IMsg),
+(i ; #0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
-(i ; #0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
+(#0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
-(#0:Name ; n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
+(n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #0:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #4:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #4:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #4:Fresh))))
| ghost(#0:Name ; #2:Sessionkey ; #3:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 5 . 5 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   +(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]
     &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #8:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #8:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #8:Fresh)) inI,
(#6:IMsg ; #5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    inI
|
-(#6:IMsg ; #5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
+(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #8:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 5 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -((#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ;
    #6:IMsg),
   +(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]
     &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #8:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #8:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #9:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #8:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #8:Fresh)) inI,
((#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ;
    #6:IMsg) inI
|
-((#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) ;
    #6:IMsg),
+(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #8:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 5 . 17 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#11:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #12:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]
     &
:: #12:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #12:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #12:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg
    ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #12:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 5 . 15 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #10:Fresh)) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 13 . 4 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, dec(n(i, #0:Fresh)))),
   +(dec(n(i, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(dec(n(i, #0:Fresh))),
   +(n(i, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; #3:IMsg),
   -(n(i, #0:Fresh)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: #0:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #6:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #6:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #6:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
dec(n(i, #0:Fresh)) !inI,
n(i, #0:Fresh) !inI,
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(#4:Key, dec(n(i, #0:Fresh))) inI,
e(#2:Sessionkey, n(b, #6:Fresh)) inI
|
-(#4:Key),
-(e(#4:Key, dec(n(i, #0:Fresh)))),
+(dec(n(i, #0:Fresh))),
-(dec(n(i, #0:Fresh))),
+(n(i, #0:Fresh)),
-(#1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #6:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key),
ghost(#1:Name ; #2:Sessionkey ; #3:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 5 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh)),
   +(n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh)),
   +(#0:IMsg ; n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(i, #1:Fresh)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #1:Fresh) !inI,
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh)) inI
|
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh)),
+(#0:IMsg ; n(i, #1:Fresh)),
-(#0:IMsg ; n(i, #1:Fresh)),
+(n(i, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(i, #1:Fresh)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 5 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh)),
   +(n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(i, #1:Fresh)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -((#0:IMsg ; n(i, #1:Fresh)) ; #5:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh)), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #1:Fresh) !inI,
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI,
((#0:IMsg ; n(i, #1:Fresh)) ; #5:IMsg) inI
|
-((#0:IMsg ; n(i, #1:Fresh)) ; #5:IMsg),
+(#0:IMsg ; n(i, #1:Fresh)),
-(#0:IMsg ; n(i, #1:Fresh)),
+(n(i, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(i, #1:Fresh)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 5 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, #0:IMsg ; n(i, #1:Fresh))),
   +(#0:IMsg ; n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh)),
   +(n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(i, #1:Fresh)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #1:Fresh) !inI,
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#5:Key, #0:IMsg ; n(i, #1:Fresh)) inI,
e(#3:Sessionkey, n(b, #7:Fresh)) inI
|
-(#5:Key),
-(e(#5:Key, #0:IMsg ; n(i, #1:Fresh))),
+(#0:IMsg ; n(i, #1:Fresh)),
-(#0:IMsg ; n(i, #1:Fresh)),
+(n(i, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(i, #1:Fresh)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 5 . 15 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh)),
   +(n(i, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; #4:IMsg),
   -(n(i, #1:Fresh)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: #1:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh))),
   +(#0:IMsg ; n(i, #1:Fresh)), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(i, #1:Fresh) !inI,
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh))),
+(#0:IMsg ; n(i, #1:Fresh)),
-(#0:IMsg ; n(i, #1:Fresh)),
+(n(i, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(i, #1:Fresh)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#2:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 7 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh) ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #4:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI,
(#5:IMsg ; n(i, #3:Fresh) ; #4:IMsg) inI
|
-(#5:IMsg ; n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh) ; #4:IMsg),
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 7 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(i, #3:Fresh) ; #4:IMsg) ; #5:IMsg),
   +(n(i, #3:Fresh) ; #4:IMsg), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #4:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI,
((n(i, #3:Fresh) ; #4:IMsg) ; #5:IMsg) inI
|
-((n(i, #3:Fresh) ; #4:IMsg) ; #5:IMsg),
+(n(i, #3:Fresh) ; #4:IMsg),
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 7 . 10 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, n(i, #3:Fresh) ; #4:IMsg)),
   +(n(i, #3:Fresh) ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #4:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#5:Key, n(i, #3:Fresh) ; #4:IMsg) inI,
e(#1:Sessionkey, n(b, #7:Fresh)) inI
|
-(#5:Key),
-(e(#5:Key, n(i, #3:Fresh) ; #4:IMsg)),
+(n(i, #3:Fresh) ; #4:IMsg),
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key),
ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 13 . 7 . 15 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: #3:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:IMsg)),
   +(n(i, #3:Fresh) ; #4:IMsg), nil]  &
:: #11:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
(n(i, #3:Fresh) ; #4:IMsg) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:IMsg) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:IMsg)),
+(n(i, #3:Fresh) ; #4:IMsg),
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 4 . 16 . 14 . 9 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(#2:Sessionkey, n(b, #10:Fresh)) inI,
(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) inI
|
-(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 16 . 14 . 12 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg) ; #8:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #10:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #12:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(#2:Sessionkey, n(b, #10:Fresh)) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) ; #8:IMsg) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) ; #8:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 16 . 14 . 23 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#13:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #13:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #14:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#15:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #15:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #14:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #14:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
mkey(#4:Name, s) inI,
e(#2:Sessionkey, n(b, #14:Fresh)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #14:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 4 . 1 > (
:: nil ::
[ nil |
   -(#1:Name ; #0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg),
   +(#0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg), nil]
    &
:: nil ::
[ nil |
   -(#0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: #2:Fresh ::
[ nil |
   +(#1:Name),
   -(#0:Name ; #3:Sessionkey ; #4:IMsg),
   +(#1:Name ; #0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #5:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #5:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #5:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(#1:Name ; #0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
(#0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#3:Sessionkey, n(b, #5:Fresh)) inI
|
+(#1:Name),
-(#0:Name ; #3:Sessionkey ; #4:IMsg),
+(#1:Name ; #0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),

-(#1:Name ; #0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),

+(#0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:Name ; n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
+(n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #0:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #5:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #5:Fresh))))
| ghost(#0:Name ; #3:Sessionkey ; #4:IMsg))
(< 1 . 7 . 1 . 13 . 8 . 8 . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; #5:IMsg),
   +(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#9:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #9:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #10:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #10:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #10:Fresh)) inI,
(#8:IMsg ; #7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; #5:IMsg) inI
|
-(#8:IMsg ; #7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ;
    #4:Sessionkey ; #5:IMsg),
+(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #10:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 9 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg) ; #8:IMsg),
   +(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#9:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #9:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #10:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #10:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #10:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #10:Fresh)) inI,
((#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) ; #8:IMsg) inI
|
-((#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) ; #8:IMsg),
+(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #10:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 9 . 23 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #14:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; #5:IMsg), nil]  &
:: #14:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #15:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #15:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #14:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #14:Fresh)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg
    ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #14:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 23 . 20{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #9:Name ; n(#1:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 8 . 23 . 20{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#13:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #13:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#7:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,(
#1:Name != #7:Name),
mkey(#1:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{1} . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #9:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #6:Name ; n(i, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #9:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(#3:Sessionkey, n(b, #9:Fresh)) inI,
(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ;
    #3:Sessionkey ; #4:IMsg) inI
|
+(mkey(i, s)),
-(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name
    ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; n(i,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #9:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{1} . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#9:IMsg ; n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #7:Name ; n(#1:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #11:Fresh)) inI,
(#9:IMsg ; n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(#9:IMsg ; n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{1} . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #9:IMsg),
   +(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #7:Name ; n(#1:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #11:Fresh)) inI,
((n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #9:IMsg) inI
|
-((n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #9:IMsg),
+(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{1} . 23 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#14:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #14:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #15:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#1:Name),
   -(#16:IMsg),
   +(#1:Name ; #7:Name ; n(#1:Name, #6:Fresh) ; #16:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: #15:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #15:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#4:Sessionkey, n(b, #15:Fresh)) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #15:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{2} . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#13:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(
    #1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{2} . 16 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: nil ::
[ nil |
   -((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #10:IMsg),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#13:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #13:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(#4:Sessionkey, n(b, #12:Fresh)) inI,
((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #10:IMsg) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) ; #10:IMsg),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 8 . 22 . 20{2} . 30 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)), nil]  &

:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#15:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #15:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
   +(#5:IMsg),
   -(e(#4:Sessionkey, n(b, #16:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#17:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #17:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &

:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg), nil]  &
:: #16:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #18:Fresh))),
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #18:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #16:Fresh))) |
   -(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)
    !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; #5:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
e(#4:Sessionkey, n(b, #16:Fresh)) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; #5:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    #5:IMsg)),
+(#5:IMsg),
-(e(#4:Sessionkey, n(b, #16:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 19 . 22 . 20{1} . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; #2:IMsg),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh))),
    nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
   +(#2:IMsg),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh))),

   +(n(i, #3:Fresh)), nil]  &
:: #8:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #10:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh)) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh))),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; #2:IMsg)),
+(#2:IMsg),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#0:Name ; #1:Sessionkey ; #2:IMsg))
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 5 . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg),
   +(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) inI,
(#7:IMsg ; n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
-(#7:IMsg ; n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; #3:IMsg),
+(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 5 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: nil ::
[ nil |
   -((n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) ; #7:IMsg),
   +(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #9:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #11:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #11:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) inI,
((n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) ; #7:IMsg) inI
|
-((n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) ; #7:IMsg),
+(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 5 . 16 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &

:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#12:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #12:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(#3:IMsg),
   -(e(#2:Sessionkey, n(b, #13:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#14:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #14:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg)),
   +(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg), nil]  &
:: #13:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #15:Fresh))),
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #15:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #13:Fresh))) |
   -(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg) !inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) !inI,
e(#2:Sessionkey, n(b, #13:Fresh)) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(i,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(i,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg)),
+(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; #3:IMsg)),
+(#3:IMsg),
-(e(#2:Sessionkey, n(b, #13:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: nil ::
[ nil |
   -(#9:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
   +(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: #5:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #6:Name ; n(#1:Name, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#7:Sessionkey, n(b, #11:Fresh))),
   +(e(#7:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #7:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#7:Sessionkey, n(b, #11:Fresh))) |
   -(e(#7:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#7:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh)
    ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#7:Sessionkey, n(b, #11:Fresh)) inI,
(#9:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) inI
|
-(#9:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
+(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#7:Sessionkey, n(b, #11:Fresh))),
+(e(#7:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#7:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 9 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) ; #9:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
   +(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: #5:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #6:Name ; n(#1:Name, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#7:Sessionkey, n(b, #11:Fresh))),
   +(e(#7:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #11:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #13:Fresh))),
   -(e(mkey(b, s), #7:Sessionkey ; n(b, #13:Fresh) ; a)),
   +(e(#7:Sessionkey, n(b, #11:Fresh))) |
   -(e(#7:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#7:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh)
    ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#7:Sessionkey, n(b, #11:Fresh)) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) ; #9:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) ; #9:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
+(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#7:Sessionkey, n(b, #11:Fresh))),
+(e(#7:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#7:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 9 . 23 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#16:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #16:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
   +(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: #5:Fresh ::
[ nil,
   +(#1:Name),
   -(#14:IMsg),
   +(#1:Name ; #6:Name ; n(#1:Name, #5:Fresh) ; #14:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
   +(#8:IMsg),
   -(e(#7:Sessionkey, n(b, #15:Fresh))),
   +(e(#7:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg), nil]  &
:: #15:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #7:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#7:Sessionkey, n(b, #15:Fresh))) |
   -(e(#7:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#7:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh)
    ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg) !inI,
mkey(#1:Name, s) inI,
e(#7:Sessionkey, n(b, #15:Fresh)) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name,
    #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#1:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg)),
+(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #8:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #8:IMsg)),
+(#8:IMsg),
-(e(#7:Sessionkey, n(b, #15:Fresh))),
+(e(#7:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#7:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 23 . 21{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #13:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #10:Name ; n(#0:Name, #9:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #13:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #13:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#0:Name, s), n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
e(#3:Sessionkey, n(b, #13:Fresh)) inI,
(n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg) inI
|
-(n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #13:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{1} . 23 . 21{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(mkey(#8:Name, s)),
   +(e(mkey(#8:Name, s), n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#12:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #12:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #13:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #9:Fresh ::
[ nil,
   +(#8:Name),
   -(#15:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #9:Fresh) ; #15:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #13:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #16:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #16:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #13:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#8:Name, s), n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#8:Name, s) inI,
e(#3:Sessionkey, n(b, #13:Fresh)) inI,
(n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg) inI,(
#0:Name != #8:Name),
mkey(#0:Name, s) != mkey(#8:Name, s)
|
-(n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(#0:Name, #5:Fresh) ;
    #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
-(mkey(#8:Name, s)),
+(e(mkey(#8:Name, s), n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#8:Name, s), n(#8:Name, #9:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #13:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 12 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: nil ::
[ nil |
   -(#10:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg),
   -(e(#8:Sessionkey, n(b, #12:Fresh))),
   +(e(#8:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #8:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#8:Sessionkey, n(b, #12:Fresh))) |
   -(e(#8:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#8:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh)
    ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(#8:Sessionkey, n(b, #12:Fresh)) inI,
(#10:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(#10:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
+(#9:IMsg),
-(e(#8:Sessionkey, n(b, #12:Fresh))),
+(e(#8:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#8:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 12 . 16 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) ; #10:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg),
   -(e(#8:Sessionkey, n(b, #12:Fresh))),
   +(e(#8:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), #8:Sessionkey ; n(b, #14:Fresh) ; a)),
   +(e(#8:Sessionkey, n(b, #12:Fresh))) |
   -(e(#8:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#8:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh)
    ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(#8:Sessionkey, n(b, #12:Fresh)) inI,
((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) ; #10:IMsg) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-((#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) ; #10:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
+(#9:IMsg),
-(e(#8:Sessionkey, n(b, #12:Fresh))),
+(e(#8:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#8:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 12 . 30 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#17:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #17:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#15:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
   +(#9:IMsg),
   -(e(#8:Sessionkey, n(b, #16:Fresh))),
   +(e(#8:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg), nil]  &
:: #16:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #18:Fresh))),
   -(e(mkey(b, s), #8:Sessionkey ; n(b, #18:Fresh) ; a)),
   +(e(#8:Sessionkey, n(b, #16:Fresh))) |
   -(e(#8:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#8:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)
    !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh)
    ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(#8:Sessionkey, n(b, #16:Fresh)) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name,
    #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #9:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #9:IMsg)),
+(#9:IMsg),
-(e(#8:Sessionkey, n(b, #16:Fresh))),
+(e(#8:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#8:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 30 . 27{1} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#15:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh ::
[ nil,
   +(#0:Name),
   -(#16:IMsg),
   +(#0:Name ; #11:Name ; n(#0:Name, #10:Fresh) ; #16:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #14:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#0:Name, s), n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #14:Fresh)) inI,
(n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 30 . 27{2} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#15:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh ::
[ nil,
   +(#5:Name),
   -(#16:IMsg),
   +(#5:Name ; #11:Name ; n(#5:Name, #10:Fresh) ; #16:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #14:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#5:Name, s), n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(#3:Sessionkey, n(b, #14:Fresh)) inI,
(n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 22 . 20{2} . 30 . 27{3} > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: nil ::
[ nil |
   -(n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
   -(mkey(#9:Name, s)),
   +(e(mkey(#9:Name, s), n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
   +(#4:IMsg),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#15:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #10:Fresh ::
[ nil,
   +(#9:Name),
   -(#16:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #10:Fresh) ; #16:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg), nil]  &
:: #14:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #17:Fresh))),
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #17:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))) |
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)
    !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
e(mkey(#9:Name, s), n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
mkey(#9:Name, s) inI,
e(#3:Sessionkey, n(b, #14:Fresh)) inI,
(n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg) inI,(
#0:Name != #5:Name),(
#0:Name != #9:Name),(
mkey(#0:Name, s) != mkey(#5:Name, s)),(
mkey(#0:Name, s) != mkey(#9:Name, s)),
mkey(#5:Name, s) != mkey(#9:Name, s)
|
-(n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(#5:Name, #6:Fresh) ;
    #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg),
-(mkey(#9:Name, s)),
+(e(mkey(#9:Name, s), n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#9:Name, s), n(#9:Name, #10:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; #4:IMsg),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    #4:IMsg)),
+(#4:IMsg),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 3 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
-(#5:IMsg ; #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 3 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) ; #5:IMsg),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) ; #5:IMsg) inI
|
-((#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) ; #5:IMsg),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 3 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(
    b, #4:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(
    b, #4:Fresh) ; a))),
+(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#0:IMsg ; n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(dec(n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #5:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #2:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #5:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#1:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
dec(n(i, #3:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(dec(n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #5:Fresh))),
-(e(#1:Sessionkey, n(b, #5:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; n(i, #3:Fresh)),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
(#4:IMsg ; n(i, #3:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#4:IMsg ; n(i, #3:Fresh)),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
n(i, #3:Fresh) inI,
(#4:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#4:IMsg ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:IMsg),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
(n(i, #3:Fresh) ; #4:IMsg) inI
|
-(n(i, #3:Fresh) ; #4:IMsg),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#4:Key),
   -(e(#4:Key, n(i, #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
e(#4:Key, n(i, #3:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#4:Key),
-(e(#4:Key, n(i, #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
| ghost(#4:Key))
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 12 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#4:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #4:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #5:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #2:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #5:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#1:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
n(i, #3:Fresh) inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #5:Fresh))),
-(e(#1:Sessionkey, n(b, #5:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 14 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
   +(n(i, #3:Fresh)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(i, #3:Fresh) !inI,
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh)) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; n(i,
    #3:Fresh))),
+(n(i, #3:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 7 . 15 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #0:Name ; n(i, #3:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#5:Name),
   -(#6:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
n(i, #3:Fresh) inI,
e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#5:Name, s), n(#5:Name, #4:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 3 . 8 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name
    ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#10:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #10:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: #3:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i,
    #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 6 . 3 > (
:: nil ::
[ nil |
   -(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#0:Name) |
   -(#1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   +(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #5:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil]  &
:: #4:Fresh,#5:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #5:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #5:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #5:Fresh))) !inI,
e(#3:Sessionkey, n(b, #5:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
(#1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    inI
|
-(#1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

+(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#0:Name ; #1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#1:Name ; n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #2:Fresh) ; #1:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #5:Fresh))),
-(e(#3:Sessionkey, n(b, #5:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #5:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #5:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 6 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#4:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#7:IMsg ; #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #9:Fresh))),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 6 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #7:IMsg),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #9:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #5:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #9:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#4:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #7:IMsg) inI
|
-((#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) ; #7:IMsg),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #9:Fresh))),
-(e(#4:Sessionkey, n(b, #9:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 6 . 16 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #13:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #5:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #13:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#4:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #6:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #13:Fresh))),
-(e(#4:Sessionkey, n(b, #13:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #8:Name ; n(#1:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 6 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#1:Name != #6:Name),
mkey(#1:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 6 . 8 > (
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
   +(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
dec(n(#0:Name, #1:Fresh)) inI,
mkey(#0:Name, s) inI,
(#5:IMsg ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) inI
|
-(#5:IMsg ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 6 . 12 > (
:: nil ::
[ nil |
   -(#5:Key),
   -(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
   +(dec(n(#0:Name, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #7:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #7:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
dec(n(#0:Name, #1:Fresh)) !inI,
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#3:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
mkey(#0:Name, s) inI,
e(#5:Key, dec(n(#0:Name, #1:Fresh))) inI,
(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    inI
|
-(#5:Key),
-(e(#5:Key, dec(n(#0:Name, #1:Fresh)))),
+(dec(n(#0:Name, #1:Fresh))),
-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #7:Fresh))),
-(e(#3:Sessionkey, n(b, #7:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#5:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 6 . 18 > (
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(#2:Name),
   +(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#5:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #5:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #6:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #4:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #6:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#3:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
dec(n(#0:Name, #1:Fresh)) inI,
mkey(#0:Name, s) inI,
(#3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
-(#3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(#2:Name),
+(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #6:Fresh))),
-(e(#3:Sessionkey, n(b, #6:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 6 . 21 > (
:: nil ::
[ nil |
   -(dec(n(#0:Name, #1:Fresh))),
   +(n(#0:Name, #1:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(n(#0:Name, #1:Fresh)),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
   +(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: #4:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#0:Name, #1:Fresh) !inI,
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))
    !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
dec(n(#0:Name, #1:Fresh)) inI,
mkey(#0:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #2:Name ;
    #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #2:Name
    ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(dec(n(#0:Name, #1:Fresh))),
+(n(#0:Name, #1:Fresh)),
-(#2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),

-(n(#0:Name, #1:Fresh)),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 6 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)) inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    inI
|
-(#6:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh)),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   +(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) inI,
(#6:IMsg ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) inI
|
-(#6:IMsg ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
+(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    inI,
((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg) inI
|
-((#0:IMsg ; n(#1:Name, #2:Fresh)) ; #6:IMsg),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 12 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#7:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #7:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #8:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #5:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #8:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#4:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh)) inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    inI
|
-(#6:Key),
-(e(#6:Key, #0:IMsg ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #8:Fresh))),
-(e(#4:Sessionkey, n(b, #8:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 18 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(#3:Name),
   +(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#6:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #6:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #7:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #5:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #7:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#4:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) inI,
(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#3:Name),
+(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #7:Fresh))),
-(e(#4:Sessionkey, n(b, #7:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh)), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh)) inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh))),
+(#0:IMsg ; n(#1:Name, #2:Fresh)),
-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 7 . 21 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #3:Name ;
    #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI,
(#0:IMsg ; n(#1:Name, #2:Fresh)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #3:Name
    ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#0:IMsg ; n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 9 > (
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   +(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
(#6:IMsg ; #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(#6:IMsg ; #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a)),
+(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg),
   +(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
((#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg) inI
|
-((#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg),
+(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 13 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#4:Name, #5:Fresh))),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(#6:Key, n(#4:Name, #5:Fresh)) inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(#6:Key),
-(e(#6:Key, n(#4:Name, #5:Fresh))),
+(n(#4:Name, #5:Fresh)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 15 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
e(#6:Key, #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(#6:Key),
-(e(#6:Key, #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #12:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh))),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: #3:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #12:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#2:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#2:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh)) inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh))),
+(n(#4:Name, #5:Fresh)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #12:Fresh))),
-(e(#2:Sessionkey, n(b, #12:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 22 > (
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #12:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
   +(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: #3:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #12:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#2:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
+(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #12:Fresh))),
-(e(#2:Sessionkey, n(b, #12:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 9 . 10{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:IMsg),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #1:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI,
(n(#4:Name, #5:Fresh) ; #6:IMsg) inI,(
#0:IMsg != n(#4:Name, #5:Fresh)),(
#6:IMsg != #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) != n(#4:Name, #5:Fresh) ; #6:IMsg
|
-(n(#4:Name, #5:Fresh) ; #6:IMsg),
+(n(#4:Name, #5:Fresh)),
-(#0:IMsg ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(#1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),

-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 7 > (
:: nil ::
[ nil |
   -(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#6:IMsg ; n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 10 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg) inI
|
-((n(#3:Name, #4:Fresh) ; #5:IMsg) ; #6:IMsg),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 14 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #7:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#6:Key),
-(e(#6:Key, n(#3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 18 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 20 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 10 . 21 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:IMsg),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
   +(n(#3:Name, #4:Fresh) ; #5:IMsg), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:IMsg) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:IMsg)),
+(n(#3:Name, #4:Fresh) ; #5:IMsg),
-(n(#3:Name, #4:Fresh) ; #5:IMsg),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 13 . 18 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh))),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(#3:Name),
   +(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#6:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #6:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #7:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #5:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #7:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#4:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh)) inI,
(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#3:Name),
+(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh))),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #7:Fresh))),
-(e(#4:Sessionkey, n(b, #7:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #7:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 13 . 21 > (
:: nil ::
[ nil |
   -(#0:Key),
   -(e(#0:Key, n(#1:Name, #2:Fresh))),
   +(n(#1:Name, #2:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(n(#1:Name, #2:Fresh)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#1:Name, #2:Fresh) !inI,
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(#0:Key, n(#1:Name, #2:Fresh)) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #3:Name ;
    #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #3:Name
    ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#0:Key),
-(e(#0:Key, n(#1:Name, #2:Fresh))),
+(n(#1:Name, #2:Fresh)),
-(#3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(n(#1:Name, #2:Fresh)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
| ghost(#0:Key))
(< 1 . 7 . 3 . 2 . 7 . 13 . 19 . 9 > (
:: nil ::
[ nil |
   -(#5:IMsg ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   +(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
    &
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(#5:IMsg ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#5:IMsg ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 19 . 12 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ;
    #5:IMsg),
   +(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
    &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#6:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
((#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #5:IMsg)
    inI
|
-((#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ;
    #5:IMsg),
+(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 19 . 20 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh)) inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 19 . 22 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(#0:Name),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]
    &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:Name),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 20 . 21 > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg) |
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #16:Sessionkey ;
    n(#3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,
e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #16:Sessionkey ; n(
    #3:Name, #4:Fresh)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #16:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 20 . 19{1} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #7:Name ; n(#3:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI
|
-(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 20 . 19{2} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
   +(n(#3:Name, #4:Fresh)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
n(#3:Name, #4:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name,
    #4:Fresh)) !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
mkey(#5:Name, s) inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)) inI,(
#3:Name != #5:Name),
mkey(#3:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#3:Name, #4:Fresh)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #3:Name, #4:Fresh))),
+(n(#3:Name, #4:Fresh)),
-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 22 . 20{1} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #7:Name ; n(#3:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 13 . 22 . 20{2} > (
:: nil ::
[ nil |
   -(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(n(#3:Name, #4:Fresh)),
   +(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#9:IMsg),
   +(#3:Name ; #0:Name ; n(#3:Name, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #10:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#11:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a))),
   +(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)), nil]  &
:: #2:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #10:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#1:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ;
    #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    !inI,
(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ;
    n(b, #2:Fresh) ; a)) !inI,
n(#3:Name, #4:Fresh) inI,
mkey(#3:Name, s) inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI,(
#3:Name != #5:Name),
mkey(#3:Name, s) != mkey(#5:Name, s)
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name ; #1:Sessionkey ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #0:Name
    ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(#0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),

-(n(#3:Name, #4:Fresh)),
+(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #0:Name ; #1:Sessionkey ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #10:Fresh))),
-(e(#1:Sessionkey, n(b, #10:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{1} . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #6:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{1} . 7 > (
:: nil ::
[ nil |
   -(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI
|
-(#8:IMsg ; n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{1} . 9 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #8:IMsg),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #10:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #10:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#3:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #8:IMsg) inI
|
-((n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #8:IMsg),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #10:Fresh))),
-(e(#3:Sessionkey, n(b, #10:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{1} . 16 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #14:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #6:Name ; n(#0:Name, #5:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
   +(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: #4:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #14:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #14:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #14:Fresh))) !inI,
e(#3:Sessionkey, n(b, #14:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
+(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #14:Fresh))),
-(e(#3:Sessionkey, n(b, #14:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #14:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{2} . 10 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(#9:IMsg ; n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{2} . 13 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #9:IMsg),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #11:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#12:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #12:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #4:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #11:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#3:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #9:IMsg) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-((n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) ; #9:IMsg),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #11:Fresh))),
-(e(#3:Sessionkey, n(b, #11:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 7 . 15 . 14{2} . 23 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #15:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#16:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #16:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
   +(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)), nil]  &
:: #4:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #15:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#3:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#3:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)) !inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) inI,(
#0:Name != #5:Name),
mkey(#0:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
+(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #3:Sessionkey
    ; n(b, #4:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #15:Fresh))),
-(e(#3:Sessionkey, n(b, #15:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 2 . 1 . 1 > (
:: #1:Fresh ::
[ nil |
   +(a),
   -(e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil]  &
:: #0:Fresh ::
[ nil |
   -(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
    nil]  &
:: #2:Fresh,#4:Fresh ::
[ nil |
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(b, s), a ; n(b, #2:Fresh)) !inI,
e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh)) !inI,
(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))) !inI
|
-(a),
+(e(mkey(b, s), a ; n(b, #2:Fresh))),
+(a),
-(e(mkey(b, s), a ; n(b, #2:Fresh))),
+(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
-(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
+(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
-(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 3 . 5 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#3:IMsg ; #2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),

   +(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#6:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #6:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
   -(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#3:IMsg ; #2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(#3:IMsg ; #2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
-(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 3 . 6 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -((#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ;
    #3:IMsg),
   +(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#6:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #6:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
   -(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
((#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #3:IMsg)
    inI
|
-((#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #3:IMsg),
+(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#5:Name, #4:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#5:Name, #4:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
-(e(seskey(a, b, n(#5:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(a, b, n(#5:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 3 . 10 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#4:Name),
   -(#5:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ;
    #2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
   +(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#10:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #10:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#9:Name, #8:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#9:Name, #8:Fresh)), n(b, #11:Fresh))),
   +(e(seskey(a, b, n(#9:Name, #8:Fresh)), dec(n(b, #11:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#9:Name, #8:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#9:Name, #8:Fresh)), n(b, #11:Fresh))),
   -(e(seskey(a, b, n(#9:Name, #8:Fresh)), dec(n(b, #11:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#9:Name, #8:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#9:Name, #8:Fresh)), dec(n(b, #11:Fresh))) !inI,
e(seskey(a, b, n(#9:Name, #8:Fresh)), n(b, #11:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ; b
    ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(e(mkey(#4:Name, s), n(#4:Name, #3:Fresh) ; #6:Name ; #7:Sessionkey ; #2:IMsg ;
    b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
+(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(#2:IMsg ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#9:Name, #8:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#9:Name, #8:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#9:Name, #8:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#9:Name, #8:Fresh)), n(b, #11:Fresh))),
-(e(seskey(a, b, n(#9:Name, #8:Fresh)), n(b, #11:Fresh))),
+(e(seskey(a, b, n(#9:Name, #8:Fresh)), dec(n(b, #11:Fresh)))),
-(e(seskey(a, b, n(#9:Name, #8:Fresh)), dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 7 . 3 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(#2:IMsg ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(b),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#5:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(#2:IMsg ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(#2:IMsg ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 7 . 4 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(b),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -((n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg),
   +(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #3:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#5:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #5:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil]  &
:: #1:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
   -(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
((n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg) inI
|
-((n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) ; #2:IMsg),
+(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#4:Name, #3:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#4:Name, #3:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), n(b, #6:Fresh))),
+(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(a, b, n(#4:Name, #3:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 7 . 8 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(b),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#3:Name),
   -(#4:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #2:Fresh) ; #4:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
   +(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#9:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
   +(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
   -(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh))) !inI,
e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) inI
|
-(e(mkey(#3:Name, s), n(#3:Name, #2:Fresh) ; #5:Name ; #6:Sessionkey ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
+(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #7:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#8:Name, #7:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
-(e(seskey(a, b, n(#8:Name, #7:Fresh)), n(b, #10:Fresh))),
+(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh)))),
-(e(seskey(a, b, n(#8:Name, #7:Fresh)), dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 2 . 8 . 8 . 8 . 8 > (
:: nil ::
[ nil |
   -(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   -(a),
   +(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: nil ::
[ nil |
   -(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a, #0:Fresh) ; e(
    mkey(b, s), a ; n(b, #1:Fresh))),
   -(mkey(#2:Name, s)),
   +(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ;
    n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))), nil]  &
:: #3:Fresh ::
[ nil,
   +(#2:Name),
   -(#6:IMsg),
   +(#2:Name ; #4:Name ; n(#2:Name, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ;
    n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
   +(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))), nil]  &
:: #0:Fresh ::
[ nil,
   +(a),
   -(#7:IMsg),
   +(a ; b ; n(a, #0:Fresh) ; #7:IMsg) |
   -(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #9:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a)),
   -(e(seskey(a, b, n(#8:Name, #9:Fresh)), n(b, #10:Fresh))),
   +(e(seskey(a, b, n(#8:Name, #9:Fresh)), dec(n(b, #10:Fresh)))), nil]  &
:: #9:Fresh ::
[ nil |
   -(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
   +(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #9:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a))),
    nil]  &
:: #1:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #1:Fresh))) |
   -(e(mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a)),
   +(e(seskey(a, b, n(#8:Name, #9:Fresh)), n(b, #10:Fresh))),
   -(e(seskey(a, b, n(#8:Name, #9:Fresh)), dec(n(b, #10:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #9:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a)) !inI,
e(mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a) !inI,
e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
e(seskey(a, b, n(#8:Name, #9:Fresh)), dec(n(b, #10:Fresh))) !inI,
e(seskey(a, b, n(#8:Name, #9:Fresh)), n(b, #10:Fresh)) !inI,
(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))) !inI,
mkey(#2:Name, s) inI,
(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a, #0:Fresh) ; e(mkey(
    b, s), a ; n(b, #1:Fresh))) inI
|
-(n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a, #0:Fresh) ; e(mkey(
    b, s), a ; n(b, #1:Fresh))),
-(mkey(#2:Name, s)),
+(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
-(e(mkey(#2:Name, s), n(#2:Name, #3:Fresh) ; #4:Name ; #5:Sessionkey ; b ; n(a,
    #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh)))),
+(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a),
+(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
-(a ; b ; n(a, #0:Fresh) ; e(mkey(b, s), a ; n(b, #1:Fresh))),
+(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #9:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a))),
-(e(mkey(a, s), n(a, #0:Fresh) ; b ; seskey(a, b, n(#8:Name, #9:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#8:Name, #9:Fresh)) ; n(b, #1:Fresh) ; a)),
+(e(seskey(a, b, n(#8:Name, #9:Fresh)), n(b, #10:Fresh))),
-(e(seskey(a, b, n(#8:Name, #9:Fresh)), n(b, #10:Fresh))),
+(e(seskey(a, b, n(#8:Name, #9:Fresh)), dec(n(b, #10:Fresh)))),
-(e(seskey(a, b, n(#8:Name, #9:Fresh)), dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 3 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#5:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#5:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#5:IMsg ; n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 3 . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #5:IMsg),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #5:IMsg) inI
|
-((n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #5:IMsg),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 3 . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(i, #3:Fresh)),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#5:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #5:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #6:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil]  &
:: #2:Fresh,#6:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #6:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #6:Fresh))) !inI,
e(#1:Sessionkey, n(b, #6:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
n(i, #3:Fresh) inI,
(#4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(i, #3:Fresh)),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #6:Fresh))),
-(e(#1:Sessionkey, n(b, #6:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #6:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 3 . 8 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #3:Fresh ::
[ nil,
   +(i),
   -(#10:IMsg),
   +(i ; #4:Name ; n(i, #3:Fresh) ; #10:IMsg) |
   -(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#6:Name),
   -(#7:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a))),
   +(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#6:Name, s), n(#6:Name, #5:Fresh) ; #8:Name ; #9:Sessionkey ; n(i,
    #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a))),
+(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(mkey(i, s)),
-(n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(i, s), n(i, #3:Fresh) ; #4:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 6 . 6 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#7:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#7:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 6 . 8 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #9:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #2:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #9:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#1:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg) inI
|
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #7:IMsg),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #9:Fresh))),
-(e(#1:Sessionkey, n(b, #9:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 6 . 15 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#12:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #12:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #3:IMsg ;
    n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; #3:IMsg
    ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 6 > (
:: nil ::
[ nil |
   -(dec(n(#4:Name, #5:Fresh))),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#6:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #6:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
dec(n(#4:Name, #5:Fresh)) inI,
mkey(#4:Name, s) inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(dec(n(#4:Name, #5:Fresh))),
+(n(#4:Name, #5:Fresh)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 7 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#6:IMsg ; n(#4:Name, #5:Fresh)) inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#6:IMsg ; n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 10 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:IMsg),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI,
(n(#4:Name, #5:Fresh) ; #6:IMsg) inI
|
-(n(#4:Name, #5:Fresh) ; #6:IMsg),
+(n(#4:Name, #5:Fresh)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 13 > (
:: nil ::
[ nil |
   -(#6:Key),
   -(e(#6:Key, n(#4:Name, #5:Fresh))),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #8:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #2:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #8:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#1:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(#6:Key, n(#4:Name, #5:Fresh)) inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(#6:Key),
-(e(#6:Key, n(#4:Name, #5:Fresh))),
+(n(#4:Name, #5:Fresh)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #8:Fresh))),
-(e(#1:Sessionkey, n(b, #8:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #8:Fresh))))
| ghost(#6:Key))
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 19 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ;
    a)),
   -(#3:Name),
   +(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#6:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #6:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #7:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #2:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #7:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#1:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
(#1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))
    inI
|
-(#1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:Name),
+(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #7:Fresh))),
-(e(#1:Sessionkey, n(b, #7:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 13 . 20 > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#11:IMsg),
   +(#4:Name ; #3:Name ; n(#4:Name, #5:Fresh) ; #11:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh))),
   +(n(#4:Name, #5:Fresh)), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
n(#4:Name, #5:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh)) inI,
(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #4:Name, #5:Fresh))),
+(n(#4:Name, #5:Fresh)),
-(#3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #3:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 15 . 14{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #8:Name ; n(#3:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 2 . 7 . 15 . 14{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #11:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #2:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #11:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#1:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
mkey(#6:Name, s) inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI,(
#3:Name != #6:Name),
mkey(#3:Name, s) != mkey(#6:Name, s)
|
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #1:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #11:Fresh))),
-(e(#1:Sessionkey, n(b, #11:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 . 3 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #5:Name ; n(i, #4:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #7:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #7:Fresh)))), nil]  &
:: #3:Fresh,#7:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #7:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #7:Fresh))) !inI,
e(#2:Sessionkey, n(b, #7:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(i, s), n(i, #4:Fresh) ; #5:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #7:Fresh))),
-(e(#2:Sessionkey, n(b, #7:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #7:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 . 6 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg
    ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #3:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#7:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#7:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 . 8 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #7:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #3:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #7:IMsg) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #7:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 . 13 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   -(n(#4:Name, #5:Fresh)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#7:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #7:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #8:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil]  &
:: #3:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #8:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #8:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #8:Fresh))) !inI,
e(#2:Sessionkey, n(b, #8:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
n(#4:Name, #5:Fresh) inI,
mkey(#4:Name, s) inI,
(#6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) inI
|
-(#6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #8:Fresh))),
-(e(#2:Sessionkey, n(b, #8:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #8:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #8:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 2 . 7 . 15 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#12:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #12:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #13:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #3:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #13:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#2:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #2:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #13:Fresh))),
-(e(#2:Sessionkey, n(b, #13:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 2 . 7 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg
    ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   -(e(#2:Sessionkey, n(b, #9:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #3:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #9:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#2:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #2:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #9:Fresh))),
-(e(#2:Sessionkey, n(b, #9:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 4 . 2 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #2:Sessionkey ;
    #5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
   +(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #3:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #2:Sessionkey ; #5:IMsg ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #2:Sessionkey ; #5:IMsg ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
+(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 4 . 4 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(#6:IMsg ; #5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #3:Fresh) ; a)),
   +(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg),
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #2:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg) |
   -(e(#2:Sessionkey, n(b, #12:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #3:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #12:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#2:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
(#6:IMsg ; #5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a)) inI
|
-(#6:IMsg ; #5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(
    b, #3:Fresh) ; a)),
+(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #12:Fresh))),
-(e(#2:Sessionkey, n(b, #12:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 4 . 5 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -((#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg),
   +(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg),
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #2:Sessionkey ;
    #11:IMsg)),
   +(#11:IMsg) |
   -(e(#2:Sessionkey, n(b, #12:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #3:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #12:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#2:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
((#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg) inI
|
-((#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) ; #6:IMsg),
+(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #12:Fresh))),
-(e(#2:Sessionkey, n(b, #12:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 4 . 9 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ;
    #5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a))),
   +(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)), nil]  &
:: #11:Fresh ::
[ nil,
   +(#12:Name),
   -(#13:IMsg),
   +(#12:Name ; #14:Name ; n(#12:Name, #11:Fresh) ; #13:IMsg),
   -(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #2:Sessionkey ;
    #15:IMsg)),
   +(#15:IMsg) |
   -(e(#2:Sessionkey, n(b, #16:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #3:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #16:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(#2:Sessionkey, n(b, #16:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)) inI
|
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #10:Sessionkey ; #5:IMsg
    ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
+(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
-(#5:IMsg ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #3:Fresh) ; a)),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #16:Fresh))),
-(e(#2:Sessionkey, n(b, #16:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 4 . 9 . 9 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg
    ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))), nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #7:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ;
    #4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a))),
   +(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #2:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#2:Sessionkey, n(b, #15:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #3:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #15:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#2:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))
    !inI,
mkey(#5:Name, s) inI,
(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; #4:IMsg ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
-(#4:IMsg ; #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ;
    a)),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #15:Fresh))),
-(e(#2:Sessionkey, n(b, #15:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #13:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #3:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #13:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#2:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #2:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #13:Fresh))),
-(e(#2:Sessionkey, n(b, #13:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 . 9 . 9 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg
    ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #2:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#2:Sessionkey, n(b, #15:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #3:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #15:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#2:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(#8:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ;
    e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #15:Fresh))),
-(e(#2:Sessionkey, n(b, #15:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 . 9 . 11 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: nil ::
[ nil |
   -((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #8:IMsg),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #2:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#2:Sessionkey, n(b, #15:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #3:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #15:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#2:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #8:IMsg) inI
|
-((n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) ; #8:IMsg),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #15:Fresh))),
-(e(#2:Sessionkey, n(b, #15:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 4 . 9 . 9 . 18 > (
:: nil ::
[ nil |
   -(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))), nil]
     &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]
     &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)), nil]  &
:: #14:Fresh ::
[ nil,
   +(#15:Name),
   -(#16:IMsg),
   +(#15:Name ; #17:Name ; n(#15:Name, #14:Fresh) ; #16:IMsg),
   -(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #2:Sessionkey ;
    #18:IMsg)),
   +(#18:IMsg) |
   -(e(#2:Sessionkey, n(b, #19:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #19:Fresh)))), nil]  &
:: #3:Fresh,#19:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #3:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #19:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #19:Fresh)))), nil] )
|
e(#2:Sessionkey, dec(n(b, #19:Fresh))) !inI,
e(#2:Sessionkey, n(b, #19:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; #1:IMsg ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a))),
+(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#0:IMsg ; #1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(#1:IMsg ; e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #3:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #19:Fresh))),
-(e(#2:Sessionkey, n(b, #19:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #19:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #19:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 4 . 14{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 4 . 14{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#10:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #10:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#11:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #11:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #12:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #2:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #12:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#1:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey
    ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #1:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #12:Fresh))),
-(e(#1:Sessionkey, n(b, #12:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#8:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(e(#1:Sessionkey, n(b, #13:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #2:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #13:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#1:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ; #3:IMsg
    ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #1:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #13:Fresh))),
-(e(#1:Sessionkey, n(b, #13:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 9 . 9 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg
    ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#1:Sessionkey, n(b, #15:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #2:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #15:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#1:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(#8:IMsg ; #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #15:Fresh))),
-(e(#1:Sessionkey, n(b, #15:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 9 . 11 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(
    mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #8:IMsg),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#9:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #1:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#1:Sessionkey, n(b, #15:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #2:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #15:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#1:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #8:IMsg) inI
|
-((#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) ; #8:IMsg),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #15:Fresh))),
-(e(#1:Sessionkey, n(b, #15:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 9 . 18 > (
:: nil ::
[ nil |
   -(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#4:Name, s)),
   +(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #5:Fresh ::
[ nil,
   +(#4:Name),
   -(#13:IMsg),
   +(#4:Name ; #6:Name ; n(#4:Name, #5:Fresh) ; #13:IMsg) |
   -(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(
    b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #14:Fresh ::
[ nil,
   +(#15:Name),
   -(#16:IMsg),
   +(#15:Name ; #17:Name ; n(#15:Name, #14:Fresh) ; #16:IMsg),
   -(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #1:Sessionkey ;
    #18:IMsg)),
   +(#18:IMsg) |
   -(e(#1:Sessionkey, n(b, #19:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #19:Fresh)))), nil]  &
:: #2:Fresh,#19:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #19:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #19:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #19:Fresh))) !inI,
e(#1:Sessionkey, n(b, #19:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#4:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg ;
    n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #3:IMsg
    ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#3:IMsg ; n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b,
    s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#4:Name, s)),
+(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#4:Name, s), n(#4:Name, #5:Fresh) ; #6:Name ; #7:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #19:Fresh))),
-(e(#1:Sessionkey, n(b, #19:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #19:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #19:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 18 . 17{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#3:Name),
   -(#12:IMsg),
   +(#3:Name ; #9:Name ; n(#3:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#1:Sessionkey, n(b, #18:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #2:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #18:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#1:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI
|
-(n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #18:Fresh))),
-(e(#1:Sessionkey, n(b, #18:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 4 . 9 . 9 . 18 . 17{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#11:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #11:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ;
    #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#12:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #1:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#1:Sessionkey, n(b, #18:Fresh))),
   +(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #2:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))) |
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #18:Fresh))),
   -(e(#1:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#1:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#1:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)) inI,(
#3:Name != #7:Name),
mkey(#3:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b,
    #2:Fresh) ; a)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; n(
    #3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ; e(mkey(b, s),
    #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; #0:IMsg ;
    e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a))),
+(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(#0:IMsg ; e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), #1:Sessionkey ; n(b, #2:Fresh) ; a)),
+(e(#1:Sessionkey, n(b, #18:Fresh))),
-(e(#1:Sessionkey, n(b, #18:Fresh))),
+(e(#1:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} . 4 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #6:Name ; n(i, #5:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(e(#3:Sessionkey, n(b, #9:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #9:Fresh)))), nil]  &
:: #4:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #9:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #9:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #9:Fresh))) !inI,
e(#3:Sessionkey, n(b, #9:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
-(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #3:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #9:Fresh))),
-(e(#3:Sessionkey, n(b, #9:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #9:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #9:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} . 7 > (
:: nil ::
[ nil |
   -(#8:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
(#8:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(#8:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} . 9 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #8:IMsg),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
((n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #8:IMsg) inI
|
-((n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #8:IMsg),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} . 14 > (
:: nil ::
[ nil |
   -(#7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(n(#0:Name, #6:Fresh)),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#8:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #8:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #10:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #5:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #10:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#4:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
n(#0:Name, #6:Fresh) inI,
mkey(#0:Name, s) inI,
(#7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
-(#7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #6:Fresh)),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #10:Fresh))),
-(e(#4:Sessionkey, n(b, #10:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{1} . 16 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#13:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #13:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #15:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #5:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #15:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#4:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #15:Fresh))),
-(e(#4:Sessionkey, n(b, #15:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} . 6 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh) ; #5:Name
    ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #7:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   -(mkey(#3:Name, s)),
   +(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name,
    #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b,
    #7:Fresh) ; a))),
   +(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s),
    #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   -(e(#2:Sessionkey, n(b, #10:Fresh))),
   +(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil]  &
:: #4:Fresh ::
[ nil,
   +(#3:Name),
   -(#8:IMsg),
   +(#3:Name ; #5:Name ; n(#3:Name, #4:Fresh) ; #8:IMsg) |
   -(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(
    mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a))),
   +(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)), nil]  &
:: #7:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #7:Fresh))) |
   -(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
   +(e(#2:Sessionkey, n(b, #10:Fresh))),
   -(e(#2:Sessionkey, dec(n(b, #10:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#2:Sessionkey, dec(n(b, #10:Fresh))) !inI,
e(#2:Sessionkey, n(b, #10:Fresh)) !inI,
e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh) ;
    #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ;
    a)) !inI,
e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b,
    s), #2:Sessionkey ; n(b, #7:Fresh) ; a)) !inI,
(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ;
    n(b, #7:Fresh) ; a)) !inI,
mkey(#3:Name, s) inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh) ; #5:Name ;
    #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)) inI,(
i != #3:Name),
mkey(i, s) != mkey(#3:Name, s)
|
+(mkey(i, s)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh) ; #5:Name ;
    #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh)
    ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ;
    a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; n(#3:Name, #4:Fresh)
    ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ;
    a))),
+(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #7:Fresh) ; a)),
-(n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(b, s), #2:Sessionkey
    ; n(b, #7:Fresh) ; a)),
-(mkey(#3:Name, s)),
+(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a))),
-(e(mkey(#3:Name, s), n(#3:Name, #4:Fresh) ; #5:Name ; #6:Sessionkey ; e(mkey(
    b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a))),
+(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
-(e(mkey(b, s), #2:Sessionkey ; n(b, #7:Fresh) ; a)),
+(e(#2:Sessionkey, n(b, #10:Fresh))),
-(e(#2:Sessionkey, n(b, #10:Fresh))),
+(e(#2:Sessionkey, dec(n(b, #10:Fresh)))),
-(e(#2:Sessionkey, dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} . 10 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(#9:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(#9:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} . 13 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #12:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #5:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #12:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#4:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
((n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-((n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #12:Fresh))),
-(e(#4:Sessionkey, n(b, #12:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} . 20 > (
:: nil ::
[ nil |
   -(#8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ;
    e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(n(#6:Name, #7:Fresh)),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#10:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #10:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
n(#6:Name, #7:Fresh) inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(#8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(#8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(n(#6:Name, #7:Fresh)),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 4 . 14{2} . 23 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#15:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #15:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(e(#4:Sessionkey, n(b, #16:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #5:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #16:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(#4:Sessionkey, n(b, #16:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #4:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #16:Fresh))),
-(e(#4:Sessionkey, n(b, #16:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 4 . 14{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #9:Name ; n(#1:Name, #8:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(e(#5:Sessionkey, n(b, #12:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #12:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#5:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ;
    a)) inI
|
-(n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #12:Fresh))),
-(e(#5:Sessionkey, n(b, #12:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 4 . 14{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#10:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #10:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#11:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #11:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(e(#5:Sessionkey, n(b, #12:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil]  &
:: #6:Fresh,#12:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #12:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #12:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #12:Fresh))) !inI,
e(#5:Sessionkey, n(b, #12:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name, #2:Fresh)
    ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ;
    a)) inI,(
#1:Name != #7:Name),
mkey(#1:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #5:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #12:Fresh))),
-(e(#5:Sessionkey, n(b, #12:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #12:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #12:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 9 . 4 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#8:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #8:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(e(#5:Sessionkey, n(b, #13:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #13:Fresh)))), nil]  &
:: #6:Fresh,#13:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #13:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #13:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #13:Fresh))) !inI,
e(#5:Sessionkey, n(b, #13:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ; #7:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #5:Sessionkey ;
    #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #13:Fresh))),
-(e(#5:Sessionkey, n(b, #13:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #13:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #13:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 9 . 10 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey
    ; e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#9:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #9:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #5:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#5:Sessionkey, n(b, #15:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #15:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#5:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(#8:IMsg ; #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(#8:IMsg ; #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ;
    e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #15:Fresh))),
-(e(#5:Sessionkey, n(b, #15:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 9 . 12 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #8:IMsg),
   +(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#9:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #9:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #5:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#5:Sessionkey, n(b, #15:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #6:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #15:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#5:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
((#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #8:IMsg) inI
|
-((#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) ; #8:IMsg),
+(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #15:Fresh))),
-(e(#5:Sessionkey, n(b, #15:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 9 . 19 > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ;
    #7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #14:Fresh ::
[ nil,
   +(#15:Name),
   -(#16:IMsg),
   +(#15:Name ; #17:Name ; n(#15:Name, #14:Fresh) ; #16:IMsg),
   -(e(mkey(#15:Name, s), n(#15:Name, #14:Fresh) ; #17:Name ; #5:Sessionkey ;
    #18:IMsg)),
   +(#18:IMsg) |
   -(e(#5:Sessionkey, n(b, #19:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #19:Fresh)))), nil]  &
:: #6:Fresh,#19:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #19:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #19:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #19:Fresh))) !inI,
e(#5:Sessionkey, n(b, #19:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) inI
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; #7:IMsg
    ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#7:IMsg ; #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #19:Fresh))),
-(e(#5:Sessionkey, n(b, #19:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #19:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #19:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 18 . 17{1} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#1:Name),
   -(#12:IMsg),
   +(#1:Name ; #9:Name ; n(#1:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#5:Sessionkey, n(b, #18:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #6:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #18:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#5:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)) inI
|
-(n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #18:Fresh))),
-(e(#5:Sessionkey, n(b, #18:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 9 . 18 . 17{2} > (
:: nil ::
[ nil |
   -(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
   -(mkey(#7:Name, s)),
   +(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#11:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #11:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(
    mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #8:Fresh ::
[ nil,
   +(#7:Name),
   -(#12:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #8:Fresh) ; #12:IMsg) |
   -(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ;
    #0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
   +(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #5:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#5:Sessionkey, n(b, #18:Fresh))),
   +(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #6:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #6:Fresh))) |
   -(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
   +(e(#5:Sessionkey, n(b, #18:Fresh))),
   -(e(#5:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#5:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#5:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b,
    s), #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ;
    n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ;
    n(b, #6:Fresh) ; a)) !inI,
mkey(#1:Name, s) inI,
mkey(#7:Name, s) inI,
(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)) inI,(
#1:Name != #7:Name),
mkey(#1:Name, s) != mkey(#7:Name, s)
|
-(n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg ; n(#1:Name,
    #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey ; n(b,
    #6:Fresh) ; a)),
-(mkey(#7:Name, s)),
+(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#7:Name, s), n(#7:Name, #8:Fresh) ; #9:Name ; #10:Sessionkey ; #0:IMsg
    ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(#0:IMsg ; n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s),
    #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(b, s), #5:Sessionkey
    ; n(b, #6:Fresh) ; a)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; #4:Sessionkey ; e(mkey(
    b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a))),
+(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
-(e(mkey(b, s), #5:Sessionkey ; n(b, #6:Fresh) ; a)),
+(e(#5:Sessionkey, n(b, #18:Fresh))),
-(e(#5:Sessionkey, n(b, #18:Fresh))),
+(e(#5:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#5:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} . 5 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#9:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #9:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #11:Fresh ::
[ nil,
   +(#12:Name),
   -(#13:IMsg),
   +(#12:Name ; #14:Name ; n(#12:Name, #11:Fresh) ; #13:IMsg) |
   -(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #4:Sessionkey ;
    n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(e(#4:Sessionkey, n(b, #15:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #5:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #15:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#4:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #4:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(e(mkey(#12:Name, s), n(#12:Name, #11:Fresh) ; #14:Name ; #4:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #15:Fresh))),
-(e(#4:Sessionkey, n(b, #15:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} . 7 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))), nil]  &
:: #0:Fresh ::
[ nil,
   +(i),
   -(#8:IMsg),
   +(i ; #1:Name ; n(i, #0:Fresh) ; #8:IMsg) |
   -(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
   +(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)), nil]  &
:: #5:Fresh ::
[ nil,
   +(i),
   -(#9:IMsg),
   +(i ; #6:Name ; n(i, #5:Fresh) ; #9:IMsg) |
   -(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
   +(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ;
    n(b, #4:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg),
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #3:Sessionkey ;
    #14:IMsg)),
   +(#14:IMsg) |
   -(e(#3:Sessionkey, n(b, #15:Fresh))),
   +(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil]  &
:: #4:Fresh,#15:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #4:Fresh))) |
   -(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
   +(e(#3:Sessionkey, n(b, #15:Fresh))),
   -(e(#3:Sessionkey, dec(n(b, #15:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(#3:Sessionkey, dec(n(b, #15:Fresh))) !inI,
e(#3:Sessionkey, n(b, #15:Fresh)) !inI,
e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a) !inI,
e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a)) !inI,
e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a)) !inI,
(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)) !inI,
(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)) inI
|
+(mkey(i, s)),
-(n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ; #1:Name ;
    #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
-(e(mkey(i, s), n(i, #5:Fresh) ; #6:Name ; #7:Sessionkey ; n(i, #0:Fresh) ;
    #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ;
    a))),
+(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s), #3:Sessionkey ; n(b,
    #4:Fresh) ; a)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
-(e(mkey(i, s), n(i, #0:Fresh) ; #1:Name ; #2:Sessionkey ; e(mkey(b, s),
    #3:Sessionkey ; n(b, #4:Fresh) ; a))),
+(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
-(e(mkey(b, s), #3:Sessionkey ; n(b, #4:Fresh) ; a)),
+(e(#3:Sessionkey, n(b, #15:Fresh))),
-(e(#3:Sessionkey, n(b, #15:Fresh))),
+(e(#3:Sessionkey, dec(n(b, #15:Fresh)))),
-(e(#3:Sessionkey, dec(n(b, #15:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} . 10 > (
:: nil ::
[ nil |
   -(#9:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg),
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg) |
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
(#9:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh)
    ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(#9:IMsg ; n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} . 12 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg),
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    #16:IMsg)),
   +(#16:IMsg) |
   -(e(#4:Sessionkey, n(b, #17:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil]  &
:: #5:Fresh,#17:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #17:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #17:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #17:Fresh))) !inI,
e(#4:Sessionkey, n(b, #17:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
((n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg) inI
|
-((n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #9:IMsg),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #17:Fresh))),
-(e(#4:Sessionkey, n(b, #17:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #17:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #17:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{1} . 19 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#14:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #14:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #7:Name ; n(#0:Name, #6:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #9:Fresh ::
[ nil,
   +(#10:Name),
   -(#11:IMsg),
   +(#10:Name ; #12:Name ; n(#10:Name, #9:Fresh) ; #11:IMsg) |
   -(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ;
    n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #16:Fresh ::
[ nil,
   +(#17:Name),
   -(#18:IMsg),
   +(#17:Name ; #19:Name ; n(#17:Name, #16:Fresh) ; #18:IMsg),
   -(e(mkey(#17:Name, s), n(#17:Name, #16:Fresh) ; #19:Name ; #4:Sessionkey ;
    #20:IMsg)),
   +(#20:IMsg) |
   -(e(#4:Sessionkey, n(b, #21:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #21:Fresh)))), nil]  &
:: #5:Fresh,#21:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #21:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #21:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #21:Fresh))) !inI,
e(#4:Sessionkey, n(b, #21:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI
|
-(e(mkey(#10:Name, s), n(#10:Name, #9:Fresh) ; #12:Name ; #13:Sessionkey ; n(
    #0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #6:Fresh) ; #7:Name ; #8:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #21:Fresh))),
-(e(#4:Sessionkey, n(b, #21:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #21:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #21:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{2} . 6 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#10:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #10:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#11:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #11:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #12:Fresh ::
[ nil,
   +(#13:Name),
   -(#14:IMsg),
   +(#13:Name ; #15:Name ; n(#13:Name, #12:Fresh) ; #14:IMsg) |
   -(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ;
    n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(e(#4:Sessionkey, n(b, #16:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil]  &
:: #5:Fresh,#16:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #16:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #16:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #16:Fresh))) !inI,
e(#4:Sessionkey, n(b, #16:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(e(mkey(#13:Name, s), n(#13:Name, #12:Fresh) ; #15:Name ; #4:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #16:Fresh))),
-(e(#4:Sessionkey, n(b, #16:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #16:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #16:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{2} . 14 > (
:: nil ::
[ nil |
   -(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #4:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#4:Sessionkey, n(b, #18:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #5:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #18:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#4:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(#10:IMsg ; n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #18:Fresh))),
-(e(#4:Sessionkey, n(b, #18:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{2} . 17 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #10:IMsg),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#11:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #11:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#12:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #12:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #13:Fresh ::
[ nil,
   +(#14:Name),
   -(#15:IMsg),
   +(#14:Name ; #16:Name ; n(#14:Name, #13:Fresh) ; #15:IMsg),
   -(e(mkey(#14:Name, s), n(#14:Name, #13:Fresh) ; #16:Name ; #4:Sessionkey ;
    #17:IMsg)),
   +(#17:IMsg) |
   -(e(#4:Sessionkey, n(b, #18:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #18:Fresh)))), nil]  &
:: #5:Fresh,#18:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #18:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #18:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #18:Fresh))) !inI,
e(#4:Sessionkey, n(b, #18:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #10:IMsg) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-((n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) ; #10:IMsg),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #18:Fresh))),
-(e(#4:Sessionkey, n(b, #18:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #18:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #18:Fresh))))
|
nil)
(< 1 . 7 . 3 . 9 . 9 . 18 . 17{2} . 27 > (
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))), nil]  &
:: nil ::
[ nil |
   -(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   -(mkey(#6:Name, s)),
   +(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#15:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #15:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #7:Fresh ::
[ nil,
   +(#6:Name),
   -(#16:IMsg),
   +(#6:Name ; #8:Name ; n(#6:Name, #7:Fresh) ; #16:IMsg) |
   -(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: #10:Fresh ::
[ nil,
   +(#11:Name),
   -(#12:IMsg),
   +(#11:Name ; #13:Name ; n(#11:Name, #10:Fresh) ; #12:IMsg) |
   -(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ;
    n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
   +(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #17:Fresh ::
[ nil,
   +(#18:Name),
   -(#19:IMsg),
   +(#18:Name ; #20:Name ; n(#18:Name, #17:Fresh) ; #19:IMsg),
   -(e(mkey(#18:Name, s), n(#18:Name, #17:Fresh) ; #20:Name ; #4:Sessionkey ;
    #21:IMsg)),
   +(#21:IMsg) |
   -(e(#4:Sessionkey, n(b, #22:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #22:Fresh)))), nil]  &
:: #5:Fresh,#22:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #22:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #22:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #22:Fresh))) !inI,
e(#4:Sessionkey, n(b, #22:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name,
    #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b,
    #5:Fresh) ; a)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) !inI,
mkey(#0:Name, s) inI,
mkey(#6:Name, s) inI,
e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)) inI,(
#0:Name != #6:Name),
mkey(#0:Name, s) != mkey(#6:Name, s)
|
-(e(mkey(#11:Name, s), n(#11:Name, #10:Fresh) ; #13:Name ; #14:Sessionkey ; n(
    #6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a))),
+(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(#0:Name, #1:Fresh) ;
    #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
-(mkey(#6:Name, s)),
+(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
-(e(mkey(#6:Name, s), n(#6:Name, #7:Fresh) ; #8:Name ; #9:Sessionkey ; n(
    #0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; #3:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #22:Fresh))),
-(e(#4:Sessionkey, n(b, #22:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #22:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #22:Fresh))))
|
nil)
(< 1 . 4 . 2 . 4 . 2 . 4 . 7 . 9 . 0 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   -(#1:Sessionkey),
   +(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   +(dec(n(b, #0:Fresh))), nil]  &
:: nil ::
[ nil |
   -(mkey(#2:Name, s)),
   -(e(mkey(#2:Name, s), seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #0:Fresh) ; #3:Name)),
   +(seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ;
    #3:Name), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #3:Name),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ;
    #3:Name),
   +(n(b, #0:Fresh) ; #3:Name), nil]  &
:: #5:Fresh ::
[ nil,
   -(#3:Name ; #2:Name ; n(#3:Name, #6:Fresh) ; e(mkey(#2:Name, s), #3:Name ;
    n(b, #0:Fresh))),
   +(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #2:Name ; seskey(#3:Name,
    #2:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#2:Name, s), seskey(#3:Name,
    #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ; #3:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#3:Name),
   -(#7:IMsg),
   +(#3:Name ; #2:Name ; n(#3:Name, #6:Fresh) ; #7:IMsg),
   -(e(mkey(#3:Name, s), n(#3:Name, #6:Fresh) ; #2:Name ; seskey(#3:Name,
    #2:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#2:Name, s), seskey(#3:Name,
    #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ; #3:Name))),
   +(e(mkey(#2:Name, s), seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #0:Fresh) ; #3:Name)) | nil]  &
:: #0:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), #1:Sessionkey ; n(b, #8:Fresh) ; a)),
   +(e(#1:Sessionkey, n(b, #0:Fresh))) |
   -(e(#1:Sessionkey, dec(n(b, #0:Fresh)))), nil] )
|
dec(n(b, #0:Fresh)) !inI,
n(b, #0:Fresh) !inI,
e(#1:Sessionkey, dec(n(b, #0:Fresh))) !inI,
(n(b, #0:Fresh) ; #3:Name) !inI,
(seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ; #3:Name)
    !inI,
mkey(#2:Name, s) inI,
e(mkey(#2:Name, s), seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #0:Fresh) ; #3:Name) inI
|
resuscitated(mkey(#2:Name, s)),
-(mkey(#2:Name, s)),
-(e(mkey(#2:Name, s), seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #0:Fresh) ; #3:Name)),
+(seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ; #3:Name),
-(seskey(#3:Name, #2:Name, n(#4:Name, #5:Fresh)) ; n(b, #0:Fresh) ; #3:Name),
+(n(b, #0:Fresh) ; #3:Name),
-(n(b, #0:Fresh) ; #3:Name),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
+(dec(n(b, #0:Fresh))),
-(dec(n(b, #0:Fresh))),
-(#1:Sessionkey),
+(e(#1:Sessionkey, dec(n(b, #0:Fresh)))),
-(e(#1:Sessionkey, dec(n(b, #0:Fresh))))
| ghost(#1:Sessionkey))
(< 1 . 7 . 1 . 2 . 3 . 12 . 13 . 22 . 0{2} > (
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(#7:IMsg ; e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(
    b, #8:Fresh) ; a)),
   +(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #8:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#9:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #9:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #10:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #10:Fresh)))),
    nil]  &
:: #5:Fresh ::
[ nil,
   -(#0:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; e(mkey(#3:Name, s), #0:Name ;
    #6:Nonce)),
   +(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))) | nil]  &
:: #8:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #8:Fresh) ; a)),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #10:Fresh))),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #10:Fresh)))),
    nil] )
|
e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #8:Fresh) ;
    a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #10:Fresh))) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #10:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) inI,
(#7:IMsg ; e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #8:Fresh) ; a)) inI,(
#1:Name != #0:Name),
mkey(#1:Name, s) != mkey(#0:Name, s)
|
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
-(#7:IMsg ; e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #8:Fresh) ; a)),
+(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #8:Fresh)
    ; a)),
-(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #8:Fresh)
    ; a)),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #10:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #10:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #10:Fresh)))),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #10:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 3 . 8 . 15 . 0 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#6:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
    nil]  &
:: #4:Fresh ::
[ nil,
   -(#0:Name ; #2:Name ; n(i, #1:Fresh) ; e(mkey(#2:Name, s), #0:Name ;
    #5:Nonce)),
   +(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))) | nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #8:Fresh) ; a)),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
    nil] )
|
mkey(i, s) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)) !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ;
    a) inI,
e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name)) inI
|
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
-(e(mkey(b, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh)
    ; a)),
+(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 13 . 22 . 0{2} . 5 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(mkey(i, s)),
   -(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#6:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #6:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil]  &

:: #4:Fresh ::
[ nil,
   -(i ; #2:Name ; n(#0:Name, #1:Fresh) ; e(mkey(#2:Name, s), i ; #5:Nonce)),
   +(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))) | nil]  &
:: #7:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))) |
   -(e(mkey(b, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ;
    a)),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i)) !inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))) !inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i))
    !inI,
mkey(#0:Name, s) inI,
e(mkey(b, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ; a)
    inI,
e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i)) inI,(
i != #0:Name),
mkey(i, s) != mkey(#0:Name, s)
|
+(mkey(i, s)),
resuscitated(mkey(i, s)),
-(mkey(i, s)),
-(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
-(e(mkey(b, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ;
    a)),
+(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
+(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #7:Fresh))),
+(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh)))),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #7:Fresh))))
|
nil)
(< 1 . 7 . 1 . 2 . 12 . 13 . 22 . 0{2} . 31 > (
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
   -(mkey(#1:Name, s)),
   +(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))), nil]  &
:: #2:Fresh ::
[ nil,
   +(#1:Name),
   -(#13:IMsg),
   +(#1:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; #13:IMsg) |
   -(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
   +(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ;
    #6:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #14:Fresh))),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #14:Fresh)))),
    nil]  &
:: #5:Fresh ::
[ nil,
   -(#0:Name ; #3:Name ; n(#1:Name, #2:Fresh) ; e(mkey(#3:Name, s), #0:Name ;
    #6:Nonce)),
   +(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name,
    #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))) | nil]  &
:: #7:Fresh ::
[ nil,
   +(#8:Name),
   -(#9:IMsg),
   +(#8:Name ; #10:Name ; n(#8:Name, #7:Fresh) ; #9:IMsg) |
   -(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a))),
   +(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a)), nil]  &
:: #12:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #12:Fresh))) |
   -(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a)),
   +(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #14:Fresh))),
   -(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #14:Fresh)))),
    nil] )
|
e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #12:Fresh)
    ; a) !inI,
e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #14:Fresh))) !inI,
e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #14:Fresh)) !inI,
(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name)) inI,
e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(mkey(
    b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b, #12:Fresh) ;
    a)) inI,(
#1:Name != #0:Name),
mkey(#1:Name, s) != mkey(#0:Name, s)
|
-(e(mkey(#8:Name, s), n(#8:Name, #7:Fresh) ; #10:Name ; #11:Sessionkey ; e(
    mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a))),
+(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a)),
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name,
    #5:Fresh)) ; #6:Nonce ; #0:Name)),
-(mkey(#1:Name, s)),
+(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
-(e(mkey(b, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; n(b,
    #12:Fresh) ; a)),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #14:Fresh))),
-(e(mkey(#1:Name, s), n(#1:Name, #2:Fresh) ; #3:Name ; seskey(#0:Name, #3:Name,
    n(#4:Name, #5:Fresh)) ; e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(
    #4:Name, #5:Fresh)) ; #6:Nonce ; #0:Name))),
+(e(mkey(#3:Name, s), seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)) ; #6:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), n(b, #14:Fresh))),
+(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #14:Fresh)))),
-(e(seskey(#0:Name, #3:Name, n(#4:Name, #5:Fresh)), dec(n(b, #14:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 4 . 9 . 17 . 0 . 17 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(b, #6:Fresh)),
   -(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#0:Name, s)),
   -(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)), nil]  &
:: nil ::
[ nil |
   -(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(mkey(i, s)),
   +(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))), nil]  &
:: #1:Fresh ::
[ nil,
   +(i),
   -(#7:IMsg),
   +(i ; #2:Name ; n(i, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
   +(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))),
    nil]  &
:: #4:Fresh ::
[ nil,
   -(#0:Name ; #2:Name ; n(i, #1:Fresh) ; e(mkey(#2:Name, s), #0:Name ;
    #5:Nonce)),
   +(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))) | nil]  &
:: #6:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #8:Fresh) ; a)),
   +(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))) |
   -(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))),
    nil] )
|
mkey(i, s) !inI,
e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name)) !inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh)) !inI,
(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)) !inI,
n(b, #6:Fresh) inI,
mkey(#0:Name, s) inI,
e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name)) inI,
seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) inI
|
-(n(b, #6:Fresh)),
-(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
resuscitated(mkey(#0:Name, s)),
-(mkey(#0:Name, s)),
-(e(mkey(#0:Name, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
+(mkey(i, s)),
-(n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; #0:Name)),
-(mkey(i, s)),
+(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
-(e(mkey(i, s), n(i, #1:Fresh) ; #2:Name ; seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; #0:Name))),
+(e(mkey(#2:Name, s), seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce
    ; #0:Name)),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
+(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(#0:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 6 . 17 > (
:: nil ::
[ nil |
   +(mkey(i, s)), nil]  &
:: nil ::
[ nil |
   -(n(b, #6:Fresh)),
   -(seskey(i, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))), nil]  &
:: nil ::
[ nil |
   -(mkey(i, s)),
   -(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)), nil]  &
:: nil ::
[ nil |
   -(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh))
    ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(mkey(#0:Name, s)),
   +(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))), nil]  &
:: #1:Fresh ::
[ nil,
   +(#0:Name),
   -(#7:IMsg),
   +(#0:Name ; #2:Name ; n(#0:Name, #1:Fresh) ; #7:IMsg) |
   -(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
   +(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))), nil]  &

:: #4:Fresh ::
[ nil,
   -(i ; #2:Name ; n(#0:Name, #1:Fresh) ; e(mkey(#2:Name, s), i ; #5:Nonce)),
   +(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))) | nil]  &
:: #6:Fresh,#8:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #8:Fresh))),
   -(e(mkey(b, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; n(b, #8:Fresh) ;
    a)),
   +(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))) |
   -(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))), nil] )
|
mkey(i, s) !inI,
e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i)) !inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh))) !inI,
e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh)) !inI,
(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; e(
    mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ; i))
    !inI,
n(b, #6:Fresh) inI,
mkey(#0:Name, s) inI,
e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i)) inI,
seskey(i, #2:Name, n(#3:Name, #4:Fresh)) inI,(
i != #0:Name),
mkey(i, s) != mkey(#0:Name, s)
|
-(n(b, #6:Fresh)),
-(seskey(i, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
+(mkey(i, s)),
resuscitated(mkey(i, s)),
-(mkey(i, s)),
-(e(mkey(i, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    #5:Nonce ; i))),
+(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ;
    e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(mkey(#0:Name, s)),
+(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
-(e(mkey(#0:Name, s), n(#0:Name, #1:Fresh) ; #2:Name ; seskey(i, #2:Name, n(
    #3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name,
    #4:Fresh)) ; #5:Nonce ; i))),
+(e(mkey(#2:Name, s), seskey(i, #2:Name, n(#3:Name, #4:Fresh)) ; #5:Nonce ;
    i)),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), n(b, #6:Fresh))),
+(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh)))),
-(e(seskey(i, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #6:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 9 > (
:: nil ::
[ nil |
   -(dec(n(b, #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#8:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #8:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #0:Fresh,#9:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #9:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #9:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
n(b, #0:Fresh) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
dec(n(b, #0:Fresh)) inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(dec(n(b, #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 10 > (
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(#8:IMsg ; n(b, #0:Fresh)),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #10:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
n(b, #0:Fresh) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
(#8:IMsg ; n(b, #0:Fresh)) inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(#8:IMsg ; n(b, #0:Fresh)),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 15 > (
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh) ; #8:IMsg),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #10:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
n(b, #0:Fresh) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
(n(b, #0:Fresh) ; #8:IMsg) inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(n(b, #0:Fresh) ; #8:IMsg),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 19 > (
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: nil ::
[ nil |
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #8:IMsg),
   +(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #10:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) !inI,
n(b, #0:Fresh) inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #8:IMsg) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #8:IMsg),
+(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
|
nil)
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 20 > (
:: nil ::
[ nil |
   -(#8:Key),
   -(e(#8:Key, n(b, #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#9:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #9:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #0:Fresh,#10:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #10:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #10:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
n(b, #0:Fresh) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(#8:Key, n(b, #0:Fresh)) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(#8:Key),
-(e(#8:Key, n(b, #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
| ghost(#8:Key))
(< 1 . 7 . 1 . 13 . 14 . 24 . 0{2} . 22 . 32 > (
:: nil ::
[ nil |
   -(n(b, #0:Fresh)),
   -(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))), nil]
    &
:: nil ::
[ nil |
   -(mkey(#1:Name, s)),
   -(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)), nil]  &
:: nil ::
[ nil |
   -(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
   -(mkey(#5:Name, s)),
   +(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))), nil]  &
:: #4:Fresh ::
[ nil,
   -(#1:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; e(mkey(#2:Name, s), #1:Name ;
    #7:Nonce)),
   +(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))) | nil]  &
:: #6:Fresh ::
[ nil,
   +(#5:Name),
   -(#13:IMsg),
   +(#5:Name ; #2:Name ; n(#5:Name, #6:Fresh) ; #13:IMsg) |
   -(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name,
    #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
   +(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ;
    #7:Nonce ; #1:Name)),
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil]  &
:: #8:Fresh ::
[ nil,
   +(#9:Name),
   -(#10:IMsg),
   +(#9:Name ; #11:Name ; n(#9:Name, #8:Fresh) ; #10:IMsg) |
   -(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(
    b, #0:Fresh))),
   +(n(b, #0:Fresh)), nil]  &
:: #0:Fresh,#14:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #14:Fresh))),
   -(e(mkey(b, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; n(b,
    #14:Fresh) ; a)),
   +(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))) |
   -(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
    nil] )
|
n(b, #0:Fresh) !inI,
e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))) !inI,
e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh)) !inI,
(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)) !inI,
mkey(#1:Name, s) inI,
mkey(#5:Name, s) inI,
e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name)) inI,
e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(b,
    #0:Fresh)) inI,
seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) inI,(
#1:Name != #5:Name),
mkey(#1:Name, s) != mkey(#5:Name, s)
|
-(e(mkey(#9:Name, s), n(#9:Name, #8:Fresh) ; #11:Name ; #12:Sessionkey ; n(b,
    #0:Fresh))),
+(n(b, #0:Fresh)),
-(n(b, #0:Fresh)),
-(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
resuscitated(mkey(#1:Name, s)),
-(mkey(#1:Name, s)),
-(e(mkey(#1:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name,
    #4:Fresh)) ; #7:Nonce ; #1:Name)),
-(mkey(#5:Name, s)),
+(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
-(e(mkey(#5:Name, s), n(#5:Name, #6:Fresh) ; #2:Name ; seskey(#1:Name, #2:Name,
    n(#3:Name, #4:Fresh)) ; e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(
    #3:Name, #4:Fresh)) ; #7:Nonce ; #1:Name))),
+(e(mkey(#2:Name, s), seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)) ; #7:Nonce
    ; #1:Name)),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), n(b, #0:Fresh))),
+(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh)))),
-(e(seskey(#1:Name, #2:Name, n(#3:Name, #4:Fresh)), dec(n(b, #0:Fresh))))
|
nil)
< 1 . 7 . 3 . 4 . 4 . 4 . 6 . 1{2} . 0 > (
:: nil ::
[ nil |
   -(mkey(#7:Name, s)),
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(#9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)),
   +(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]
    &
:: nil ::
[ nil |
   -(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)), nil]  &
:: nil ::
[ nil |
   -(n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b, s),
    #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(#9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ;
    a)), nil]  &
:: #6:Fresh ::
[ nil,
   +(#7:Name),
   -(#8:IMsg),
   +(#7:Name ; #9:Name ; n(#7:Name, #6:Fresh) ; #8:IMsg),
   -(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(
    mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
   +(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) |
   -(e(#4:Sessionkey, n(b, #11:Fresh))),
   +(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil]  &
:: #5:Fresh,#11:Fresh ::
[ nil,
   -(a),
   +(e(mkey(b, s), a ; n(b, #5:Fresh))) |
   -(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
   +(e(#4:Sessionkey, n(b, #11:Fresh))),
   -(e(#4:Sessionkey, dec(n(b, #11:Fresh)))), nil] )
|
e(#4:Sessionkey, dec(n(b, #11:Fresh))) !inI,
e(#4:Sessionkey, n(b, #11:Fresh)) !inI,
e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a) !inI,
(#9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))
    !inI,
(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) !inI,
(n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ;
    n(b, #5:Fresh) ; a)) !inI,
mkey(#7:Name, s) inI,
e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b,
    s), #4:Sessionkey ; n(b, #5:Fresh) ; a)) inI
|
resuscitated(mkey(#7:Name, s)),
-(mkey(#7:Name, s)),
-(e(mkey(#7:Name, s), n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(
    b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a))),
+(n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
-(n(#7:Name, #6:Fresh) ; #9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey
    ; n(b, #5:Fresh) ; a)),
+(#9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

-(#9:Name ; #4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),

+(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(#4:Sessionkey ; e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
-(e(mkey(b, s), #4:Sessionkey ; n(b, #5:Fresh) ; a)),
+(e(#4:Sessionkey, n(b, #11:Fresh))),
-(e(#4:Sessionkey, n(b, #11:Fresh))),
+(e(#4:Sessionkey, dec(n(b, #11:Fresh)))),
-(e(#4:Sessionkey, dec(n(b, #11:Fresh))))
|
nil
==========================================
reduce in MAUDE-NPA : initials(7) .
rewrites: 12713 in 8ms cpu (5ms real) (1589125 rewrites/second)
result ShortIdSystem: < 1 . 7 . 3 . 2 . 8 . 2 . 1 . 1 > (
:: #1:Fresh ::
[ nil |
   +(a),
   -(e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
   +(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil]  &
:: #0:Fresh ::
[ nil |
   -(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
   +(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
    nil]  &
:: #2:Fresh,#4:Fresh ::
[ nil |
   -(a),
   +(e(mkey(b, s), a ; n(b, #2:Fresh))),
   -(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
   +(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
   -(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))), nil] )
|
e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(mkey(
    b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)) !inI,
e(mkey(b, s), a ; n(b, #2:Fresh)) !inI,
e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))) !inI,
e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh)) !inI,
(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))) !inI
|
-(a),
+(e(mkey(b, s), a ; n(b, #2:Fresh))),
+(a),
-(e(mkey(b, s), a ; n(b, #2:Fresh))),
+(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
-(a ; b ; n(a, #1:Fresh) ; e(mkey(b, s), a ; n(b, #2:Fresh))),
+(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
-(e(mkey(a, s), n(a, #1:Fresh) ; b ; seskey(a, b, n(#3:Name, #0:Fresh)) ; e(
    mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a))),
+(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
-(e(mkey(b, s), seskey(a, b, n(#3:Name, #0:Fresh)) ; n(b, #2:Fresh) ; a)),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), n(b, #4:Fresh))),
+(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh)))),
-(e(seskey(a, b, n(#3:Name, #0:Fresh)), dec(n(b, #4:Fresh))))
|
nil
Bye.
Tue Jun  2 20:54:28 CEST 2020
