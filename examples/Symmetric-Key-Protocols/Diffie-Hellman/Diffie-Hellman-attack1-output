Tue Jun  2 19:21:58 CEST 2020
		     \||||||||||||||||||/
		   --- Welcome to Maude ---
		     /||||||||||||||||||\
	     Maude alpha128 built: Mar 10 2020 14:45:05
	     Copyright 1997-2020 SRI International
		   Tue Jun  2 19:21:58 2020

	    Maude-NPA Version: 3.1.4 (June 2nd 2020)
	    with direct composition, irreducibility constraints and time
	    (To be run with Maude alpha 121 or above)
	    Copyright (c) 2020, University of Illinois
	    All rights reserved.

 Commands:
 red unification? .           returns the unification algorithm to be used
 red new-strands? .           returns the actual protocol strands
 red displayGrammars .        for generating grammars
 red run(X,Y).                for Y backwards analysis steps for attack pattern
    X
 red debug(X,Y).              more information than run command
 red digest(X,Y).             less information than run command
 red summary(X,Y).            for summary of analysis steps
 red ids(X,Y).                for set of state ids
 red initials(X,Y).           for showing only initial steps
==========================================
reduce in MAUDE-NPA : genGrammars .
rewrites: 5223014 in 11996ms cpu (51094ms real) (435396 rewrites/second)
result GrammarList: (errorInconsistentExceptionsInGrammarRule 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI,
   (#0:NeNonceSet notLeq n(i, #2:Fresh)),
   (#1:NeNonceSet * #0:NeNonceSet) notLeq #1:NeNonceSet * #2:NeNonceSet =>
    #0:NeNonceSet inL .  inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:NeNonceSet notInI,
   (#0:NeNonceSet notLeq n(i, #1:Fresh)),
   #0:NeNonceSet notLeq #1:NeNonceSet * #2:NeNonceSet => (#2:NeNonceSet *
    #0:NeNonceSet) inL .  ; 
grl (#1:NeNonceSet * #0:NeNonceSet) notInI,
   (#0:NeNonceSet notLeq n(i, #2:Fresh)),
   (#1:NeNonceSet * #0:NeNonceSet) notLeq #1:NeNonceSet * #2:NeNonceSet =>
    #0:NeNonceSet inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL . ,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL . ,none,
grl empty => (#1:NeNonceSet,#2:NeNonceSet) inL . } usingGrammar 
grl empty => (#1:NeNonceSet * #2:NeNonceSet) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => (#0:Msg ; #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   (#0:Msg notLeq exp(g, n(#1:Name, #2:Fresh))),
   #0:Msg notLeq #3:Name ; exp(g, n(#4:Name, #5:Fresh)) => (#6:Msg ; #0:Msg)
    inL . )
| (errorNoHeuristicApplied {
grl empty => (#1:Msg ; #2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . ,none,
grl empty => (#1:Msg,#2:Msg) inL . } usingGrammar 
grl empty => (#1:Msg ; #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI => d(#0:Key, #1:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI => d(#1:Key, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => d(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => d(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Key notInI,
   (#0:Key notLeq exp(#1:Exp, n(#2:Name, #3:Fresh))),
   #0:Key notLeq exp(#4:Gen, #5:NeNonceSet * n(#6:Name, #7:Fresh)) => e(#0:Key,
    #8:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:Msg notInI,
   #0:Msg notLeq sec(#1:Name, #2:Fresh) => e(#3:Key, #0:Msg) inL . )
| (errorNoHeuristicApplied {
grl empty => e(#1:Key, #2:Msg) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . ,none,
grl empty => (#2:Msg,#1:Key) inL . } usingGrammar 
grl empty => e(#1:Key, #2:Msg) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:GenvExp notInI => exp(#0:GenvExp, #1:NeNonceSet) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl #0:NeNonceSet notInI,
   (#0:NeNonceSet notLeq n(#1:Name, #2:Fresh)),
   #0:NeNonceSet notLeq #4:NeNonceSet * #3:NeNonceSet => exp(#5:GenvExp,
    #0:NeNonceSet) inL . )
| (errorNoHeuristicApplied {
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL . ,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL . ,none,
grl empty => (#2:NeNonceSet,#1:GenvExp) inL . } usingGrammar 
grl empty => exp(#1:GenvExp, #2:NeNonceSet) inL . )
| (
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl n(#0:Name, #1:Fresh) notLeq n(i, #2:Fresh) => n(#0:Name, #1:Fresh) inL . )
| (errorInconsistentExceptionsInGrammarRule 
grl sec(#0:Name, #1:Fresh) notLeq sec(#3:Name, #5:Fresh) => sec(#0:Name,
    #1:Fresh) inL .  inGrammar 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL .  ; 
grl sec(#0:Name, #1:Fresh) notLeq sec(#3:Name, #5:Fresh) => sec(#0:Name,
    #1:Fresh) inL . )
| 
grl empty => n(a, #0:Fresh) inL .  ; 
grl empty => n(b, #0:Fresh) inL .  ; 
grl empty => (#0:NeNonceSet * n(a, #1:Fresh)) inL .  ; 
grl empty => (#0:NeNonceSet * n(b, #1:Fresh)) inL .  ; 
grl #0:Msg inL => e(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => d(#1:Key, #0:Msg) inL .  ; 
grl #0:Msg inL => (#1:Msg ; #0:Msg) inL .  ; 
grl #0:Msg inL => (#0:Msg ; #1:Msg) inL . 
==========================================
reduce in MAUDE-NPA : run(1, 0) .
rewrites: 3970 in 132ms cpu (525ms real) (30075 rewrites/second)
result ShortIdSystem: < 1 > 
:: r:Fresh ::
[ nil, 
   -(a ; b ; XE:Exp), 
   +(a ; b ; exp(g, n(b, r:Fresh))) | 
   -(e(exp(XE:Exp, n(b, r:Fresh)), sec(a, r':Fresh))), nil] 
| 
sec(a, r':Fresh) inI,
e(exp(XE:Exp, n(b, r:Fresh)), sec(a, r':Fresh)) inI
| 
-(e(exp(XE:Exp, n(b, r:Fresh)), sec(a, r':Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : summary(1, 1) .
rewrites: 860639 in 2876ms cpu (11503ms real) (299248 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 2) .
rewrites: 3512558 in 9436ms cpu (34338ms real) (372250 rewrites/second)
result Summary: States>> 10 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 3) .
rewrites: 8412857 in 23016ms cpu (77780ms real) (365522 rewrites/second)
result Summary: States>> 11 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 4) .
rewrites: 15589200 in 33028ms cpu (92008ms real) (471999 rewrites/second)
result Summary: States>> 16 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 5) .
rewrites: 24393762 in 44904ms cpu (113783ms real) (543242 rewrites/second)
result Summary: States>> 20 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 6) .
rewrites: 51431511 in 86920ms cpu (211995ms real) (591710 rewrites/second)
result Summary: States>> 20 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 7) .
rewrites: 57179489 in 94800ms cpu (179000ms real) (603159 rewrites/second)
result Summary: States>> 21 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 8) .
rewrites: 56481457 in 104560ms cpu (162679ms real) (540182 rewrites/second)
result Summary: States>> 13 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 9) .
rewrites: 33044704 in 47216ms cpu (69157ms real) (699862 rewrites/second)
result Summary: States>> 9 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 10) .
rewrites: 24256970 in 33540ms cpu (50752ms real) (723225 rewrites/second)
result Summary: States>> 6 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 11) .
rewrites: 10592121 in 15780ms cpu (23557ms real) (671237 rewrites/second)
result Summary: States>> 3 Solutions>> 0
==========================================
reduce in MAUDE-NPA : summary(1, 12) .
rewrites: 5429280 in 6800ms cpu (12311ms real) (798423 rewrites/second)
result Summary: States>> 2 Solutions>> 1
==========================================
reduce in MAUDE-NPA : summary(1, 13) .
rewrites: 2064776 in 2628ms cpu (4394ms real) (785683 rewrites/second)
result Summary: States>> 2 Solutions>> 2
==========================================
reduce in MAUDE-NPA : run(1, 1) .
rewrites: 142 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 17 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
sec(a, #2:Fresh) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI
| 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
sec(a, #3:Fresh) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI
| 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 9{1} > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; #3:Exp), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
| 
sec(a, #1:Fresh) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,(
#0:Key != exp(#3:Exp, n(b, #2:Fresh))),
e(#0:Key, sec(a, #1:Fresh)) != e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))
| 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
(< 1 . 9{2} > (
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(b, #2:Fresh))), 
   -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; #3:Exp), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
| 
sec(a, #1:Fresh) !inI,
e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
exp(#3:Exp, n(b, #2:Fresh)) inI
| 
-(exp(#3:Exp, n(b, #2:Fresh))), 
-(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Exp, n(b, #2:Fresh)), sec(a, #1:Fresh)))
| 
nil)
(< 1 . 10{1} > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
| 
sec(a, #1:Fresh) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,(
#0:Key != exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))),
e(#0:Key, sec(a, #1:Fresh)) != e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)),
    sec(a, #1:Fresh))
| 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
< 1 . 10{2} > (
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
| 
sec(a, #1:Fresh) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)) inI
| 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 2) .
rewrites: 276 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 17 . 6 > (
:: nil ::
[ nil | 
   -(#3:Key), 
   -(e(#3:Key, sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(#3:Key, sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI
| 
-(#3:Key), 
-(e(#3:Key, sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#3:Key))
(< 1 . 18 . 6 > (
:: nil ::
[ nil | 
   -(#4:Key), 
   -(e(#4:Key, sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
e(#4:Key, sec(a, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI
| 
-(#4:Key), 
-(e(#4:Key, sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#4:Key))
(< 1 . 18 . 12 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
sec(a, #3:Fresh) inI,
exp(#0:Gen, n(b, #2:Fresh)) inI
| 
generatedByIntruder(#1:NeNonceSet), 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{2} . 12 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(b, #2:Fresh)) inI
| 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#1:NeNonceSet))
(< 1 . 10{2} . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
   +(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)) inI,
(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))) inI
| 
-(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
+(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{2} . 17 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)) inI,
(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))) inI
| 
-(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)))
| 
nil)
(< 1 . 9{1} . 12 . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; #4:Exp), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#4:Exp, n(b, #3:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #5:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#4:Exp, n(b, #3:Fresh)), sec(a, #2:Fresh)) inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI
| 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(e(exp(#4:Exp, n(b, #3:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 9{1} . 13 . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; #5:Exp), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) inI
| 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{1} . 14 . 0{1} > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #6:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,(
#5:NeNonceSet != n(a, #1:Fresh)),(
#5:NeNonceSet != #11:NeNonceSet * n(a, #1:Fresh)),(
#0:Exp != exp(#4:Gen, n(b, #3:Fresh))),(
#0:Exp != exp(#4:Gen, #11:NeNonceSet * n(b, #3:Fresh))),
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) != e(exp(#4:Gen, #5:NeNonceSet
    * n(b, #3:Fresh)), sec(a, #2:Fresh))
| 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #3:Fresh)), sec(a, #2:Fresh)))
| 
nil)
< 1 . 10{1} . 15 . 0{1} > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #7:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) inI,(
#1:NeNonceSet != n(b, #4:Fresh)),(
#1:NeNonceSet != %12:NeNonceSet * n(b, #4:Fresh)),(
#6:NeNonceSet != n(a, #2:Fresh)),(
#6:NeNonceSet != %12:NeNonceSet * n(a, #2:Fresh)),(
#0:Gen != #5:Gen),
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) != e(exp(
    #5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh))
| 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 3) .
rewrites: 458 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 13 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #4:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)), sec(a, #1:Fresh))), nil]  &
    
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)), sec(a, #1:Fresh))), nil] )
| 
#3:NeNonceSet !inI,
sec(a, #1:Fresh) !inI,
e(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)), sec(a, #1:Fresh)) !inI,
exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
exp(#2:Gen, n(b, #4:Fresh)) inI
| 
generatedByIntruder(#3:NeNonceSet), 
-(exp(#2:Gen, n(b, #4:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #1:Fresh)), 
+(e(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)), sec(a, #1:Fresh))), 
-(e(exp(#2:Gen, #3:NeNonceSet * n(b, #4:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
(< 1 . 18 . 12 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
sec(a, #3:Fresh) inI,
(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{2} . 12 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{2} . 14 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
   +(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #4:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
   +(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))) !inI,
exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)) inI,
(#4:Name ; exp(#0:Gen, n(b, #2:Fresh))) inI
| 
-(a), 
-(#4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
+(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
-(a ; #4:Name ; exp(#0:Gen, n(b, #2:Fresh))), 
+(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{2} . 17 . 7 > (
:: nil ::
[ nil | 
   -(a), 
   -(#5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)) !inI,
(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)) inI,
(#5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))) inI
| 
-(a), 
-(#5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #5:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)))
| 
nil)
(< 1 . 17 . 6 . 12 . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(a, #4:Fresh))), 
   -(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #5:Name ; #3:Exp), 
   +(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Exp, n(a, #4:Fresh)) inI
| 
resuscitated(exp(#3:Exp, n(a, #4:Fresh))), 
-(exp(#3:Exp, n(a, #4:Fresh))), 
-(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 17 . 6 . 13 . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) inI
| 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #6:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) inI,(
#4:NeNonceSet != n(a, #1:Fresh)),(
#4:NeNonceSet != #10:NeNonceSet * n(a, #1:Fresh)),(
#0:Exp != exp(#3:Gen, n(b, #5:Fresh))),(
#0:Exp != exp(#3:Gen, #10:NeNonceSet * n(b, #5:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))
| 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 17 . 0{1} > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI,(
#1:NeNonceSet != n(a, #6:Fresh)),(
#1:NeNonceSet != %11:NeNonceSet * n(a, #6:Fresh)),(
#5:NeNonceSet != n(b, #2:Fresh)),(
#5:NeNonceSet != %11:NeNonceSet * n(b, #2:Fresh)),(
#4:Gen != #0:Gen),
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) != exp(#0:Gen, #1:NeNonceSet * n(b,
    #2:Fresh))
| 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 9{1} . 12 . 0 . 38 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; #5:Exp), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh))), nil]  & 
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(a, #2:Fresh)) inI
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#5:Exp, n(b, #4:Fresh)), sec(a, #3:Fresh)))
| ghost(#1:NeNonceSet))
< 1 . 10{1} . 14 . 0{1} . 40{1} > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #7:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(a, #2:Fresh)) inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) != e(exp(
    #5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh))
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #4:Fresh)), sec(a, #3:Fresh)))
| ghost(#1:NeNonceSet)
==========================================
reduce in MAUDE-NPA : run(1, 4) .
rewrites: 721 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 13 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), nil] )
| 
#4:NeNonceSet !inI,
sec(a, #1:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI
| 
-(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
generatedByIntruder(#4:NeNonceSet), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #1:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
(< 1 . 18 . 12 . 3 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
sec(a, #3:Fresh) inI,
(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 10{2} . 12 . 3 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#5:Msg ; #4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#4:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{2} . 14 . 9 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
(#5:Msg ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) inI
| 
-(#5:Msg ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
(< 1 . 10{2} . 14 . 9 . 11 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(b, #2:Fresh)) inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI
| 
-(#0:Name), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
(< 1 . 10{2} . 17 . 7 . 11 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI
| 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
| 
nil)
(< 1 . 17 . 6 . 12 . 0 . 2 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(a, #4:Fresh))), 
   -(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; #3:Exp), 
   +(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Exp, n(a, #4:Fresh)) inI
| 
-(a ; #5:Name ; #3:Exp), 
+(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Exp, n(a, #4:Fresh))), 
-(exp(#3:Exp, n(a, #4:Fresh))), 
-(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #5:Name ; #3:Exp))
(< 1 . 17 . 6 . 12 . 0 . 5 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) inI
| 
-(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 38 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, n(a, #5:Fresh)) inI
| 
-(exp(#3:Gen, n(a, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 2 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #6:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) inI,(
#0:Exp != exp(#3:Gen, n(b, #5:Fresh))),(
#0:Exp != exp(#3:Gen, #7:NeNonceSet * n(b, #5:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))
| 
-(a ; #6:Name ; #0:Exp), 
+(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #6:Name ; #0:Exp))
(< 1 . 18 . 6 . 16 . 0{1} . 23 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #6:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#4:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
exp(#3:Gen, n(b, #5:Fresh)) inI,(
#0:Exp != exp(#3:Gen, n(b, #5:Fresh))),(
#0:Exp != exp(#3:Gen, #7:NeNonceSet * n(b, #5:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))
| 
generatedByIntruder(#4:NeNonceSet), 
-(exp(#3:Gen, n(b, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #6:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, n(a, #6:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI
| 
-(exp(#4:Gen, n(a, #6:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI,
exp(#0:Gen, n(b, #2:Fresh)) inI
| 
generatedByIntruder(#1:NeNonceSet), 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) != exp(#0:Gen, #1:NeNonceSet * n(b,
    #2:Fresh))
| 
-(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(a ; #7:Name ; exp(#4:Gen, #5:NeNonceSet)))
(< 1 . 9{1} . 12 . 0 . 38 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; #6:Exp), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#6:Exp, n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
e(exp(#6:Exp, n(b, #5:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#6:Exp, n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
< 1 . 10{1} . 14 . 0{1} . 40{1} . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#6:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#6:Gen, #7:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#6:Gen, #7:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) inI,
(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) != e(exp(
    #6:Gen, #7:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))
| 
-(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#6:Gen, #7:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet)
==========================================
reduce in MAUDE-NPA : run(1, 5) .
rewrites: 1067 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 13 . 3 . 3 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, n(b, #3:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; #5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
   +(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#2:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), nil] )
| 
#4:NeNonceSet !inI,
sec(a, #1:Fresh) !inI,
e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh)) !inI,
exp(#2:Gen, n(b, #3:Fresh)) !inI,
exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)) !inI,
(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI,
(#6:Msg ; #5:Msg ; exp(#2:Gen, n(b, #3:Fresh))) inI
| 
-(#6:Msg ; #5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
-(#5:Msg ; exp(#2:Gen, n(b, #3:Fresh))), 
+(exp(#2:Gen, n(b, #3:Fresh))), 
generatedByIntruder(#4:NeNonceSet), 
-(exp(#2:Gen, n(b, #3:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh))), 
-(sec(a, #1:Fresh)), 
+(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh))), 
-(e(exp(#2:Gen, #4:NeNonceSet * n(b, #3:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
(< 1 . 18 . 12 . 3 . 3 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
sec(a, #2:Fresh) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 10{2} . 14 . 9 . 11 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI
| 
-(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
(< 1 . 10{2} . 17 . 7 . 11 . 16 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #3:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, n(b, #3:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI
| 
-(exp(#1:Gen, n(b, #3:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{2} . 17 . 7 . 11 . 25 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))),
    nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh))), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil] )
| 
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)),
    sec(a, #6:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)))
    !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))
    inI
| 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 17 . 6 . 12 . 0 . 5 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, n(a, #5:Fresh)) inI
| 
-(exp(#3:Gen, n(a, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet),
ghost(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 5 . 16 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI
| 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 38 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 2 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #6:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#4:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
exp(#3:Gen, n(b, #5:Fresh)) inI,(
#0:Exp != exp(#3:Gen, n(b, #5:Fresh))),(
#0:Exp != exp(#3:Gen, #7:NeNonceSet * n(b, #5:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))
| 
generatedByIntruder(#4:NeNonceSet), 
-(exp(#3:Gen, n(b, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(a ; #6:Name ; #0:Exp), 
+(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #6:Name ; #0:Exp))
(< 1 . 18 . 6 . 16 . 0{1} . 23 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #7:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI,(
#0:Exp != exp(#3:Gen, n(b, #4:Fresh))),(
#0:Exp != exp(#3:Gen, #8:NeNonceSet * n(b, #4:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))
| 
-(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) inI,
exp(#0:Gen, n(a, #1:Fresh)) inI
| 
-(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 19 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #6:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #7:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#5:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, n(b, #6:Fresh)) inI,
exp(#0:Gen, n(a, #1:Fresh)) inI
| 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#4:Gen, n(b, #6:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #7:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) inI
| 
-(a ; #7:Name ; exp(#0:Gen, #1:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(a ; #7:Name ; exp(#0:Gen, #1:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 5 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #2:Fresh))), 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) inI,
(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{1} > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #7:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #7:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh)) inI,
exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)) inI
| 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #3:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)))
| ghost(#1:NeNonceSet),
ghost(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)))
(< 1 . 9{1} . 12 . 0 . 38 . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; #7:Exp), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#7:Exp, n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
e(exp(#7:Exp, n(b, #6:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#7:Exp, n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{1} . 14 . 0{1} . 40{1} . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#7:Gen, #8:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#7:Gen, #8:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
e(exp(#7:Gen, #8:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) inI,
(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) != e(exp(
    #7:Gen, #8:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))
| 
-(#5:Msg ; #4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#4:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(e(exp(#7:Gen, #8:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{2} . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #7:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #7:Fresh))) | 
   -(e(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #7:Fresh))), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh)) !inI,
exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)) inI,
(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #7:Fresh))) inI,(
n(a, #3:Fresh) != #9:NeNonceSet * n(a, #3:Fresh)),(
exp(#0:Gen, n(b, #7:Fresh)) != exp(#0:Gen, #1:NeNonceSet * n(b, #7:Fresh))),
exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)) != exp(#0:Gen, #1:NeNonceSet * n(
    a, #3:Fresh) * n(b, #7:Fresh))
| 
resuscitated(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #7:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * n(b, #7:Fresh))), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#0:Gen, n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a, #4:Fresh)))
| 
nil)
< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{3} . 0 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #7:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #7:Fresh))) | 
   -(e(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(b,
    #7:Fresh))), 
   +(e(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))
    inI,
(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(b, #7:Fresh)))
    inI,(
n(a, #3:Fresh) != %12:NeNonceSet * n(a, #3:Fresh)),(
exp(#0:Gen, n(b, #7:Fresh)) != exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(
    b, #7:Fresh))),
exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)) != exp(#0:Gen,
    #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))
| 
resuscitated(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(b,
    #7:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(b, #7:Fresh))), 
+(e(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * %12:NeNonceSet * n(a, #3:Fresh) * n(b,
    #7:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh))), 
-(e(exp(#0:Gen, %12:NeNonceSet * n(a, #3:Fresh) * n(b, #7:Fresh)), sec(a,
    #4:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 6) .
rewrites: 1441 in 0ms cpu (0ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 13 . 3 . 3 . 1 > (
:: nil ::
[ nil | 
   -(#0:Key), 
   -(e(#0:Key, sec(a, #1:Fresh))), 
   +(sec(a, #1:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #1:Fresh)), 
   +(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #2:Fresh))), 
   +(b ; exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #2:Fresh))), 
   +(exp(g, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))), 
   -(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), nil] )
| 
#3:NeNonceSet !inI,
sec(a, #1:Fresh) !inI,
e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)) !inI,
exp(g, n(b, #2:Fresh)) !inI,
exp(g, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
(a ; b ; exp(g, #3:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #2:Fresh))) !inI,
(b ; exp(g, n(b, #2:Fresh))) !inI,
e(#0:Key, sec(a, #1:Fresh)) inI
| 
generatedByIntruder(a ; b ; exp(g, #3:NeNonceSet)), 
-(a ; b ; exp(g, #3:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #2:Fresh))), 
-(a ; b ; exp(g, n(b, #2:Fresh))), 
+(b ; exp(g, n(b, #2:Fresh))), 
-(b ; exp(g, n(b, #2:Fresh))), 
+(exp(g, n(b, #2:Fresh))), 
generatedByIntruder(#3:NeNonceSet), 
-(exp(g, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
-(#0:Key), 
-(e(#0:Key, sec(a, #1:Fresh))), 
+(sec(a, #1:Fresh)), 
-(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #1:Fresh)), 
+(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh))), 
-(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #1:Fresh)))
| ghost(#0:Key))
(< 1 . 10{2} . 14 . 9 . 11 . 3 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, n(b, #2:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; #5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #3:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] 
    & 
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
   +(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#1:Gen, n(b, #2:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))) !inI,
exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)) inI,
(#6:Msg ; #5:Msg ; exp(#1:Gen, n(b, #2:Fresh))) inI
| 
-(#6:Msg ; #5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
-(#5:Msg ; exp(#1:Gen, n(b, #2:Fresh))), 
+(exp(#1:Gen, n(b, #2:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, n(b, #2:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(b, #2:Fresh))), 
+(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(e(exp(#1:Gen, n(a, #3:Fresh) * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
(< 1 . 10{2} . 17 . 7 . 11 . 16 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #3:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
   +(exp(#1:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
exp(#1:Gen, n(b, #3:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))) inI
| 
-(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
+(exp(#1:Gen, n(b, #3:Fresh))), 
-(exp(#1:Gen, n(b, #3:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{2} . 17 . 7 . 11 . 25 . 17 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))),
    nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #4:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh))), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil] )
| 
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)),
    sec(a, #6:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)))
    !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))) !inI,
exp(#1:Gen, n(b, #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))
    inI
| 
-(exp(#1:Gen, n(b, #4:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh)))
| ghost(#3:NeNonceSet),
ghost(#2:NeNonceSet))
(< 1 . 17 . 6 . 12 . 0 . 5 . 14 . 4 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 5 . 16 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
exp(#3:Gen, n(a, #5:Fresh)) inI
| 
-(exp(#3:Gen, n(a, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet),
ghost(#6:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 38 . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 2 . 14 . 4 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #7:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI,(
#0:Exp != exp(#3:Gen, n(b, #4:Fresh))),(
#0:Exp != exp(#3:Gen, #8:NeNonceSet * n(b, #4:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))
| 
-(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(a ; #7:Name ; #0:Exp), 
+(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #7:Name ; #0:Exp))
(< 1 . 18 . 6 . 16 . 0{1} . 23 . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #8:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI,(
#0:Exp != exp(#3:Gen, n(b, #4:Fresh))),(
#0:Exp != exp(#3:Gen, #9:NeNonceSet * n(b, #4:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))
| 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #8:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI
| 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(a ; #8:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #8:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 14 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #7:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) inI,
exp(#0:Gen, n(b, #2:Fresh)) inI
| 
generatedByIntruder(#1:NeNonceSet), 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(a ; #7:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #7:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 20 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #8:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(b, #2:Fresh)) inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI
| 
generatedByIntruder(#1:NeNonceSet), 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 19 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #8:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, n(a, #5:Fresh)) inI,
(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI,
(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
-(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 16 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #7:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#7:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #7:Fresh))) | 
   -(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #7:Fresh)) inI,
exp(#0:Gen, n(b, #1:Fresh)) inI
| 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #7:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #8:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 5 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #6:Fresh))), 
   -(a ; #9:Name ; exp(#4:Gen, #5:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(a, #6:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{1} . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #7:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #7:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#0:Gen, n(a, #2:Fresh)) inI,
exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)) inI
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)))
| ghost(#1:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{2} . 0 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
   +(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh))), 
   -(e(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a,
    #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil] 
    & 
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
   +(e(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a,
    #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a,
    #3:Fresh)) !inI,
(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))) !inI,
exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)) inI,
exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)) inI,
(#5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))) inI,(
n(a, #1:Fresh) != #6:NeNonceSet * n(a, #1:Fresh)),(
exp(#0:Gen, n(b, #2:Fresh)) != exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))),
exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)) != exp(#0:Gen, #4:NeNonceSet * n(
    a, #1:Fresh) * n(b, #2:Fresh))
| 
-(a), 
-(#5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
+(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
resuscitated(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
-(a ; #5:Name ; exp(#0:Gen, #4:NeNonceSet * n(b, #2:Fresh))), 
+(e(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a,
    #3:Fresh))), 
resuscitated(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh))), 
-(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh))), 
-(e(exp(#0:Gen, #4:NeNonceSet * n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a,
    #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, n(a, #1:Fresh) * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| 
nil)
< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{3} . 0 . 9 > (
:: nil ::
[ nil | 
   -(a), 
   -(#6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b,
    #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b,
    #3:Fresh))), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh)), sec(a, #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)),
    sec(a, #4:Fresh)) !inI,
(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh)))
    !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)) inI,
exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))
    inI,
(#6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh))) inI,(
n(a, #2:Fresh) != #1:NeNonceSet * n(a, #2:Fresh)),(
exp(#0:Gen, n(b, #3:Fresh)) != exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b,
    #3:Fresh))),
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)) != exp(#0:Gen,
    #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))
| 
-(a), 
-(#6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh))), 
resuscitated(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b,
    #3:Fresh))), 
-(a ; #6:Name ; exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh)), sec(a, #4:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #5:NeNonceSet * n(a, #2:Fresh) * n(b,
    #3:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh) * n(b, #3:Fresh)), sec(a,
    #4:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 7) .
rewrites: 1843 in 4ms cpu (1ms real) (460750 rewrites/second)
result IdSystemSet: (< 1 . 10{2} . 17 . 7 . 11 . 16 . 3 . 4 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #3:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
   +(exp(#1:Gen, n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
   +(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil]  & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
exp(#1:Gen, n(b, #3:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#1:Gen, n(b, #3:Fresh))) inI
| 
-(#7:Msg ; #6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
+(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
-(#6:Msg ; exp(#1:Gen, n(b, #3:Fresh))), 
+(exp(#1:Gen, n(b, #3:Fresh))), 
-(exp(#1:Gen, n(b, #3:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 10{2} . 17 . 7 . 11 . 25 . 17 . 3 > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))),
    nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(b, #4:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#1:Gen, n(b, #4:Fresh))), 
   +(exp(#1:Gen, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh))), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil] )
| 
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)),
    sec(a, #6:Fresh)) !inI,
exp(#1:Gen, n(b, #4:Fresh)) !inI,
exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh)) !inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)))
    !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))
    inI,
(#7:Msg ; exp(#1:Gen, n(b, #4:Fresh))) inI
| 
-(#7:Msg ; exp(#1:Gen, n(b, #4:Fresh))), 
+(exp(#1:Gen, n(b, #4:Fresh))), 
-(exp(#1:Gen, n(b, #4:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(exp(#1:Gen, #3:NeNonceSet * n(b, #4:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh)))
| ghost(#3:NeNonceSet),
ghost(#2:NeNonceSet))
(< 1 . 17 . 6 . 12 . 0 . 5 . 14 . 4 . 4 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)))
(< 1 . 17 . 6 . 12 . 0 . 5 . 16 . 14 . 4 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(b, #1:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; #0:Exp), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#0:Exp, n(b, #1:Fresh)) inI,
(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#0:Exp, n(b, #1:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#0:Exp, n(b, #1:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(#6:NeNonceSet),
ghost(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 2 . 14 . 4 . 4 > (
:: nil ::
[ nil | 
   -(exp(#0:Exp, n(a, #1:Fresh))), 
   -(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #1:Fresh,#2:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #8:Name ; #0:Exp), 
   +(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) !inI,
exp(#0:Exp, n(a, #1:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI,(
#0:Exp != exp(#3:Gen, n(b, #4:Fresh))),(
#0:Exp != exp(#3:Gen, #9:NeNonceSet * n(b, #4:Fresh))),
exp(#0:Exp, n(a, #1:Fresh)) != exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))
| 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(a ; #8:Name ; #0:Exp), 
+(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#0:Exp, n(a, #1:Fresh))), 
-(exp(#0:Exp, n(a, #1:Fresh))), 
-(e(exp(#0:Exp, n(a, #1:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #8:Name ; #0:Exp))
(< 1 . 18 . 6 . 16 . 0{1} . 23 . 6 . 6 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(a, #4:Fresh))), 
   -(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #5:Name ; #3:Exp), 
   +(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
exp(#3:Exp, n(a, #4:Fresh)) inI,(
#3:Exp != exp(g, n(b, #0:Fresh))),(
#3:Exp != exp(g, #6:NeNonceSet * n(b, #0:Fresh))),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#3:Exp, n(a, #4:Fresh))
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Exp, n(a, #4:Fresh))), 
-(exp(#3:Exp, n(a, #4:Fresh))), 
-(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 14 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #6:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#5:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#4:Gen, n(b, #6:Fresh)) inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#4:Gen, n(b, #6:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 14 . 3 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) inI,
(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #8:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 6 . 21 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #6:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#5:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
exp(#4:Gen, n(b, #6:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#4:Gen, n(b, #6:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * n(b, #6:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 20 . 5 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 19 . 6 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
exp(#0:Gen, n(a, #1:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #2:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 16 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #4:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #3:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh)) inI,
(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) inI
| 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #3:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(exp(#5:Gen, n(b, #6:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet * n(a, #3:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 16 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, n(a, #2:Fresh)) inI,
exp(#5:Gen, n(b, #6:Fresh)) inI
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#1:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #8:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 5 . 6 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{1} . 14 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #7:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #7:Fresh))) | 
   -(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #1:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)) inI,
(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #6:NeNonceSet * n(b, #7:Fresh)), sec(a, #4:Fresh)))
| ghost(#2:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{2} . 0 . 9 . 15{1} > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh)) inI,
exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,(
n(a, #4:Fresh) != #6:NeNonceSet * n(a, #4:Fresh)),(
exp(#1:Gen, n(b, #3:Fresh)) != exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))),
exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) != exp(#1:Gen, #2:NeNonceSet * n(
    a, #4:Fresh) * n(b, #3:Fresh))
| 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
resuscitated(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{2} . 0 . 9 . 15{2} > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   +(#0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(sec(a, #5:Fresh)), 
   +(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh))), 
   -(e(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
   +(sec(a, #5:Fresh)), nil]  & 
:: #3:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, n(a, #4:Fresh))), 
   +(a ; b ; exp(g, n(b, #3:Fresh))) | 
   -(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), nil] 
    & 
:: #4:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
   +(e(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), nil] )
| 
sec(a, #5:Fresh) !inI,
e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)) !inI,
e(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))) !inI,
(#0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))) !inI,
exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) inI,
exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)) inI,(
n(a, #4:Fresh) != #6:NeNonceSet * n(a, #4:Fresh)),(
exp(#1:Gen, n(b, #3:Fresh)) != exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))),
exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)) != exp(#1:Gen, n(a, #4:Fresh) * n(
    a, #4:Fresh) * n(b, #3:Fresh))
| 
-(#0:Name), 
-(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
+(#0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
resuscitated(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
+(e(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
resuscitated(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(e(exp(#1:Gen, n(a, #4:Fresh) * n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a,
    #5:Fresh))), 
+(sec(a, #5:Fresh)), 
-(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh))), 
-(sec(a, #5:Fresh)), 
+(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh))), 
-(e(exp(#1:Gen, n(a, #4:Fresh) * n(b, #3:Fresh)), sec(a, #5:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{3} . 0 . 9 . 15{1} > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))),
    nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh))), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil] )
| 
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh)) !inI,
e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)),
    sec(a, #6:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)))
    !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))
    inI,(
n(a, #5:Fresh) != #2:NeNonceSet * n(a, #5:Fresh)),(
exp(#1:Gen, n(b, #4:Fresh)) != exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))),
exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)) != exp(#1:Gen,
    #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))
| 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
resuscitated(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b,
    #4:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(b, #4:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
-(sec(a, #6:Fresh)), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh)))
| 
nil)
< 1 . 18 . 6 . 16 . 0{1} . 5{1} . 20{3} . 0 . 9 . 15{2} > (
:: nil ::
[ nil | 
   -(a), 
   -(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
   +(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#0:Name), 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
   +(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))),
    nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
   -(sec(a, #6:Fresh)), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
   +(sec(a, #6:Fresh)), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh))), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), nil]  & 
:: #5:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #0:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
   +(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), nil] )
| 
sec(a, #6:Fresh) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh)) !inI,
e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh)) !inI,
(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)))
    !inI,
(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))) !inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)) inI,
exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b, #4:Fresh))
    inI,(
n(a, #5:Fresh) != #2:NeNonceSet * n(a, #5:Fresh)),(
exp(#1:Gen, n(b, #4:Fresh)) != exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(
    b, #4:Fresh))),
exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)) != exp(#1:Gen,
    #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b, #4:Fresh))
| 
-(#0:Name), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
+(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
-(a), 
-(#0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
+(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
resuscitated(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(a ; #0:Name ; exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
resuscitated(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(a, #5:Fresh) * n(b,
    #4:Fresh)), sec(a, #6:Fresh))), 
+(sec(a, #6:Fresh)), 
-(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh))), 
-(sec(a, #6:Fresh)), 
+(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh))), 
-(e(exp(#1:Gen, #2:NeNonceSet * n(a, #5:Fresh) * n(b, #4:Fresh)), sec(a,
    #6:Fresh)))
| 
nil
==========================================
reduce in MAUDE-NPA : run(1, 8) .
rewrites: 2132 in 0ms cpu (1ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 17 . 6 . 12 . 0 . 5 . 14 . 4 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Exp, n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   +(#5:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; #3:Exp), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Exp, n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Exp, n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
(a ; #5:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #5:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#5:Name ; exp(g, n(a, #0:Fresh))) !inI,
exp(#3:Exp, n(b, #4:Fresh)) inI
| 
generatedByIntruder(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
+(#5:Name ; exp(g, n(a, #0:Fresh))), 
-(#5:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Exp, n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Exp, n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Exp, n(b, #4:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 2 . 14 . 4 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Exp, n(a, #4:Fresh))), 
   -(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #5:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #5:Name ; #3:Exp), 
   +(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#3:Exp, n(a, #4:Fresh)) inI,(
#3:Exp != exp(g, n(b, #0:Fresh))),(
#3:Exp != exp(g, #6:NeNonceSet * n(b, #0:Fresh))),
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) != exp(#3:Exp, n(a, #4:Fresh))
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(a ; #5:Name ; #3:Exp), 
+(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
resuscitated(exp(#3:Exp, n(a, #4:Fresh))), 
-(exp(#3:Exp, n(a, #4:Fresh))), 
-(e(exp(#3:Exp, n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #5:Name ; #3:Exp))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   +(#6:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #2:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
(a ; #6:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #0:Fresh))) !inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) inI
| 
generatedByIntruder(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
+(#6:Name ; exp(g, n(a, #0:Fresh))), 
-(#6:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 17 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))) | 
   -(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) !inI,
exp(#0:Gen, n(b, #2:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI
| 
generatedByIntruder(#1:NeNonceSet), 
-(exp(#0:Gen, n(b, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * n(b, #2:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 14 . 3 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI,
(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 14 . 3 . 4 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
exp(#4:Gen, n(a, #5:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #9:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 6 . 21 . 7 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #10:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI,
(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 20 . 5 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #5:Fresh))), 
   -(a ; #10:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI,
(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 19 . 6 . 6 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #6:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
exp(#3:Gen, n(a, #4:Fresh)) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(a ; #6:Name ; exp(#3:Gen, #4:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 19 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * n(a, #7:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
   -(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#7:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #7:Fresh))) | 
   -(a ; #10:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
exp(#4:Gen, #5:NeNonceSet * n(a, #7:Fresh)) inI,
(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(exp(#4:Gen, #5:NeNonceSet * n(a, #7:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(#9:Msg ; #8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#8:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
-(a ; #10:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
resuscitated(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh))), 
-(e(exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #7:Fresh)), sec(a,
    #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #10:Name ; exp(#4:Gen, #5:NeNonceSet * #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 16 . 14 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#0:Gen, n(a, #2:Fresh)) inI,
(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) inI
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(exp(#5:Gen, n(b, #6:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#1:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #9:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)))
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 16 . 14 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #1:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) inI,
(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#8:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#2:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #9:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1, 9) .
rewrites: 2343 in 4ms cpu (2ms real) (585750 rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 . 8 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   +(#6:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #4:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #2:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#4:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)) !inI,
(a ; #6:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #0:Fresh))) !inI,
exp(#3:Gen, n(b, #5:Fresh)) inI
| 
generatedByIntruder(#4:NeNonceSet), 
-(exp(#3:Gen, n(b, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
generatedByIntruder(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
+(#6:Name ; exp(g, n(a, #0:Fresh))), 
-(#6:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * n(b, #5:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 17 . 6 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 14 . 3 . 4 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))) !inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
(#9:Msg ; #8:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#9:Msg ; #8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
-(#8:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet),
ghost(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 14 . 3 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #6:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #6:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#3:Gen, n(a, #4:Fresh)) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(a ; #6:Name ; exp(#3:Gen, #5:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #6:Name ; exp(#3:Gen, #5:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 6 . 21 . 7 . 8 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(b, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; #9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
   +(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), nil]  & 
:: #5:Fresh ::
[ nil, 
   -(a ; b ; exp(#4:Gen, #6:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #5:Fresh))) | 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #1:Fresh,#3:Fresh ::
[ nil, 
   +(a ; #11:Name ; exp(g, n(a, #1:Fresh))), 
   -(a ; #11:Name ; exp(#0:Gen, #2:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))) | nil] )
| 
#6:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(b, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) !inI,
(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh)) inI,
(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI,
(#10:Msg ; #9:Msg ; exp(#4:Gen, n(b, #5:Fresh))) inI
| 
-(#10:Msg ; #9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
-(#9:Msg ; exp(#4:Gen, n(b, #5:Fresh))), 
+(exp(#4:Gen, n(b, #5:Fresh))), 
generatedByIntruder(#6:NeNonceSet), 
-(exp(#4:Gen, n(b, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
-(#7:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(b, #5:Fresh)), sec(a, #3:Fresh)))
| ghost(#2:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 20 . 5 . 6 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 . 10 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#6:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #6:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh)) inI
| 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #6:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet * n(a, #6:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #5:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 19 . 17 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #2:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
   -(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #2:Fresh))) | 
   -(a ; #10:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) !inI,
exp(#0:Gen, n(a, #2:Fresh)) inI,
(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) inI
| 
-(exp(#0:Gen, n(a, #2:Fresh))), 
-(#1:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * n(a, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
-(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(exp(#5:Gen, n(b, #6:Fresh))), 
-(a ; #10:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh))), 
-(e(exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet * n(a, #2:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#1:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #10:Name ; exp(#0:Gen, #1:NeNonceSet * #3:NeNonceSet)))
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 16 . 14 . 3 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #1:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #10:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) inI,
(#9:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#9:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(exp(#5:Gen, n(b, #6:Fresh))), 
-(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#2:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #10:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1, 10) .
rewrites: 2490 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 . 8 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   +(#6:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #2:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
(a ; #6:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI
| 
-(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
generatedByIntruder(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
+(#6:Name ; exp(g, n(a, #0:Fresh))), 
-(#6:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 17 . 6 . 7 > (
:: nil ::
[ nil | 
   -(exp(#4:Gen, n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
   +(sec(a, #3:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(b, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
   -(sec(a, #3:Fresh)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
   +(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; #9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
   +(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), nil]  & 
:: #1:Fresh ::
[ nil, 
   -(a ; b ; exp(#0:Gen, #2:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #1:Fresh))) | 
   -(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), nil]  &
    
:: #3:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #11:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #11:Name ; exp(#4:Gen, #6:NeNonceSet)), 
   +(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), nil] )
| 
#2:NeNonceSet !inI,
sec(a, #3:Fresh) !inI,
e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh)) !inI,
e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)) !inI,
exp(#4:Gen, n(a, #5:Fresh)) !inI,
exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#0:Gen, n(b, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)) !inI,
(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) !inI,
(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))) !inI,
(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))) inI,
(#10:Msg ; #9:Msg ; exp(#0:Gen, n(b, #1:Fresh))) inI
| 
-(#10:Msg ; #9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
-(#9:Msg ; exp(#0:Gen, n(b, #1:Fresh))), 
+(exp(#0:Gen, n(b, #1:Fresh))), 
generatedByIntruder(#2:NeNonceSet), 
-(exp(#0:Gen, n(b, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(#8:Msg ; #7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
-(#7:Msg ; exp(#4:Gen, n(a, #5:Fresh))), 
+(exp(#4:Gen, n(a, #5:Fresh))), 
-(a ; #11:Name ; exp(#4:Gen, #6:NeNonceSet)), 
+(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
-(exp(#4:Gen, n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
resuscitated(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#4:Gen, #6:NeNonceSet * n(a, #5:Fresh)), sec(a, #3:Fresh))), 
+(sec(a, #3:Fresh)), 
-(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh))), 
-(sec(a, #3:Fresh)), 
+(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * n(b, #1:Fresh)), sec(a, #3:Fresh)))
| ghost(#6:NeNonceSet),
ghost(a ; #11:Name ; exp(#4:Gen, #6:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 14 . 3 . 4 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #5:NeNonceSet)))
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 6 . 6 . 21 . 7 . 8 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))), 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))) | nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet))
(< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 . 10 . 8 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #5:Fresh))), 
   -(#4:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
   -(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#5:Fresh ::
[ nil, 
   +(a ; #7:Name ; exp(g, n(a, #5:Fresh))) | 
   -(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh)) !inI,
exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
exp(#3:Gen, n(a, #5:Fresh)) inI
| 
-(exp(#3:Gen, n(a, #5:Fresh))), 
-(#4:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * n(a, #5:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
-(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh))), 
-(e(exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet * n(a, #5:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#4:NeNonceSet),
ghost(#6:NeNonceSet),
ghost(a ; #7:Name ; exp(#3:Gen, #4:NeNonceSet * #6:NeNonceSet)))
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 19 . 17 . 6 > (
:: nil ::
[ nil | 
   -(exp(#0:Gen, n(a, #1:Fresh))), 
   -(#2:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
   -(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, n(b, #6:Fresh))), 
   -(#7:NeNonceSet), 
   +(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
   +(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#10:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
   +(exp(#0:Gen, n(a, #1:Fresh))), nil]  & 
:: #6:Fresh ::
[ nil, 
   -(a ; b ; exp(#5:Gen, #7:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #6:Fresh))) | 
   -(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), nil]  &
    
:: #1:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #11:Name ; exp(g, n(a, #1:Fresh))) | 
   -(a ; #11:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
   +(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#7:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh)) !inI,
e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)) !inI,
exp(#0:Gen, n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)) !inI,
exp(#5:Gen, n(b, #6:Fresh)) !inI,
exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)) !inI,
(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) !inI,
(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))) inI,
(#10:Msg ; exp(#0:Gen, n(a, #1:Fresh))) inI
| 
-(#10:Msg ; exp(#0:Gen, n(a, #1:Fresh))), 
+(exp(#0:Gen, n(a, #1:Fresh))), 
-(exp(#0:Gen, n(a, #1:Fresh))), 
-(#2:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * n(a, #1:Fresh))), 
-(#3:NeNonceSet), 
+(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(#9:Msg ; #8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
-(#8:Msg ; exp(#5:Gen, n(b, #6:Fresh))), 
+(exp(#5:Gen, n(b, #6:Fresh))), 
-(a ; #11:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet)), 
+(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
generatedByIntruder(#7:NeNonceSet), 
-(exp(#5:Gen, n(b, #6:Fresh))), 
-(#7:NeNonceSet), 
+(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
resuscitated(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh))), 
-(e(exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet * n(a, #1:Fresh)), sec(a,
    #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(#5:Gen, #7:NeNonceSet * n(b, #6:Fresh)), sec(a, #4:Fresh)))
| ghost(#2:NeNonceSet),
ghost(#3:NeNonceSet),
ghost(a ; #11:Name ; exp(#0:Gen, #2:NeNonceSet * #3:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1, 11) .
rewrites: 2576 in 0ms cpu (2ms real) (~ rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 . 8 . 2 . 2
    > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(b, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   +(#6:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
   +(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #4:Fresh ::
[ nil, 
   -(a ; b ; exp(#3:Gen, #5:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #4:Fresh))) | 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), nil]  &
    
:: #2:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#5:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(#3:Gen, n(b, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)) !inI,
(a ; #6:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(#8:Msg ; #7:Msg ; exp(#3:Gen, n(b, #4:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
-(#7:Msg ; exp(#3:Gen, n(b, #4:Fresh))), 
+(exp(#3:Gen, n(b, #4:Fresh))), 
generatedByIntruder(#5:NeNonceSet), 
-(exp(#3:Gen, n(b, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
generatedByIntruder(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
+(#6:Name ; exp(g, n(a, #0:Fresh))), 
-(#6:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(b, #4:Fresh)), sec(a, #2:Fresh)))
| 
nil)
(< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 17 . 6 . 7 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) !inI,
(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(#7:Msg ; #6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
-(#6:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)), sec(a, #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet)))
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 . 10 . 8 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #8:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(#6:NeNonceSet),
ghost(a ; #8:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1, 12) .
rewrites: 2638 in 4ms cpu (2ms real) (659500 rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 . 8 . 2 . 2
    . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #2:Fresh))), 
   +(b ; exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   +(#5:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #2:Fresh))), 
   +(exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))), 
   -(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: #4:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#3:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, n(b, #2:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(g, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
(a ; b ; exp(g, #3:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #2:Fresh))) !inI,
(a ; #5:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #5:Name ; exp(g, n(a, #0:Fresh))) !inI,
(b ; exp(g, n(b, #2:Fresh))) !inI,
(#5:Name ; exp(g, n(a, #0:Fresh))) !inI
| 
generatedByIntruder(a ; b ; exp(g, #3:NeNonceSet)), 
-(a ; b ; exp(g, #3:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #2:Fresh))), 
-(a ; b ; exp(g, n(b, #2:Fresh))), 
+(b ; exp(g, n(b, #2:Fresh))), 
-(b ; exp(g, n(b, #2:Fresh))), 
+(exp(g, n(b, #2:Fresh))), 
generatedByIntruder(#3:NeNonceSet), 
-(exp(g, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
generatedByIntruder(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
+(#5:Name ; exp(g, n(a, #0:Fresh))), 
-(#5:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 . 10 . 8 . 2 . 2 > (
:: nil ::
[ nil | 
   -(exp(g, n(b, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
   -(sec(a, #2:Fresh)), 
   +(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, n(a, #4:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
   -(#6:NeNonceSet), 
   +(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
   -(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
   +(sec(a, #2:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #0:Fresh))), 
   +(b ; exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #0:Fresh))), 
   +(exp(g, n(b, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#8:Msg ; #7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
   +(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), nil]  & 
:: #0:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #1:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), nil]  & 
:: #2:Fresh,#4:Fresh ::
[ nil, 
   +(a ; #9:Name ; exp(g, n(a, #4:Fresh))) | 
   -(a ; #9:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
   +(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
sec(a, #2:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)) !inI,
e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh)) !inI,
exp(g, n(b, #0:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(b, #0:Fresh)) !inI,
exp(#3:Gen, n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh)) !inI,
exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)) !inI,
(a ; b ; exp(g, #1:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #0:Fresh))) !inI,
(b ; exp(g, n(b, #0:Fresh))) !inI,
(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))) !inI,
(#8:Msg ; #7:Msg ; exp(#3:Gen, n(a, #4:Fresh))) inI
| 
-(#8:Msg ; #7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
-(#7:Msg ; exp(#3:Gen, n(a, #4:Fresh))), 
+(exp(#3:Gen, n(a, #4:Fresh))), 
-(exp(#3:Gen, n(a, #4:Fresh))), 
-(#5:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * n(a, #4:Fresh))), 
-(#6:NeNonceSet), 
+(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
generatedByIntruder(a ; b ; exp(g, #1:NeNonceSet)), 
-(a ; b ; exp(g, #1:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #0:Fresh))), 
-(a ; b ; exp(g, n(b, #0:Fresh))), 
+(b ; exp(g, n(b, #0:Fresh))), 
-(b ; exp(g, n(b, #0:Fresh))), 
+(exp(g, n(b, #0:Fresh))), 
-(a ; #9:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet)), 
+(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
generatedByIntruder(#1:NeNonceSet), 
-(exp(g, n(b, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
resuscitated(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh))), 
-(e(exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet * n(a, #4:Fresh)), sec(a,
    #2:Fresh))), 
+(sec(a, #2:Fresh)), 
-(exp(g, #1:NeNonceSet * n(b, #0:Fresh))), 
-(sec(a, #2:Fresh)), 
+(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(b, #0:Fresh)), sec(a, #2:Fresh)))
| ghost(#5:NeNonceSet),
ghost(#6:NeNonceSet),
ghost(a ; #9:Name ; exp(#3:Gen, #5:NeNonceSet * #6:NeNonceSet))
==========================================
reduce in MAUDE-NPA : run(1, 13) .
rewrites: 2695 in 4ms cpu (2ms real) (673750 rewrites/second)
result IdSystemSet: (< 1 . 18 . 6 . 16 . 0{1} . 42 . 2 . 3 . 4 . 1 . 8 . 2 . 2
    . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #2:Fresh))), 
   +(b ; exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   +(#5:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #2:Fresh))), 
   +(exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#5:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))), 
   -(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: #4:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#3:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, n(b, #2:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(g, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
(a ; b ; exp(g, #3:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #2:Fresh))) !inI,
(a ; #5:Name ; exp(g, #1:NeNonceSet)) !inI,
(a ; #5:Name ; exp(g, n(a, #0:Fresh))) !inI,
(b ; exp(g, n(b, #2:Fresh))) !inI,
(#5:Name ; exp(g, n(a, #0:Fresh))) !inI
| 
generatedByIntruder(a ; b ; exp(g, #3:NeNonceSet)), 
-(a ; b ; exp(g, #3:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #2:Fresh))), 
-(a ; b ; exp(g, n(b, #2:Fresh))), 
+(b ; exp(g, n(b, #2:Fresh))), 
-(b ; exp(g, n(b, #2:Fresh))), 
+(exp(g, n(b, #2:Fresh))), 
generatedByIntruder(#3:NeNonceSet), 
-(exp(g, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
generatedByIntruder(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, n(a, #0:Fresh))), 
+(#5:Name ; exp(g, n(a, #0:Fresh))), 
-(#5:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(a ; #5:Name ; exp(g, #1:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))), 
+(sec(a, #4:Fresh)), 
-(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil)
< 1 . 18 . 6 . 16 . 0{1} . 45 . 2 . 4 . 4 . 1 . 10 . 8 . 2 . 2 . 1 > (
:: nil ::
[ nil | 
   -(exp(g, n(a, #0:Fresh))), 
   -(#1:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, n(b, #2:Fresh))), 
   -(#3:NeNonceSet), 
   +(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
   -(#5:NeNonceSet), 
   +(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
   -(sec(a, #4:Fresh)), 
   +(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh))), 
   -(e(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)), sec(a,
    #4:Fresh))), 
   +(sec(a, #4:Fresh)), nil]  & 
:: nil ::
[ nil | 
   -(a ; b ; exp(g, n(b, #2:Fresh))), 
   +(b ; exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   +(#6:Name ; exp(g, n(a, #0:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(b ; exp(g, n(b, #2:Fresh))), 
   +(exp(g, n(b, #2:Fresh))), nil]  & 
:: nil ::
[ nil | 
   -(#6:Name ; exp(g, n(a, #0:Fresh))), 
   +(exp(g, n(a, #0:Fresh))), nil]  & 
:: #2:Fresh ::
[ nil | 
   -(a ; b ; exp(g, #3:NeNonceSet)), 
   +(a ; b ; exp(g, n(b, #2:Fresh))), 
   -(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), nil]  & 
:: #4:Fresh,#0:Fresh ::
[ nil | 
   +(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
   -(a ; #6:Name ; exp(g, #1:NeNonceSet * #5:NeNonceSet)), 
   +(e(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)), sec(a,
    #4:Fresh))), nil] )
| 
#1:NeNonceSet !inI,
#3:NeNonceSet !inI,
#5:NeNonceSet !inI,
sec(a, #4:Fresh) !inI,
e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)) !inI,
e(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))
    !inI,
exp(g, n(a, #0:Fresh)) !inI,
exp(g, n(b, #2:Fresh)) !inI,
exp(g, #1:NeNonceSet * n(a, #0:Fresh)) !inI,
exp(g, #3:NeNonceSet * n(b, #2:Fresh)) !inI,
exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)) !inI,
(a ; b ; exp(g, #3:NeNonceSet)) !inI,
(a ; b ; exp(g, n(b, #2:Fresh))) !inI,
(a ; #6:Name ; exp(g, n(a, #0:Fresh))) !inI,
(a ; #6:Name ; exp(g, #1:NeNonceSet * #5:NeNonceSet)) !inI,
(b ; exp(g, n(b, #2:Fresh))) !inI,
(#6:Name ; exp(g, n(a, #0:Fresh))) !inI
| 
generatedByIntruder(a ; #6:Name ; exp(g, #1:NeNonceSet * #5:NeNonceSet)), 
generatedByIntruder(#5:NeNonceSet), 
generatedByIntruder(#1:NeNonceSet), 
+(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
-(a ; #6:Name ; exp(g, n(a, #0:Fresh))), 
+(#6:Name ; exp(g, n(a, #0:Fresh))), 
-(#6:Name ; exp(g, n(a, #0:Fresh))), 
+(exp(g, n(a, #0:Fresh))), 
-(exp(g, n(a, #0:Fresh))), 
-(#1:NeNonceSet), 
+(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * n(a, #0:Fresh))), 
-(#5:NeNonceSet), 
+(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh))), 
generatedByIntruder(a ; b ; exp(g, #3:NeNonceSet)), 
-(a ; b ; exp(g, #3:NeNonceSet)), 
+(a ; b ; exp(g, n(b, #2:Fresh))), 
-(a ; b ; exp(g, n(b, #2:Fresh))), 
+(b ; exp(g, n(b, #2:Fresh))), 
-(b ; exp(g, n(b, #2:Fresh))), 
+(exp(g, n(b, #2:Fresh))), 
-(a ; #6:Name ; exp(g, #1:NeNonceSet * #5:NeNonceSet)), 
+(e(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))),
    
generatedByIntruder(#3:NeNonceSet), 
-(exp(g, n(b, #2:Fresh))), 
-(#3:NeNonceSet), 
+(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
resuscitated(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh))), 
-(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh))), 
-(e(exp(g, #1:NeNonceSet * #5:NeNonceSet * n(a, #0:Fresh)), sec(a, #4:Fresh))),
    
+(sec(a, #4:Fresh)), 
-(exp(g, #3:NeNonceSet * n(b, #2:Fresh))), 
-(sec(a, #4:Fresh)), 
+(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh))), 
-(e(exp(g, #3:NeNonceSet * n(b, #2:Fresh)), sec(a, #4:Fresh)))
| 
nil
Bye.
Tue Jun  2 19:40:16 CEST 2020
