***(
Famous Rock-paper-scissors game
* Rock beats scissors
* Scissors beats paper
* Paper beats rock
)***

fmod PROTOCOL-EXAMPLE-SYMBOLS is
  protecting DEFINITION-PROTOCOL-RULES . --- Importing sort Msg, Fresh, Public
  
  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort Msg and Fresh are special and imported
  --- * Every sort must be a subsort of Msg
  --- * No sort can be a supersort of Msg
  ----------------------------------------------------------

  --- Sort Information 
  sorts Name Nonce Item Result OK ComMsg Status .
  subsorts Name Nonce Result OK ComMsg Item Status < Msg .
  subsorts Name Result Item Status < Public .

  ops finished cheater : -> Status .
  ops rock scissors paper : -> Item .
  ops win lose tie : -> Result .
 

  op ok : -> OK .

  op _beats_ : Msg Msg -> OK   [frozen] .
  op _beats_ : Item Item -> OK [frozen] .

--- Names known by intruder
  op a : -> Name . --- Name for the Initiator
  op b : -> Name . --- Name for the Responder
  op i : -> Name . --- Name for the Intruder

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .
  
  --- Associativity operator
  op _;_ : Msg  Msg  -> Msg [gather (e E) frozen] .

  --- Encryption
  op sk : Name Msg -> Msg [frozen] .
  op pk : Name Msg -> Msg [frozen] .
  
  op com :  Nonce  Item   -> ComMsg            [frozen] .
  op open : Nonce ComMsg  -> Msg               [frozen] .
  
  op sig : Name Msg -> Msg      [frozen] .
---  op checkSig : Name Msg -> Msg [frozen] .

  op item?_ :  Msg -> OK [frozen].

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  
  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties 
  --- of your protocol
  ----------------------------------------------------------

  var Z : Msg .
  var A : Name .
  var N : Nonce .
  var H : Item .

  *** Encryption/Decryption Cancellation
  eq pk(A,sk(A,Z)) = Z [variant] .
  eq sk(A,pk(A,Z)) = Z [variant] .
  
  eq open(N, com(N,H)) = H      [variant] .
  
 --- eq checkSig(A, sig(A, Z)) = Z [variant] .

  eq item? H = ok [variant] .

  *** Beats
  eq rock beats scissors = ok  [variant] .
  eq scissors beats paper = ok [variant] .
  eq paper beats rock = ok     [variant] .
  
endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands 
  --- of your protocol
  ----------------------------------------------------------
  
  vars X Y Z : Msg .
  var r r' : Fresh .
  vars NA NB N : Nonce .
  vars XA XB : Item .
  var ComXA ComXB : ComMsg  .
  var A B : Name .
  var R R' R1 R2 : Result .
  var S : Status .

  eq STRANDS-DOLEVYAO
   = 
     :: nil :: [ nil | -(X), -(Y), +(X ; Y), nil ]      &
     :: nil :: [ nil | -(X ; Y), +(X), nil ]      &
     :: nil :: [ nil | -(X ; Y), +(Y), nil ]      &
     :: nil :: [ nil | -(X) , +(sig(i, X)), nil] &
     :: nil :: [ nil | -(X), +(sk(i,X)), nil ]      &
     :: nil :: [ nil | -(X), +(pk(A,X)), nil ]      &
     :: nil :: [ nil | -(N), -(ComXA), +(open(N, ComXA)), nil] &
     :: nil :: [ nil | -(N), -(XA), +(com(N, XA)), nil] &
     :: r   :: [ nil | +(n(i, r)), nil] &
     :: nil :: [ nil | +(A), nil] &
     :: nil :: [ nil | +(R), nil] &
     :: nil :: [ nil | +(XA), nil]
     [nonexec] .

  eq PROCESSES-PROTOCOL =
    --- initiator
             +(pk(B, sig(A, com(n(A,r), XA)))) .
             -(pk(A, sig(B, ComXB))) .
             +(pk(B, sig(A, n(A , r)))) .
             -(pk(A, sig(B, NB))) .
              (if ((item? open(NB, ComXB)) eq  ok) then 
                  if ((XA beats open(NB, ComXB)) eq ok)
                  then +(pk(B, sig(A, n(A, r)  ; win))) 
                  else if ((open(NB, ComXB) beats XA) eq ok)
                          then +(pk(B, sig(A, n(A, r) ; lose )))
                          else +(pk(B, sig(A, n(A, r) ; tie)))
               else nilP ) .
	     -(pk(A, sig(B, n(A,r) ; NB)) ; S:Status)
     &		    
     --- responder 
             -(pk(B, sig(A, ComXA))) .
             +(pk(A, sig(B, com(n(B,r), XB)))) .
             -(pk(B, sig(A, NA))) .
             +(pk(A, sig(B, n(B, r)))) .
             -(pk(B, sig(A, NA ; R))) .
              (if ((item? open(NA, ComXA)) eq ok) then
	         if (R eq win)
		 then if ((open(NA, ComXA) beats XB) eq ok) 
                      then +(pk(A, sig(B, NA ; n(B,r))) ; finished)
		      else +(pk(A, sig(B, NA ; n(B,r))) ; cheater)
		 else if (R eq lose)
		      then if ((XB beats open(NA, ComXA)) eq ok)
		           then +(pk(A, sig(B, NA ; n(B,r))) ; finished)
		           else +(pk(A, sig(B, NA ; n(B,r))) ; cheater)
		      else if (R eq tie)
		           then if (XB eq open(NA, ComXA))
			        then +(pk(A, sig(B, NA ; n(B,r))) ; finished)
				else +(pk(A, sig(B, NA ; n(B,r))) ; cheater)
		           else nilP
               else nilP )
       [nonexec] .

***(
eq STRANDS-PROTOCOL =
:: r:Fresh ::
[ nil | 
   +(pk(B:Name, sig(A:Name, com(n(A:Name, r:Fresh), XA:Item)))), 
   -(pk(A:Name, sig(B:Name, ComXB:ComMsg))), 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh)))), 
   -(pk(A:Name, sig(B:Name, NB:Nonce))), 
   (item? open(NB:Nonce, ComXB:ComMsg)) eq ok, 
   (XA:Item beats open(NB:Nonce, ComXB:ComMsg)) eq ok, 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh) ; win))), 
   -(pk(A:Name, sig(B:Name, n(A:Name, r:Fresh) ; NB:Nonce)) ; S:Status), nil]  & 
:: r:Fresh ::
[ nil | 
   +(pk(B:Name, sig(A:Name, com(n(A:Name, r:Fresh), XA:Item)))), 
   -(pk(A:Name, sig(B:Name, ComXB:ComMsg))), 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh)))), 
   -(pk(A:Name, sig(B:Name, NB:Nonce))), 
   (item? open(NB:Nonce, ComXB:ComMsg)) eq ok, 
   (XA:Item beats open(NB:Nonce, ComXB:ComMsg)) neq ok, 
   (open(NB:Nonce, ComXB:ComMsg) beats XA:Item) eq ok, 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh) ; lose))), 
   -(pk(A:Name, sig(B:Name, n(A:Name, r:Fresh) ; NB:Nonce)) ; S:Status), nil]  & 
:: r:Fresh ::
[ nil | 
   +(pk(B:Name, sig(A:Name, com(n(A:Name, r:Fresh), XA:Item)))), 
   -(pk(A:Name, sig(B:Name, ComXB:ComMsg))), 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh)))), 
   -(pk(A:Name, sig(B:Name, NB:Nonce))), 
   (item? open(NB:Nonce, ComXB:ComMsg)) eq ok, 
   (XA:Item beats open(NB:Nonce, ComXB:ComMsg)) neq ok, 
   (open(NB:Nonce, ComXB:ComMsg) beats XA:Item) neq ok, 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh) ; tie))), 
   -(pk(A:Name, sig(B:Name, n(A:Name, r:Fresh) ; NB:Nonce)) ; S:Status), nil]  & 
:: r:Fresh ::
[ nil | 
   +(pk(B:Name, sig(A:Name, com(n(A:Name, r:Fresh), XA:Item)))), 
   -(pk(A:Name, sig(B:Name, ComXB:ComMsg))), 
   +(pk(B:Name, sig(A:Name, n(A:Name, r:Fresh)))), 
   -(pk(A:Name, sig(B:Name, NB:Nonce))), 
   (item? open(NB:Nonce, ComXB:ComMsg)) neq ok, 
   -(pk(A:Name, sig(B:Name, n(A:Name, r:Fresh) ; NB:Nonce)) ; S:Status), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result eq win, 
   (open(NA:Nonce, ComXA:ComMsg) beats XB:Item) eq ok, 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; finished), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result eq win, 
   (open(NA:Nonce, ComXA:ComMsg) beats XB:Item) neq ok, 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; cheater), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result neq win, 
   R:Result eq lose, 
   (XB:Item beats open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; finished), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result neq win, 
   R:Result eq lose, 
   (XB:Item beats open(NA:Nonce, ComXA:ComMsg)) neq ok, 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; cheater), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result neq win, 
   R:Result neq lose, 
   R:Result eq tie, 
   XB:Item eq open(NA:Nonce, ComXA:ComMsg), 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; finished), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result neq win, 
   R:Result neq lose, 
   R:Result eq tie, 
   XB:Item neq open(NA:Nonce, ComXA:ComMsg), 
   +(pk(A:Name, sig(B:Name, NA:Nonce ; n(B:Name, r:Fresh))) ; cheater), nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) eq ok, 
   R:Result neq win, 
   R:Result neq lose, 
   R:Result neq tie, nil]  & 
:: r:Fresh ::
[ nil | 
   -(pk(B:Name, sig(A:Name, ComXA:ComMsg))), 
   +(pk(A:Name, sig(B:Name, com(n(B:Name, r:Fresh), XB:Item)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce))), 
   +(pk(A:Name, sig(B:Name, n(B:Name, r:Fresh)))), 
   -(pk(B:Name, sig(A:Name, NA:Nonce ; R:Result))), 
   (item? open(NA:Nonce, ComXA:ComMsg)) neq ok, nil] 
)***       
 
---Regular Execution.
eq ATTACK-PROCESS(0) =
    --- initiator
    +(pk(b, sig(a, com(n(a,r), XA)))) .
    -(pk(a, sig(b, com(n(b,r'), XB)))) .
    +(pk(b, sig(a, n(a,r)))) .
    -(pk(a, sig(b, n(b,r')))) .
    ((item? open(n(b,r'), com(n(b,r'), XB))) eq ok) .
    ((XA beats open(n(b,r'), com(n(b,r'), XB))) eq ok) .
    +(pk(b, sig(a, n(a,r) ; win))) .
    -(pk(a, sig(b, n(a,r) ; n(b,r'))) ; finished)
     &
     --- responder 
    -(pk(b, sig(a, com(n(a,r), XA)))) .
    +(pk(a, sig(b, com(n(b,r'), XB)))) .
    -(pk(b, sig(a, n(a,r)))) .
    +(pk(a, sig(b, n(b, r')))) .
    -(pk(b, sig(a, n(a,r) ; win))) .
    ((item? open(n(a,r), com(n(a,r), XA))) eq ok) .
    (win eq win) .
    ((open(n(a,r), com(n(a,r), XA)) beats XB) eq ok) .
    +(pk(a, sig(b, n(a,r) ; n(b,r'))) ; finished)
   || empty
   || nil
[nonexec] .

---Attacker finds session nonces
eq ATTACK-PROCESS(1) =
   -(pk(b,sig(i, ComXA:ComMsg))) .
   +(pk(i,sig(b, com(n(b, r:Fresh), XB:Item)))) .
   -(pk(b,sig(i, NA:Nonce)))
   || n(b, r:Fresh) inI
   || nil
[nonexec] .

---Authentication attack
eq ATTACK-PROCESS(2) =
  -(pk(b, sig(a, ComXA))) .
  +(pk(a, sig(b, com(n(b,r), XB)))) .
  -(pk(b, sig(a, NA))) .
  +(pk(a, sig(b, n(b, r)))) .
  -(pk(b, sig(a, NA ; win))) .
  ((item? open(NA, ComXA)) eq ok) .
  (win eq win) .
  ((open(NA, ComXA) beats XB) eq ok) .
  +(pk(a, sig(b, NA ; n(b,r))) ; finished)
  || empty
  || never(
     +(pk(b, sig(a, ComXA))) .
     -(pk(a, sig(b, com(n(b,r), XB)))) .
     +(pk(b, sig(a, NA))) .
     -(pk(a, sig(b, n(b,r)))) .
     (ok eq ok) .
     (ok eq ok) .
     +(pk(b, sig(a, NA ; win))) .
     -(pk(a, sig(b, NA ; n(b,r))) ; finished)
     || empty
  )
[nonexec] .

endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
