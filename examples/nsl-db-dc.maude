--- Direct Composition
--- NSL-Distance Bounding protocol


fmod PROTOCOL-EXAMPLE-SYMBOLS is
  --- Importing sorts IMsg, Fresh, Public, and GhostData
  protecting DEFINITION-PROTOCOL-RULES .

  ----------------------------------------------------------
  --- Overwrite this module with the syntax of your protocol
  --- Notes:
  --- * Sort IMsg and Fresh are special and imported
  --- * Every sort must be a subsort of IMsg
  --- * No sort can be a supersort of IMsg
  ----------------------------------------------------------

  --- Synchronization for composition
  subsort Role < IMsg .

  --- Roles
  ops init-nsl resp-nsl : -> Role .
  ops init-db  resp-db :  -> Role .


  --- Sort Information
  sorts Name Nonce NonceSet .
  subsort Name NonceSet < IMsg .
  subsort Nonce < NonceSet .
  subsort Name < Public .

  --- Encoding operators for public/private encryption
  op pk : Name IMsg -> IMsg [frozen] .
  op sk : Name IMsg -> IMsg [frozen] .

  --- Principals
  op a : -> Name . --- Alice
  op b : -> Name . --- Bob
  op i : -> Name . --- Intruder

  --- Nonce operator
  op n : Name Fresh -> Nonce [frozen] .

  --- Concatenation operator
  op _;_ : IMsg  IMsg  -> IMsg [gather (e E) frozen] .

  --- Exclusive-or operator
  op _*_ : NonceSet NonceSet -> NonceSet  [assoc comm frozen] . --- xor operator
  op null : -> NonceSet .

endfm

fmod PROTOCOL-EXAMPLE-ALGEBRAIC is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .

  ----------------------------------------------------------
  --- Overwrite this module with the algebraic properties
  --- of your protocol
  ----------------------------------------------------------

--- Variables
  vars X Y Z : IMsg .
  vars A B : Name .
  vars XN YN : NonceSet .

  *** Encryption/Decryption Cancellation
  eq pk(A,sk(A,Z)) = Z [variant] .
  eq sk(A,pk(A,Z)) = Z [variant] .

  *** Exclusive or properties
  eq null * XN = XN [variant] .
  eq XN * XN = null [variant] .
  eq XN * XN * YN = YN [variant] .

endfm

fmod PROTOCOL-SPECIFICATION is
  protecting PROTOCOL-EXAMPLE-SYMBOLS .
  protecting DEFINITION-PROTOCOL-RULES .
  protecting DEFINITION-CONSTRAINTS-INPUT .

  ----------------------------------------------------------
  --- Overwrite this module with the strands
  --- of your protocol
  ----------------------------------------------------------

  vars r r' r'' r# : Fresh .
  vars A B C : Name .
  vars NA NB N N' NC : Nonce .
  vars NS NS' : NonceSet .
  vars X Y Z H : IMsg .
  vars P Q : Name .

  eq STRANDS-DOLEVYAO
   =
---     :: nil :: [ nil | -(NS), -(NS'), +(NS * NS'), nil ] &
---     :: nil :: [ nil | -(NS), -(N), +(NS * N), nil ] & --- Alternative version
     :: nil :: [ nil | -(X), -(Y), +(X ; Y), nil ] &
     :: nil :: [ nil | -(X ; Y), +(X), nil ] &
     :: nil :: [ nil | -(X ; Y), +(Y), nil ] &
     :: nil :: [ nil | -(X), +(sk(i,X)), nil ] &
     :: nil :: [ nil | -(X), +(pk(A,X)), nil ] &
     :: nil :: [ nil | +(A) , nil ] &
     :: nil :: [ nil | +(null), nil ] &
     :: r :: [ nil | +(n(i,r)), nil ]
  [nonexec] .

  eq STRANDS-PROTOCOL
   = :: r :: --- NSL-Alice
     [ nil | +(pk(B, n(A,r) ; A)) ,
	     -(pk(A, n(A,r) ; NB ; B )),
	     +(pk(B, NB)),
	     {init-nsl -> resp-db ;; 1-1 ;; A ; B ; n(A,r)}, nil ] &
     :: r :: --- NSL-Bob
     [ nil | -(pk(B,NA ; A)),
	     +(pk(A, NA ; n(B,r) ; B)),
	     -(pk(B,n(B,r))),
   	     {resp-nsl -> init-db ;; 1-1 ;; A ; B ; NA}, nil ] &
     :: r' ::
     [ nil | {resp-nsl -> init-db ;; 1-1 ;; A ; B ; NA},
             +(n(B,r')),
             -(NA * n(B,r')), nil] &
     :: nil ::
     [ nil | {init-nsl -> resp-db ;; 1-1 ;; A ; B ; NA },
             -(N),
             +(NA * N), nil ]
  [nonexec] .

--- Attack pattern to find Distance Hijacking attack
eq ATTACK-STATE(0)
   = :: r ::
     [ nil,  +(pk(i,n(a,r) ; a)),
	     -(pk(a,n(a,r) ; NC ; i)),
	     +(pk(i, NC)),
	     {init-nsl -> resp-db ;; 1-1 ;; a ; i ; n(a,r) } | nil] &
     :: r'' ::
     [ nil,  {resp-nsl -> init-db ;; 1-1 ;; i ; b ; n(a,r)},
             +(n(b,r'')),
	     -(n(a,r) * n(b,r''))  | nil]
     || empty
     || nil
     || nil
     || nil
 [nonexec] .

--- Attack pattern to find Distance Hijacking attack
eq ATTACK-STATE(1)
   = :: r ::
     [ nil,  +(pk(i,n(a,r) ; a)),
	     -(pk(a,n(a,r) ; NC ; i)),
	     +(pk(i, NC)),
	     {init-nsl -> resp-db ;; 1-1 ;; a ; i ; n(a,r) } | nil] &
     :: r' ::
     [ nil,  -(pk(b,n(a,r) ; i)),
	     +(pk(i,n(a,r) ; n(b,r') ; b)),
	     -(pk(b,n(b,r'))),
   	     {resp-nsl -> init-db ;; 1-1 ;; i ; b ; n(a,r) } | nil ] &
     :: r'' ::
     [ nil,  {resp-nsl -> init-db ;; 1-1 ;; i ; b ; n(a,r)},
             +(n(b,r'')),
	     -(n(a,r) * n(b,r''))  | nil] &
     :: nil ::
     [ nil,  {init-nsl -> resp-db ;; 1-1 ;; a ; i ; n(a,r) },
             -(n(b,r'')),
             +(n(a,r) * n(b,r'')) | nil ]
     || empty
     || nil
     || nil
     || nil
 [nonexec] .


endfm

--- THIS HAS TO BE THE LAST LOADED MODULE !!!!
select MAUDE-NPA .
