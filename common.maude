mod MAUDE-NPA-EXT is
    pr MAUDE-NPA .

    sorts IdSystemSetPair ShortIdSystemSetTuple IdSystemSetTuple .
    subsort ShortIdSystemSetTuple < IdSystemSetTuple .
    op <_,_> : IdSystemSet IdSystemSet -> IdSystemSetPair .
    op errIdSystemSetPair : -> IdSystemSetPair .
    op <_,_,_,_> : IdSystemSet IdSystemSet IdSystemSet Nat -> IdSystemSetTuple .
    op <_,_,_> : IdSystemSet IdSystemSet IdSystemSet -> ShortIdSystemSetTuple .
    op errIdSystemSetTuple : -> IdSystemSetTuple .
    op init : IdSystemSetTuple -> IdSystemSet .
    op jobs : IdSystemSetTuple -> IdSystemSet .
    op history : IdSystemSetTuple -> IdSystemSet .
    op step : IdSystemSetTuple -> Nat .

    vars M : Module .
    vars GS : GrammarList .
    vars F : Filters .
    vars BStep Step Nodes Sess : Bound .
    vars C N N' : Nat .
    vars Rem? : Bool .
    vars IS : IdSystem .
    vars IST IST' IST'' INIT INIT' HistoryIST HistoryIST' : IdSystemSet .
    vars ISTP : IdSystemSetPair .

    eq init(< INIT, IST, HistoryIST, N >) = INIT .
    eq jobs(< INIT, IST, HistoryIST, N >) = IST .
    eq history(< INIT, IST, HistoryIST, N >) = HistoryIST .
    eq step(< INIT, IST, HistoryIST, N >) = N .

    op decN : Bound Nat -> Bound .
    eq decN(unbounded, N) = unbounded .
    eq decN(s(N), s(N')) = decN(N, N') .
    eq decN(0, N) = 0 .
    eq decN(N, 0) = N .

    op #jobs : IdSystemSet -> Nat .
    eq #jobs(IS IST) = #jobs(IST) + 1 .
    eq #jobs(empty) = 0 .

    op filterStates : Filters IdSystemSet IdSystemSet -> IdSystemSet .
    eq filterStates(F, HistoryIST, IST)
    = filterSMsgListX(F,filterIdX(F, simplify-theSystemSet(F,HistoryIST, IST)))
    [print "simplify-theSystemSet"] .
    --- eq filterStates(F, HistoryIST, IST) = filterSMsgListX(F,filterIdX(F, simplify-theSystemSet(F,HistoryIST, IST))) .
    --- eq filterStates(F, HistoryIST, IST) = filterSMsgListX(F,filterIdX(F, simplifyByImplicationL(IST))) .

    op searchState-CheckInit : Module Bound IdSystemSet IdSystemSetPair IdSystemSet -> IdSystemSetPair [memo] .
    eq searchState-CheckInit(M, Sess, HistoryIST, < INIT, IST' >, empty) = < INIT, IST' > .
    eq searchState-CheckInit(M, Sess, HistoryIST, < INIT, IST' >, (IS IST))
    = if Sess =/= unbounded and-then countSessions(IS) > Sess
    then searchState-CheckInit(M, Sess, HistoryIST, < INIT, IST' >, IST)
    else if isInitialM(M,IS)
        then
            searchState-CheckInit(M, Sess, HistoryIST, < INIT IS, IST' >, IST)
        else searchState-CheckInit(M, Sess, HistoryIST,
            < INIT, if isNFSystem(M,HistoryIST,IS) then IST' else (IS IST') fi >,
            IST)
        fi
    fi .

    op filterStateWithHistory : Module IdSystemSet IdSystemSet -> IdSystemSet .
    eq filterStateWithHistory(M, HistoryIST, empty) = empty .
    eq filterStateWithHistory(M, HistoryIST, IS IST)
    = if isNFSystem(M, HistoryIST, IS)
    then filterStateWithHistory(M, HistoryIST, IST)
    else IS filterStateWithHistory(M, HistoryIST, IST)
    fi .

    op searchStateMParallel : Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet -> IdSystemSetTuple .
    op searchStateMParallel* : Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet IdSystemSet IdSystemSet -> IdSystemSetTuple .
    op searchStateMParallel** : Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet IdSystemSet IdSystemSet -> IdSystemSetTuple .

    eq searchStateMParallel(M,GS,F,BStep,Nodes,Sess,Rem?,HistoryIST,IST)
    = searchStateMParallel*(M,GS,F,BStep,Nodes,Sess,Rem?,HistoryIST,empty,empty,IST) .

    eq searchStateMParallel*(M,GS,F,BStep,Nodes,Sess,Rem?,HistoryIST,INIT,HistoryIST',IST)
    = if BStep == 0 or-else IST == empty
    then
        < INIT, IST, HistoryIST' >
    else
        searchStateMParallel**(M,GS,F,BStep,Nodes,Sess,Rem?,HistoryIST,INIT,HistoryIST',IST)
    fi .

    ceq searchStateMParallel**(M,GS,F,BStep,Nodes,Sess,Rem?,HistoryIST,INIT,HistoryIST',IST)
    =  searchStateMParallel*(M,GS,F,dec(BStep),Nodes,Sess,Rem?,HistoryIST IST',INIT INIT',HistoryIST' IST',
            filterSMsgListX(F,filterIdX(F,
                    nextBackNarrow(M,GS,F,
                        if BStep == 1 then Nodes else unbounded fi,
                        HistoryIST IST',IST')
                ))
        )
    if < INIT', IST' > := searchState-CheckInit(M,Sess,HistoryIST,< empty, empty >,IST)
    --- /\ C := #jobs(IST')
    --- /\ N :=  #jobs(HistoryIST')
    --- /\ N' :=  #jobs(HistoryIST HistoryIST')
    --- [print "\nBStep = " BStep "\n#Jobs = " C "\n#His = " N "\nHisTotal = " N']
    .

    op nextBackNarrowParallel* : Module GrammarList Filters Bound IdSystemSet -> IdSystemSet [memo] .
    eq nextBackNarrowParallel*(M, GS, F, Nodes, IST) = nextBackNarrowParallel(M, GS, F, Nodes, IST) .

    op nextBackNarrowParallel : Module GrammarList Filters Bound IdSystemSet -> IdSystemSet [memo] .
    eq nextBackNarrowParallel(M,GS,F:Filters,Nodes,IST)
    = filter-eachSystem#Top(F:Filters,M,GS, --- filter systems with grammars, never patterns, ...
        simplify-eachSystem#Top(F:Filters,M, --- always simplify before filtering
            simplifyGhost#Top(F:Filters, --- simplify Ghost
                createGhost#Top(M,F:Filters, --- create Ghost again
                    reactivateGhost#Top(F:Filters, --- if messages are not ghost messages anymore, reactive the messages
                        tryUnificationofKnowledge(M, --- create and check ghosts before and after
                            nextBackNarrow*(M,GS,F:Filters,Nodes,empty,IST)
                        )
                    )
                )
             )
        )
    ) .
endm

view Worker from TRIV to CONFIGURATION is
    sort Elt to Oid .
endv

mod PARALLEL-CONFIG is
    pr MAUDE-NPA-EXT .
    pr SET{Worker} .
    pr IQUEUE{Worker} .
    pr MAP{Worker,Bool} .

    sort IStatus .
    ops idle initializing initialized waiting suspending working stopping terminated : -> IStatus .
    op status :_ : IStatus -> Attribute [ctor format(m o o o)] .
    op m :_ : Module -> Attribute .
    op gs:_ : GrammarList -> Attribute .
    op filter :_ : Filters -> Attribute .
    op bStep :_ : Bound -> Attribute .
    op step :_ : Bound -> Attribute .
    op nodes :_ : Bound -> Attribute .
    op sess :_ : Bound -> Attribute .
    op rem :_ : Bool -> Attribute .
    op history :_ : IdSystemSet -> Attribute .
    op nextHistory :_ : IdSystemSet -> Attribute .
    op newHistory :_ : IdSystemSet -> Attribute .
    op jobs :_ : IdSystemSet -> Attribute .
    op next :_ : IdSystemSet -> Attribute .
    op init :_ : IdSystemSet -> Attribute .
    op depth :_ : Nat -> Attribute . --- depth needs to be explored
    op count :_ : Nat -> Attribute .
    op listener :_ : Oid -> Attribute .
    op socket :_ : Oid -> Attribute .
    op waitingWorkers :_ : Queue{Worker} -> Attribute [ctor format(! o o o)] .
    op workers :_ : Set{Worker} -> Attribute [ctor format(! o o o)] .
    op attack :_ : Nat -> Attribute .

    op StopWorking : Oid Oid -> Msg [ctor msg format (b o)] .
    op ShortIdSystem:_ : IdSystemSet-or-Error -> Msg [ctor msg] .
    op Initialize : Oid Oid Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet -> Msg [ctor msg format (b o)] .

    ops Server Client : -> Cid [ctor] .
    ops aServer aClient npa : -> Oid [ctor] .
endm

mod PARALLEL-GENERIC-TOOL is
    pr PARALLEL-CONFIG .
    pr BUFFERED-SOCKET .

    vars M : Module .
    vars GS : GrammarList .
    vars F : Filters .
    vars BStep Step Nodes Sess : Bound .
    vars Rem? : Bool .
    vars IST HistoryIST : IdSystemSet .

    *** prun **********************
    op p-run : Nat Bound Oid -> Configuration .
    op p-run : Nat Bound Filters Oid -> Configuration .

    eq p-run(Attack:Nat,Depth:Bound,O:Oid)
    = p-run(Attack:Nat,Depth:Bound,+parallel,O:Oid) .

    eq p-run(Attack:Nat,Depth:Bound,F:Filters,O:Oid)
    = toMsg(O:Oid, run[0](Attack:Nat,Depth:Bound,F:Filters,unbounded)< unbounded >) .

    op toMsg : Oid IdSystemSet -> Msg .
    eq toMsg(O:Oid, < M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST >)
    = Initialize(O:Oid, npa, M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST) .
endm

fmod REQUEST is
    pr STRING .

    sort Request .

    subsort String < Request .
    op getJob : -> Request .
    eq getJob = "getJob" .
    op sendJob : -> Request .
    eq sendJob = "sendJob" .
    op waiting : -> Request .
    eq waiting = "waiting" .
    op done : -> Request .
    eq done = "done" .
    op stop : -> Request .
    eq stop = "stop" .
    op initialJob : -> Request .
    eq initialJob = "initialJob" .
    op noParse : -> Request .
    eq noParse = "noParse" .
endfm

mod MESSAGE-CONVERTER is
    pr META-LEVEL .
    pr MAUDE-NPA-EXT .

    vars Q : Qid .
    vars QIL : QidList .
    vars S S' S'' : String .
    vars State : IdSystemSetTuple .
    vars N : Nat .

    op SM : -> Module .
    eq SM = upModule('MAUDE-NPA-EXT, false) .

    op qidListToString : QidList -> String .
    op qidListToString : QidList String -> String .
    op stringToQidList : String -> QidList .
    op stringToQidList : String QidList -> QidList .

    eq qidListToString(QIL) = qidListToString(QIL, "") .
    eq qidListToString(nil, S) = S .
    eq qidListToString(Q QIL, S) = qidListToString(QIL, S + string(Q) + " ") .

    eq stringToQidList(S) = stringToQidList(S, nil) .
    eq stringToQidList("", QIL) = QIL .
    eq stringToQidList(S, QIL) = QIL qid(S) [owise] . ***if S =/= "" /\ find(S, " ", 0) = notFound .
    ceq stringToQidList(S, QIL)
        = stringToQidList(S'', QIL qid(S') )
        if N := find(S, " ", 0)
        /\ S' := substr(S, 0, N)
        /\ S'' := substr(S, N + 1, length(S)) .

    op state2string : IdSystemSetTuple -> String .
    eq state2string(State) = qidListToString(metaPrettyPrint(SM, upTerm(State), none)) .

    op string2state : String -> IdSystemSetTuple .
    eq string2state(S)
        = downTerm(getTerm(metaParse(SM, stringToQidList(S), 'IdSystemSetTuple)), errIdSystemSetTuple) .
endm