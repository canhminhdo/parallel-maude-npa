mod MAUDE-NPA-EXT is
    pr MAUDE-NPA .

    sort IdSystemSetPair .

    var M : Module .
    var GS : GrammarList .
    var F : Filters .
    vars Nodes Sess : Bound .
    vars IS IS' : IdSystem .
    vars IST IST' IST'' INIT HistoryIST : IdSystemSet .
    vars N N' : Nat .

    op <_,_> : IdSystemSet IdSystemSet -> IdSystemSetPair .
    op errIdSystemSet : -> IdSystemSet .

    *** decreasing a bound
    op decN : Bound Nat -> Bound .
    eq decN(unbounded, N) = unbounded .
    eq decN(s(N), s(N')) = decN(N, N') .
    eq decN(0, N) = 0 .
    eq decN(N, 0) = N .

    *** number of jobs
    op #jobs : IdSystemSet -> Nat .
    eq #jobs(IS IST) = #jobs(IST) + 1 .
    eq #jobs(empty) = 0 .

    *** combine two simplified sets from simplifyByImplicationL
    op simplifyByImplicationLCombine : IdSystemSet IdSystemSet -> IdSystemSet .
    eq simplifyByImplicationLCombine(IST, empty) = IST .
    eq simplifyByImplicationLCombine(empty, IST') = IST' .
    eq simplifyByImplicationLCombine(IS IST, IS' IST')
    = simplifyByImplicationLCombine*(IST, IS, IS' IST', IS' IST') .

    op simplifyByImplicationLCombine* : IdSystemSet IdSystem IdSystemSet IdSystemSet -> IdSystemSet .
    eq simplifyByImplicationLCombine*(IST, IS, empty, IST')
    = IS simplifyByImplicationLCombine(IST, IST') .

    eq simplifyByImplicationLCombine*(IST, IS, IS' IST', IS' IST'')
    =   if IS implies IS'
        then simplifyByImplicationLCombine*(IST, IS, IST', IST'')
        else
            if IS' implies IS
            then simplifyByImplicationLCombine(IST, IS' IST'')
            else simplifyByImplicationLCombine*(IST, IS, IST', IS' IST'')
            fi
        fi .

    *** filter by simplification
    op filterStates : Filters IdSystemSet IdSystemSet -> IdSystemSet .
    eq filterStates(F, HistoryIST, IST)
    = filterSMsgListX(F, filterIdX(F, simplify-theSystemSet(F, HistoryIST, IST)))
    [print "Simlification"] .

    *** filter init and other states by history
    op searchState-CheckInit : Module Bound IdSystemSet IdSystemSet -> IdSystemSetPair .
    eq searchState-CheckInit(M, Sess, HistoryIST, IST)
    = searchState-CheckInit*(M, Sess, HistoryIST, < empty, empty >, IST) [print "[Filter States and Initial States]"] .

    op searchState-CheckInit* : Module Bound IdSystemSet IdSystemSetPair IdSystemSet -> IdSystemSetPair .
    eq searchState-CheckInit*(M, Sess, HistoryIST, < INIT, IST' >, empty) = < INIT, IST' > .
    eq searchState-CheckInit*(M, Sess, HistoryIST, < INIT, IST' >, (IS IST)) =
        if Sess =/= unbounded and-then countSessions(IS) > Sess
        then searchState-CheckInit*(M, Sess, HistoryIST, < INIT, IST' >, IST)
        else if isInitialM(M, IS)
            then
                searchState-CheckInit*(M, Sess, HistoryIST, < INIT IS, IST' >, IST)
            else searchState-CheckInit*(M, Sess, HistoryIST,
                < INIT, if isNFSystem(M, HistoryIST, IS) then IST' else (IS IST') fi >,
                IST)
            fi
        fi .

    *** pre-defined operators to load shared information at once
    op pM : -> Module .
    op pGS : -> GrammarList .
    op pF : -> Filters .

    *** backward narrowing just one step
    op nextBackNarrowParallel : Bound IdSystemSet -> IdSystemSet .
    ceq nextBackNarrowParallel(Nodes, IST) = nextBackNarrowParallel*(pM, GS, pF, Nodes, IST)
    if GS := downTerm(extract('pGS.GrammarList, upModule('MAUDE-NPA-EXT, false)), (none).GrammarList) .

    op nextBackNarrowParallel : GrammarList Bound IdSystemSet -> IdSystemSet .
    eq nextBackNarrowParallel(GS, Nodes, IST) = nextBackNarrowParallel*(pM, GS, pF, Nodes, IST) .

    op nextBackNarrowParallel* : Module GrammarList Filters Bound IdSystemSet -> IdSystemSet .
    eq nextBackNarrowParallel*(M,GS,F:Filters,Nodes,IST)
    = filter-eachSystem#Top(F:Filters,M,GS, --- filter systems with grammars, never patterns, ...
        simplify-eachSystem#Top(F:Filters,M, --- always simplify before filtering
            simplifyGhost#Top(F:Filters, --- simplify Ghost
                createGhost#Top(M,F:Filters, --- create Ghost again
                    reactivateGhost#Top(F:Filters, --- if messages are not ghost messages anymore, reactive the messages
                        tryUnificationofKnowledge(M, --- create and check ghosts before and after
                            nextBackNarrow*(M,GS,F:Filters,Nodes,empty,IST)
                        )
                    )
                )
             )
        )
    ) .
endm

view IdSystemSet from TRIV to MAUDE-NPA is
    sort Elt to IdSystemSet .
endv

mod PARALLEL-CONFIG is
    pr MAUDE-NPA-EXT .
    pr IQUEUE{Worker} .
    pr IQUEUE{IdSystemSet} .
    pr SEQUENCE .

    sort IStatus .
    ops idle initializing initialized waiting suspending working stopping
        terminated simplifying simplifyingL simplifyingH startSimplifyingH : -> IStatus .

    *** attributes
    op status :_ : IStatus -> Attribute [ctor format(m o o o)] .
    op m :_ : Module -> Attribute .
    op gs :_ : GrammarList -> Attribute .
    op filter :_ : Filters -> Attribute .
    op bStep :_ : Bound -> Attribute .
    op nodes :_ : Bound -> Attribute .
    op sess :_ : Bound -> Attribute .
    op rem :_ : Bool -> Attribute .
    op history :_ : IdSystemSet -> Attribute .
    op jobs :_ : IdSystemSet -> Attribute .
    op next :_ : IdSystemSet -> Attribute .
    op init :_ : IdSystemSet -> Attribute .
    op depth :_ : Nat -> Attribute .
    op #workers :_ : Nat -> Attribute [format(! o o o)] .
    op workers :_ : Queue{Worker} -> Attribute [format(! o o o)] .
    op simJobs :_ : Queue{IdSystemSet} -> Attribute [format(! o o o)] .
    op (loading[_] :_) : Oid Bool -> Attribute .
    op (pending[_] :_) : Oid Seq -> Attribute .

    *** messages
    op stopWorking : Oid Oid -> Msg [ctor msg format (b o)] .
    op ShortIdSystem:_ : IdSystemSet-or-Error -> Msg [ctor msg] .
    op initialize : Oid Oid Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet -> Msg [ctor msg format (b o)] .

    *** object ids and class
    op Manager : -> Cid [ctor] .
    op aManager : -> Oid [ctor] .
    op npa : -> Oid [ctor] .
endm

mod PARALLEL-GENERIC-TOOL is
    pr PARALLEL-CONFIG .

    var M : Module .
    var GS : GrammarList .
    var F : Filters .
    vars BStep Nodes Sess : Bound .
    vars Rem? : Bool .
    vars IST HistoryIST : IdSystemSet .

    *** prun *******************************
    op p-run : Nat Bound Filters Nat -> Configuration .
    op p-run : Nat Bound Nat -> Configuration .

    eq p-run(Attack:Nat,Depth:Bound, nWorker:Nat)
    = < aManager : Manager | #workers : nWorker:Nat, status : idle >
    toMsg(run[0](Attack:Nat,Depth:Bound,+parallel,unbounded)< unbounded >) .

    eq p-run(Attack:Nat,Depth:Bound,F:Filters,nWorker:Nat)
    = < aManager : Manager | #workers : nWorker:Nat, status : idle >
    toMsg(run[0](Attack:Nat,Depth:Bound,F:Filters,unbounded)< unbounded >) .

    op toMsg : IdSystemSet -> Msg .
    eq toMsg(< M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST >)
    = initialize(aManager, npa, M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST) .
endm
