load maude-npa.maude
load socket/buffered-socket.maude
load socket/queue.maude
load common.maude .

mod PARALLEL-MAUDE-NPA is
    pr PARALLEL-GENERIC-TOOL .
    pr REQUEST .
    pr MESSAGE-CONVERTER .

    vars O O' CLIENT : Oid .
    var  A : AttributeSet .
    vars Nodes BStep Step Sess : Bound .
    vars Rem? : Bool .
    vars IST HistoryIST : IdSystemSet .
    vars M : Module .
    var GS : GrammarList .
    var F : Filters .
    vars DATA S : String .
    vars State : IdSystemSetTuple .

    rl [Initialize] : < O : Client |
        status : idle,
        A >
        Initialize(O, O', M, GS, F, BStep, Nodes, Sess, Rem?, HistoryIST, IST)
    => < O : Client |
        status : initialized,
        m : M,
        gs: GS,
        filter : F,
        nodes : Nodes,
        sess : Sess,
        rem : Rem?,
        history : empty,
        A >
        [print "[Initialize]"] .

    rl [CreatedSocket] : < O : Client |
        status : initialized,
        A >
        CreatedSocket(O, socketManager, CLIENT)
    => < O : Client |
        status : waiting,
        socket : CLIENT,
        A >
        Send(CLIENT, O, getJob)
        Receive(CLIENT, O)
        [print "[CreatedSocket]"] .

    rl [Sent] : < O : Client | status : waiting, A > Sent(O, CLIENT)
    => < O : Client | status : waiting, A > [print "[Sent]"] .

    rl [SentData&GetJob] : < O : Client | status : suspending, A > Sent(O, CLIENT)
    => < O : Client | status : waiting, A > Send(CLIENT, O, getJob) [print "[SentData&GetJob]"] .

    crl [Received] : < O : Client |
        status : waiting,
        m : M,
        gs: GS,
        filter : F,
        nodes : Nodes,
        sess : Sess,
        rem : Rem?,
        history : HistoryIST,
        A >
        Received(O, CLIENT, DATA)
    => if State == errIdSystemSetTuple then
        < O : Client |
            status : stopping,
            m : M,
            gs: GS,
            filter : F,
            nodes : Nodes,
            sess : Sess,
            rem : Rem?,
            history : HistoryIST,
            A >
        CloseSocket(CLIENT, O)
    else
        < O : Client |
            status : suspending,
            m : M,
            gs: GS,
            filter : F,
            nodes : Nodes,
            sess : Sess,
            rem : Rem?,
            history : (HistoryIST history(State)), --- update history if any
            A >
        handleJob(O, CLIENT, M, GS, F, step(State), if step(State) == 1 then Nodes else unbounded fi, Sess, Rem?, (HistoryIST history(State)), jobs(State))
    fi
    if State := string2state(DATA)
    [print "[Received]"] .

    op handleJob : Oid Oid Module GrammarList Filters Bound Bound Bound Bool
                    IdSystemSet IdSystemSet -> Configuration .
    ceq handleJob(O, CLIENT, M, GS, F, Step, Nodes, Sess, Rem?, HistoryIST, IST)
    = Send(CLIENT, O, state2string(State))
    if State := searchStateMParallel(M, GS, F, Step, Nodes, Sess, Rem?, HistoryIST, IST)
    [print "[HandleJob]"] .

    rl [ClosedSocket] : < O : Client | A > ClosedSocket(O, CLIENT, S)
    => < O : Client | none > [print "[ClosedSocket]"] .
endm

load examples/Needham_Schroeder_Lowe_ECB.maude
select PARALLEL-MAUDE-NPA .
load debug.maude
erew <> p-run(0, unbounded, aClient)
        < aClient : Client | status : idle >
        CreateClientTcpSocket(socketManager, aClient, "localhost", 9000) .